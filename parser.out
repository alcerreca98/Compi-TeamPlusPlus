Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    QUOTE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
Rule 2     initProg -> <empty>
Rule 3     auxMain -> <empty>
Rule 4     endProg -> <empty>
Rule 5     declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
Rule 6     declarClases -> empty
Rule 7     herencia -> LT EXTENDS ID GT
Rule 8     herencia -> empty
Rule 9     declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes
Rule 10    declarAttributes -> empty
Rule 11    listaIdDeclare -> idDeclare
Rule 12    listaIdDeclare -> idDeclare COMMA listaIdDeclare
Rule 13    idDeclare -> ID auxDeclare auxDeclare2
Rule 14    idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable RBRACK auxCTE
Rule 15    idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK
Rule 16    auxDeclare -> <empty>
Rule 17    auxDeclare2 -> <empty>
Rule 18    auxCTE -> <empty>
Rule 19    auxCTE2 -> <empty>
Rule 20    idCall -> ID idCallaux checkDim
Rule 21    idCall -> ID idCallaux DOT ID
Rule 22    idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
Rule 23    idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2
Rule 24    idCallaux -> <empty>
Rule 25    idCallaux2 -> <empty>
Rule 26    idCallaux3 -> <empty>
Rule 27    idCallaux4 -> <empty>
Rule 28    checkDim -> <empty>
Rule 29    checkDim1 -> <empty>
Rule 30    checkDim2 -> <empty>
Rule 31    tipo -> ID
Rule 32    tipo -> INT
Rule 33    tipo -> FLOAT
Rule 34    tipo -> CHAR
Rule 35    tipoMethod -> VOID
Rule 36    tipoMethod -> INT
Rule 37    tipoMethod -> FLOAT
Rule 38    tipoMethod -> CHAR
Rule 39    declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
Rule 40    declarMethods -> empty
Rule 41    listaParam -> param
Rule 42    listaParam -> param COMMA listaParam
Rule 43    listaParam -> empty
Rule 44    param -> tipo COLON ID
Rule 45    declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar
Rule 46    declarVar -> empty
Rule 47    definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
Rule 48    definFunc -> empty
Rule 49    auxFuncion -> <empty>
Rule 50    setDI -> <empty>
Rule 51    endF -> <empty>
Rule 52    listaEstatutos -> estatutos listaEstatutos
Rule 53    listaEstatutos -> empty
Rule 54    estatutos -> llamada SCOLON
Rule 55    estatutos -> asignacion SCOLON
Rule 56    estatutos -> returnf SCOLON
Rule 57    estatutos -> lectura SCOLON
Rule 58    estatutos -> escritura SCOLON
Rule 59    estatutos -> condicion
Rule 60    estatutos -> cond_w
Rule 61    estatutos -> cond_f
Rule 62    asignacion -> idCall ASIGNA pushPoper exp asignStep2
Rule 63    asignStep2 -> <empty>
Rule 64    llamada -> ID DOT ID LPAREN enviaParam RPAREN
Rule 65    llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN
Rule 66    enviaParam -> paramReferencia
Rule 67    enviaParam -> empty
Rule 68    paramReferencia -> exp paramType
Rule 69    paramReferencia -> exp paramType COMMA paramCount paramReferencia
Rule 70    verExist -> <empty>
Rule 71    paramType -> <empty>
Rule 72    paramCount -> <empty>
Rule 73    coherenceGo -> <empty>
Rule 74    returnf -> RETURN pushPoper LPAREN exp RPAREN popReturn
Rule 75    popReturn -> <empty>
Rule 76    lectura -> READ pushPoper LPAREN listaId RPAREN
Rule 77    listaId -> idCall popIO
Rule 78    listaId -> idCall COMMA popIO insertOpRead listaId
Rule 79    insertOpRead -> <empty>
Rule 80    popIO -> <empty>
Rule 81    escritura -> WRITE pushPoper LPAREN exp popIO lextra RPAREN
Rule 82    escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
Rule 83    lextra -> COMMA insertOpWrite exp popIO lextra
Rule 84    lextra -> COMMA insertOpWrite LETRERO letreroPush popIO lextra
Rule 85    lextra -> empty
Rule 86    insertOpWrite -> <empty>
Rule 87    letreroPush -> <empty>
Rule 88    condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
Rule 89    condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
Rule 90    cond1 -> <empty>
Rule 91    cond3 -> <empty>
Rule 92    cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
Rule 93    step1While -> <empty>
Rule 94    step2While -> <empty>
Rule 95    step3While -> <empty>
Rule 96    cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
Rule 97    step1For -> <empty>
Rule 98    exp -> texp step7
Rule 99    exp -> texp step7 OR pushPoper exp
Rule 100   texp -> gexp step6
Rule 101   texp -> gexp step6 AND pushPoper texp
Rule 102   gexp -> mexp step5
Rule 103   gexp -> mexp step5 LT pushPoper gexp
Rule 104   gexp -> mexp step5 GT pushPoper gexp
Rule 105   gexp -> mexp step5 LTE pushPoper gexp
Rule 106   gexp -> mexp step5 GTE pushPoper gexp
Rule 107   gexp -> mexp step5 EQUALS pushPoper gexp
Rule 108   gexp -> mexp step5 NEQUALS pushPoper gexp
Rule 109   mexp -> t step4
Rule 110   mexp -> t step4 PLUS pushPoper mexp
Rule 111   mexp -> t step4 MINUS pushPoper mexp
Rule 112   t -> f step3
Rule 113   t -> f step3 MULT pushPoper t
Rule 114   t -> f step3 DIV pushPoper t
Rule 115   f -> LPAREN addFF exp RPAREN rmFF
Rule 116   f -> CTE_I addCteTable step1
Rule 117   f -> CTE_F addCteTable step1
Rule 118   f -> CTE_C addCteTable step1
Rule 119   f -> llamada
Rule 120   f -> idCall
Rule 121   addCteTable -> <empty>
Rule 122   step1 -> <empty>
Rule 123   step3 -> <empty>
Rule 124   step4 -> <empty>
Rule 125   step5 -> <empty>
Rule 126   step6 -> <empty>
Rule 127   step7 -> <empty>
Rule 128   addFF -> <empty>
Rule 129   rmFF -> <empty>
Rule 130   pushPoper -> <empty>
Rule 131   empty -> <empty>
Rule 132   prueba -> <empty>

Terminals, with rules where they appear

AND                  : 101
ASIGNA               : 62
ATTRIBUTES           : 5
CHAR                 : 34 38
CLASS                : 5
COLON                : 9 44 45
COMMA                : 12 15 23 42 69 78 83 84
CTE_C                : 118
CTE_F                : 117
CTE_I                : 14 15 15 116
DIV                  : 114
DO                   : 92 96
DOT                  : 21 64
ELSE                 : 89
EQUALS               : 107
EXTENDS              : 7
FLOAT                : 33 37
FOR                  : 96
FUNC                 : 39 47
GT                   : 7 104
GTE                  : 106
ID                   : 1 5 7 13 14 15 20 21 21 22 23 31 39 44 47 64 64 65
IF                   : 88 89
INT                  : 32 36
LBRACE               : 1 5 39 47 88 89 89 92 96
LBRACK               : 14 15 22 23
LETRERO              : 82 84
LPAREN               : 1 39 47 64 65 74 76 81 82 88 89 92 115
LT                   : 7 103
LTE                  : 105
MAIN                 : 1
METHODS              : 5
MINUS                : 111
MULT                 : 113
NEQUALS              : 108
OR                   : 99
PLUS                 : 110
PROGRAM              : 1
QUOTE                : 
RBRACE               : 1 5 39 47 88 89 89 92 96
RBRACK               : 14 15 22 23
READ                 : 76
RETURN               : 74
RPAREN               : 1 39 47 64 65 74 76 81 82 88 89 92 115
SCOLON               : 1 9 45 54 55 56 57 58
THEN                 : 88 89
TO                   : 96
VAR                  : 45
VOID                 : 35
WHILE                : 92
WRITE                : 81 82
error                : 

Nonterminals, with rules where they appear

addCteTable          : 14 15 15 116 117 118
addFF                : 22 23 23 115
asignStep2           : 62
asignacion           : 55 96
auxCTE               : 14
auxCTE2              : 15
auxDeclare           : 13 14 15
auxDeclare2          : 13
auxFuncion           : 47
auxMain              : 1
checkDim             : 20
checkDim1            : 22
checkDim2            : 23
coherenceGo          : 65
cond1                : 88 89
cond3                : 89
cond_f               : 61
cond_w               : 60
condicion            : 59
declarAttributes     : 5 9
declarClases         : 1 5
declarMethods        : 5 39
declarVar            : 1 1 45 47
definFunc            : 1 47
empty                : 6 8 10 40 43 46 48 53 67 85
endF                 : 47
endProg              : 1
enviaParam           : 64 65
escritura            : 58
estatutos            : 52
exp                  : 22 23 23 62 68 69 74 81 83 88 89 92 96 99 115
f                    : 112 113 114
gexp                 : 100 101 103 104 105 106 107 108
herencia             : 5
idCall               : 62 77 78 120
idCallaux            : 20 21 22 23
idCallaux2           : 23
idCallaux3           : 23
idCallaux4           : 22
idDeclare            : 11 12
initProg             : 1
insertOpRead         : 78
insertOpWrite        : 83 84
lectura              : 57
letreroPush          : 82 84
lextra               : 81 82 83 84
listaEstatutos       : 1 39 47 52 88 89 89 92 96
listaId              : 76 78
listaIdDeclare       : 9 12 45
listaParam           : 39 42 47
llamada              : 54 119
mexp                 : 102 103 104 105 106 107 108 110 111
param                : 41 42
paramCount           : 69
paramReferencia      : 66 69
paramType            : 68 69
popIO                : 77 78 81 82 83 84
popReturn            : 74
program              : 0
prueba               : 1
pushPoper            : 62 74 76 81 82 99 101 103 104 105 106 107 108 110 111 113 114
returnf              : 56
rmFF                 : 22 23 23 115
setDI                : 47
step1                : 116 117 118
step1For             : 96
step1While           : 92 96
step2While           : 92 96
step3                : 112 113 114
step3While           : 92 96
step4                : 109 110 111
step5                : 102 103 104 105 106 107 108
step6                : 100 101
step7                : 98 99
t                    : 109 110 111 113 114
texp                 : 98 99 101
tipo                 : 9 44 45
tipoMethod           : 39 47
verExist             : 65

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (2) initProg -> .

    SCOLON          reduce using rule 2 (initProg -> .)

    initProg                       shift and go to state 4

state 4

    (1) program -> PROGRAM ID initProg . SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    SCOLON          shift and go to state 5


state 5

    (1) program -> PROGRAM ID initProg SCOLON . declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (5) declarClases -> . CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (6) declarClases -> . empty
    (131) empty -> .

    CLASS           shift and go to state 7
    VAR             reduce using rule 131 (empty -> .)
    VOID            reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)
    MAIN            reduce using rule 131 (empty -> .)

    declarClases                   shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM ID initProg SCOLON declarClases . declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (45) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (46) declarVar -> . empty
    (131) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)
    MAIN            reduce using rule 131 (empty -> .)

    declarVar                      shift and go to state 9
    empty                          shift and go to state 11

state 7

    (5) declarClases -> CLASS . ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    ID              shift and go to state 12


state 8

    (6) declarClases -> empty .

    VAR             reduce using rule 6 (declarClases -> empty .)
    VOID            reduce using rule 6 (declarClases -> empty .)
    INT             reduce using rule 6 (declarClases -> empty .)
    FLOAT           reduce using rule 6 (declarClases -> empty .)
    CHAR            reduce using rule 6 (declarClases -> empty .)
    MAIN            reduce using rule 6 (declarClases -> empty .)


state 9

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar . definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (47) definFunc -> . tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (48) definFunc -> . empty
    (35) tipoMethod -> . VOID
    (36) tipoMethod -> . INT
    (37) tipoMethod -> . FLOAT
    (38) tipoMethod -> . CHAR
    (131) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    MAIN            reduce using rule 131 (empty -> .)

    definFunc                      shift and go to state 13
    tipoMethod                     shift and go to state 14
    empty                          shift and go to state 15

state 10

    (45) declarVar -> VAR . tipo COLON listaIdDeclare SCOLON declarVar
    (31) tipo -> . ID
    (32) tipo -> . INT
    (33) tipo -> . FLOAT
    (34) tipo -> . CHAR

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    tipo                           shift and go to state 20

state 11

    (46) declarVar -> empty .

    VOID            reduce using rule 46 (declarVar -> empty .)
    INT             reduce using rule 46 (declarVar -> empty .)
    FLOAT           reduce using rule 46 (declarVar -> empty .)
    CHAR            reduce using rule 46 (declarVar -> empty .)
    MAIN            reduce using rule 46 (declarVar -> empty .)
    LBRACE          reduce using rule 46 (declarVar -> empty .)


state 12

    (5) declarClases -> CLASS ID . herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (7) herencia -> . LT EXTENDS ID GT
    (8) herencia -> . empty
    (131) empty -> .

    LT              shift and go to state 26
    LBRACE          reduce using rule 131 (empty -> .)

    herencia                       shift and go to state 25
    empty                          shift and go to state 27

state 13

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc . MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    MAIN            shift and go to state 28


state 14

    (47) definFunc -> tipoMethod . FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    FUNC            shift and go to state 29


state 15

    (48) definFunc -> empty .

    MAIN            reduce using rule 48 (definFunc -> empty .)


state 16

    (35) tipoMethod -> VOID .

    FUNC            reduce using rule 35 (tipoMethod -> VOID .)


state 17

    (36) tipoMethod -> INT .

    FUNC            reduce using rule 36 (tipoMethod -> INT .)


state 18

    (37) tipoMethod -> FLOAT .

    FUNC            reduce using rule 37 (tipoMethod -> FLOAT .)


state 19

    (38) tipoMethod -> CHAR .

    FUNC            reduce using rule 38 (tipoMethod -> CHAR .)


state 20

    (45) declarVar -> VAR tipo . COLON listaIdDeclare SCOLON declarVar

    COLON           shift and go to state 30


state 21

    (31) tipo -> ID .

    COLON           reduce using rule 31 (tipo -> ID .)


state 22

    (32) tipo -> INT .

    COLON           reduce using rule 32 (tipo -> INT .)


state 23

    (33) tipo -> FLOAT .

    COLON           reduce using rule 33 (tipo -> FLOAT .)


state 24

    (34) tipo -> CHAR .

    COLON           reduce using rule 34 (tipo -> CHAR .)


state 25

    (5) declarClases -> CLASS ID herencia . LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    LBRACE          shift and go to state 31


state 26

    (7) herencia -> LT . EXTENDS ID GT

    EXTENDS         shift and go to state 32


state 27

    (8) herencia -> empty .

    LBRACE          reduce using rule 8 (herencia -> empty .)


state 28

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN . auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (3) auxMain -> .

    LPAREN          reduce using rule 3 (auxMain -> .)

    auxMain                        shift and go to state 33

state 29

    (47) definFunc -> tipoMethod FUNC . ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    ID              shift and go to state 34


state 30

    (45) declarVar -> VAR tipo COLON . listaIdDeclare SCOLON declarVar
    (11) listaIdDeclare -> . idDeclare
    (12) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (13) idDeclare -> . ID auxDeclare auxDeclare2
    (14) idDeclare -> . ID auxDeclare LBRACK CTE_I addCteTable RBRACK auxCTE
    (15) idDeclare -> . ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK

    ID              shift and go to state 37

    listaIdDeclare                 shift and go to state 35
    idDeclare                      shift and go to state 36

state 31

    (5) declarClases -> CLASS ID herencia LBRACE . ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    ATTRIBUTES      shift and go to state 38


state 32

    (7) herencia -> LT EXTENDS . ID GT

    ID              shift and go to state 39


state 33

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain . LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    LPAREN          shift and go to state 40


state 34

    (47) definFunc -> tipoMethod FUNC ID . auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (49) auxFuncion -> .

    LPAREN          reduce using rule 49 (auxFuncion -> .)

    auxFuncion                     shift and go to state 41

state 35

    (45) declarVar -> VAR tipo COLON listaIdDeclare . SCOLON declarVar

    SCOLON          shift and go to state 42


state 36

    (11) listaIdDeclare -> idDeclare .
    (12) listaIdDeclare -> idDeclare . COMMA listaIdDeclare

    SCOLON          reduce using rule 11 (listaIdDeclare -> idDeclare .)
    COMMA           shift and go to state 43


state 37

    (13) idDeclare -> ID . auxDeclare auxDeclare2
    (14) idDeclare -> ID . auxDeclare LBRACK CTE_I addCteTable RBRACK auxCTE
    (15) idDeclare -> ID . auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK
    (16) auxDeclare -> .

    LBRACK          reduce using rule 16 (auxDeclare -> .)
    COMMA           reduce using rule 16 (auxDeclare -> .)
    SCOLON          reduce using rule 16 (auxDeclare -> .)

    auxDeclare                     shift and go to state 44

state 38

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES . declarAttributes METHODS declarMethods RBRACE declarClases
    (9) declarAttributes -> . tipo COLON listaIdDeclare SCOLON declarAttributes
    (10) declarAttributes -> . empty
    (31) tipo -> . ID
    (32) tipo -> . INT
    (33) tipo -> . FLOAT
    (34) tipo -> . CHAR
    (131) empty -> .

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    METHODS         reduce using rule 131 (empty -> .)

    declarAttributes               shift and go to state 45
    tipo                           shift and go to state 46
    empty                          shift and go to state 47

state 39

    (7) herencia -> LT EXTENDS ID . GT

    GT              shift and go to state 48


state 40

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN . RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    RPAREN          shift and go to state 49


state 41

    (47) definFunc -> tipoMethod FUNC ID auxFuncion . LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    LPAREN          shift and go to state 50


state 42

    (45) declarVar -> VAR tipo COLON listaIdDeclare SCOLON . declarVar
    (45) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (46) declarVar -> . empty
    (131) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)
    MAIN            reduce using rule 131 (empty -> .)
    LBRACE          reduce using rule 131 (empty -> .)

    declarVar                      shift and go to state 51
    empty                          shift and go to state 11

state 43

    (12) listaIdDeclare -> idDeclare COMMA . listaIdDeclare
    (11) listaIdDeclare -> . idDeclare
    (12) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (13) idDeclare -> . ID auxDeclare auxDeclare2
    (14) idDeclare -> . ID auxDeclare LBRACK CTE_I addCteTable RBRACK auxCTE
    (15) idDeclare -> . ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK

    ID              shift and go to state 37

    idDeclare                      shift and go to state 36
    listaIdDeclare                 shift and go to state 52

state 44

    (13) idDeclare -> ID auxDeclare . auxDeclare2
    (14) idDeclare -> ID auxDeclare . LBRACK CTE_I addCteTable RBRACK auxCTE
    (15) idDeclare -> ID auxDeclare . LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK
    (17) auxDeclare2 -> .

    LBRACK          shift and go to state 54
    COMMA           reduce using rule 17 (auxDeclare2 -> .)
    SCOLON          reduce using rule 17 (auxDeclare2 -> .)

    auxDeclare2                    shift and go to state 53

state 45

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes . METHODS declarMethods RBRACE declarClases

    METHODS         shift and go to state 55


state 46

    (9) declarAttributes -> tipo . COLON listaIdDeclare SCOLON declarAttributes

    COLON           shift and go to state 56


state 47

    (10) declarAttributes -> empty .

    METHODS         reduce using rule 10 (declarAttributes -> empty .)


state 48

    (7) herencia -> LT EXTENDS ID GT .

    LBRACE          reduce using rule 7 (herencia -> LT EXTENDS ID GT .)


state 49

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN . declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (45) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (46) declarVar -> . empty
    (131) empty -> .

    VAR             shift and go to state 10
    LBRACE          reduce using rule 131 (empty -> .)

    declarVar                      shift and go to state 57
    empty                          shift and go to state 11

state 50

    (47) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN . listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (41) listaParam -> . param
    (42) listaParam -> . param COMMA listaParam
    (43) listaParam -> . empty
    (44) param -> . tipo COLON ID
    (131) empty -> .
    (31) tipo -> . ID
    (32) tipo -> . INT
    (33) tipo -> . FLOAT
    (34) tipo -> . CHAR

    RPAREN          reduce using rule 131 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    listaParam                     shift and go to state 58
    param                          shift and go to state 59
    empty                          shift and go to state 60
    tipo                           shift and go to state 61

state 51

    (45) declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .

    VOID            reduce using rule 45 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    INT             reduce using rule 45 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    FLOAT           reduce using rule 45 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    CHAR            reduce using rule 45 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    MAIN            reduce using rule 45 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    LBRACE          reduce using rule 45 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)


state 52

    (12) listaIdDeclare -> idDeclare COMMA listaIdDeclare .

    SCOLON          reduce using rule 12 (listaIdDeclare -> idDeclare COMMA listaIdDeclare .)


state 53

    (13) idDeclare -> ID auxDeclare auxDeclare2 .

    COMMA           reduce using rule 13 (idDeclare -> ID auxDeclare auxDeclare2 .)
    SCOLON          reduce using rule 13 (idDeclare -> ID auxDeclare auxDeclare2 .)


state 54

    (14) idDeclare -> ID auxDeclare LBRACK . CTE_I addCteTable RBRACK auxCTE
    (15) idDeclare -> ID auxDeclare LBRACK . CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK

    CTE_I           shift and go to state 62


state 55

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS . declarMethods RBRACE declarClases
    (39) declarMethods -> . tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (40) declarMethods -> . empty
    (35) tipoMethod -> . VOID
    (36) tipoMethod -> . INT
    (37) tipoMethod -> . FLOAT
    (38) tipoMethod -> . CHAR
    (131) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    RBRACE          reduce using rule 131 (empty -> .)

    declarMethods                  shift and go to state 63
    tipoMethod                     shift and go to state 64
    empty                          shift and go to state 65

state 56

    (9) declarAttributes -> tipo COLON . listaIdDeclare SCOLON declarAttributes
    (11) listaIdDeclare -> . idDeclare
    (12) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (13) idDeclare -> . ID auxDeclare auxDeclare2
    (14) idDeclare -> . ID auxDeclare LBRACK CTE_I addCteTable RBRACK auxCTE
    (15) idDeclare -> . ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK

    ID              shift and go to state 37

    listaIdDeclare                 shift and go to state 66
    idDeclare                      shift and go to state 36

state 57

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar . LBRACE listaEstatutos RBRACE endProg prueba

    LBRACE          shift and go to state 67


state 58

    (47) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam . RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    RPAREN          shift and go to state 68


state 59

    (41) listaParam -> param .
    (42) listaParam -> param . COMMA listaParam

    RPAREN          reduce using rule 41 (listaParam -> param .)
    COMMA           shift and go to state 69


state 60

    (43) listaParam -> empty .

    RPAREN          reduce using rule 43 (listaParam -> empty .)


state 61

    (44) param -> tipo . COLON ID

    COLON           shift and go to state 70


state 62

    (14) idDeclare -> ID auxDeclare LBRACK CTE_I . addCteTable RBRACK auxCTE
    (15) idDeclare -> ID auxDeclare LBRACK CTE_I . addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK
    (121) addCteTable -> .

    RBRACK          reduce using rule 121 (addCteTable -> .)
    COMMA           reduce using rule 121 (addCteTable -> .)

    addCteTable                    shift and go to state 71

state 63

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods . RBRACE declarClases

    RBRACE          shift and go to state 72


state 64

    (39) declarMethods -> tipoMethod . FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    FUNC            shift and go to state 73


state 65

    (40) declarMethods -> empty .

    RBRACE          reduce using rule 40 (declarMethods -> empty .)


state 66

    (9) declarAttributes -> tipo COLON listaIdDeclare . SCOLON declarAttributes

    SCOLON          shift and go to state 74


state 67

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE . listaEstatutos RBRACE endProg prueba
    (52) listaEstatutos -> . estatutos listaEstatutos
    (53) listaEstatutos -> . empty
    (54) estatutos -> . llamada SCOLON
    (55) estatutos -> . asignacion SCOLON
    (56) estatutos -> . returnf SCOLON
    (57) estatutos -> . lectura SCOLON
    (58) estatutos -> . escritura SCOLON
    (59) estatutos -> . condicion
    (60) estatutos -> . cond_w
    (61) estatutos -> . cond_f
    (131) empty -> .
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (62) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (74) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (76) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (81) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (82) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (88) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (92) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (96) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    RBRACE          reduce using rule 131 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 76
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 68

    (47) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN . declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (45) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (46) declarVar -> . empty
    (131) empty -> .

    VAR             shift and go to state 10
    LBRACE          reduce using rule 131 (empty -> .)

    declarVar                      shift and go to state 94
    empty                          shift and go to state 11

state 69

    (42) listaParam -> param COMMA . listaParam
    (41) listaParam -> . param
    (42) listaParam -> . param COMMA listaParam
    (43) listaParam -> . empty
    (44) param -> . tipo COLON ID
    (131) empty -> .
    (31) tipo -> . ID
    (32) tipo -> . INT
    (33) tipo -> . FLOAT
    (34) tipo -> . CHAR

    RPAREN          reduce using rule 131 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    param                          shift and go to state 59
    listaParam                     shift and go to state 95
    empty                          shift and go to state 60
    tipo                           shift and go to state 61

state 70

    (44) param -> tipo COLON . ID

    ID              shift and go to state 96


state 71

    (14) idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable . RBRACK auxCTE
    (15) idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable . COMMA CTE_I addCteTable auxCTE2 RBRACK

    RBRACK          shift and go to state 97
    COMMA           shift and go to state 98


state 72

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE . declarClases
    (5) declarClases -> . CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (6) declarClases -> . empty
    (131) empty -> .

    CLASS           shift and go to state 7
    VAR             reduce using rule 131 (empty -> .)
    VOID            reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)
    MAIN            reduce using rule 131 (empty -> .)

    declarClases                   shift and go to state 99
    empty                          shift and go to state 8

state 73

    (39) declarMethods -> tipoMethod FUNC . ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    ID              shift and go to state 100


state 74

    (9) declarAttributes -> tipo COLON listaIdDeclare SCOLON . declarAttributes
    (9) declarAttributes -> . tipo COLON listaIdDeclare SCOLON declarAttributes
    (10) declarAttributes -> . empty
    (31) tipo -> . ID
    (32) tipo -> . INT
    (33) tipo -> . FLOAT
    (34) tipo -> . CHAR
    (131) empty -> .

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    METHODS         reduce using rule 131 (empty -> .)

    tipo                           shift and go to state 46
    declarAttributes               shift and go to state 101
    empty                          shift and go to state 47

state 75

    (64) llamada -> ID . DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> ID . verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> ID . idCallaux checkDim
    (21) idCall -> ID . idCallaux DOT ID
    (22) idCall -> ID . idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> ID . idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2
    (70) verExist -> .
    (24) idCallaux -> .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 102
    LPAREN          reduce using rule 70 (verExist -> .)
    LBRACK          reduce using rule 24 (idCallaux -> .)
    ASIGNA          reduce using rule 24 (idCallaux -> .)
    MULT            reduce using rule 24 (idCallaux -> .)
    DIV             reduce using rule 24 (idCallaux -> .)
    PLUS            reduce using rule 24 (idCallaux -> .)
    MINUS           reduce using rule 24 (idCallaux -> .)
    LT              reduce using rule 24 (idCallaux -> .)
    GT              reduce using rule 24 (idCallaux -> .)
    LTE             reduce using rule 24 (idCallaux -> .)
    GTE             reduce using rule 24 (idCallaux -> .)
    EQUALS          reduce using rule 24 (idCallaux -> .)
    NEQUALS         reduce using rule 24 (idCallaux -> .)
    AND             reduce using rule 24 (idCallaux -> .)
    OR              reduce using rule 24 (idCallaux -> .)
    RPAREN          reduce using rule 24 (idCallaux -> .)
    COMMA           reduce using rule 24 (idCallaux -> .)
    SCOLON          reduce using rule 24 (idCallaux -> .)
    TO              reduce using rule 24 (idCallaux -> .)
    DO              reduce using rule 24 (idCallaux -> .)
    RBRACK          reduce using rule 24 (idCallaux -> .)

  ! DOT             [ reduce using rule 24 (idCallaux -> .) ]

    verExist                       shift and go to state 103
    idCallaux                      shift and go to state 104

state 76

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos . RBRACE endProg prueba

    RBRACE          shift and go to state 105


state 77

    (52) listaEstatutos -> estatutos . listaEstatutos
    (52) listaEstatutos -> . estatutos listaEstatutos
    (53) listaEstatutos -> . empty
    (54) estatutos -> . llamada SCOLON
    (55) estatutos -> . asignacion SCOLON
    (56) estatutos -> . returnf SCOLON
    (57) estatutos -> . lectura SCOLON
    (58) estatutos -> . escritura SCOLON
    (59) estatutos -> . condicion
    (60) estatutos -> . cond_w
    (61) estatutos -> . cond_f
    (131) empty -> .
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (62) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (74) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (76) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (81) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (82) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (88) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (92) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (96) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    RBRACE          reduce using rule 131 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    estatutos                      shift and go to state 77
    listaEstatutos                 shift and go to state 106
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 78

    (53) listaEstatutos -> empty .

    RBRACE          reduce using rule 53 (listaEstatutos -> empty .)


state 79

    (54) estatutos -> llamada . SCOLON

    SCOLON          shift and go to state 107


state 80

    (55) estatutos -> asignacion . SCOLON

    SCOLON          shift and go to state 108


state 81

    (56) estatutos -> returnf . SCOLON

    SCOLON          shift and go to state 109


state 82

    (57) estatutos -> lectura . SCOLON

    SCOLON          shift and go to state 110


state 83

    (58) estatutos -> escritura . SCOLON

    SCOLON          shift and go to state 111


state 84

    (59) estatutos -> condicion .

    ID              reduce using rule 59 (estatutos -> condicion .)
    RETURN          reduce using rule 59 (estatutos -> condicion .)
    READ            reduce using rule 59 (estatutos -> condicion .)
    WRITE           reduce using rule 59 (estatutos -> condicion .)
    IF              reduce using rule 59 (estatutos -> condicion .)
    WHILE           reduce using rule 59 (estatutos -> condicion .)
    FOR             reduce using rule 59 (estatutos -> condicion .)
    RBRACE          reduce using rule 59 (estatutos -> condicion .)


state 85

    (60) estatutos -> cond_w .

    ID              reduce using rule 60 (estatutos -> cond_w .)
    RETURN          reduce using rule 60 (estatutos -> cond_w .)
    READ            reduce using rule 60 (estatutos -> cond_w .)
    WRITE           reduce using rule 60 (estatutos -> cond_w .)
    IF              reduce using rule 60 (estatutos -> cond_w .)
    WHILE           reduce using rule 60 (estatutos -> cond_w .)
    FOR             reduce using rule 60 (estatutos -> cond_w .)
    RBRACE          reduce using rule 60 (estatutos -> cond_w .)


state 86

    (61) estatutos -> cond_f .

    ID              reduce using rule 61 (estatutos -> cond_f .)
    RETURN          reduce using rule 61 (estatutos -> cond_f .)
    READ            reduce using rule 61 (estatutos -> cond_f .)
    WRITE           reduce using rule 61 (estatutos -> cond_f .)
    IF              reduce using rule 61 (estatutos -> cond_f .)
    WHILE           reduce using rule 61 (estatutos -> cond_f .)
    FOR             reduce using rule 61 (estatutos -> cond_f .)
    RBRACE          reduce using rule 61 (estatutos -> cond_f .)


state 87

    (62) asignacion -> idCall . ASIGNA pushPoper exp asignStep2

    ASIGNA          shift and go to state 112


state 88

    (74) returnf -> RETURN . pushPoper LPAREN exp RPAREN popReturn
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 113

state 89

    (76) lectura -> READ . pushPoper LPAREN listaId RPAREN
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 114

state 90

    (81) escritura -> WRITE . pushPoper LPAREN exp popIO lextra RPAREN
    (82) escritura -> WRITE . pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 115

state 91

    (88) condicion -> IF . LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> IF . LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    LPAREN          shift and go to state 116


state 92

    (92) cond_w -> WHILE . step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (93) step1While -> .

    LPAREN          reduce using rule 93 (step1While -> .)

    step1While                     shift and go to state 117

state 93

    (96) cond_f -> FOR . asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (62) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    ID              shift and go to state 119

    asignacion                     shift and go to state 118
    idCall                         shift and go to state 87

state 94

    (47) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar . setDI LBRACE listaEstatutos RBRACE endF definFunc
    (50) setDI -> .

    LBRACE          reduce using rule 50 (setDI -> .)

    setDI                          shift and go to state 120

state 95

    (42) listaParam -> param COMMA listaParam .

    RPAREN          reduce using rule 42 (listaParam -> param COMMA listaParam .)


state 96

    (44) param -> tipo COLON ID .

    COMMA           reduce using rule 44 (param -> tipo COLON ID .)
    RPAREN          reduce using rule 44 (param -> tipo COLON ID .)


state 97

    (14) idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable RBRACK . auxCTE
    (18) auxCTE -> .

    COMMA           reduce using rule 18 (auxCTE -> .)
    SCOLON          reduce using rule 18 (auxCTE -> .)

    auxCTE                         shift and go to state 121

state 98

    (15) idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable COMMA . CTE_I addCteTable auxCTE2 RBRACK

    CTE_I           shift and go to state 122


state 99

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .

    VAR             reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    VOID            reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    INT             reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    FLOAT           reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    CHAR            reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    MAIN            reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)


state 100

    (39) declarMethods -> tipoMethod FUNC ID . LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    LPAREN          shift and go to state 123


state 101

    (9) declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes .

    METHODS         reduce using rule 9 (declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes .)


state 102

    (64) llamada -> ID DOT . ID LPAREN enviaParam RPAREN

    ID              shift and go to state 124


state 103

    (65) llamada -> ID verExist . LPAREN enviaParam coherenceGo RPAREN

    LPAREN          shift and go to state 125


state 104

    (20) idCall -> ID idCallaux . checkDim
    (21) idCall -> ID idCallaux . DOT ID
    (22) idCall -> ID idCallaux . LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> ID idCallaux . LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2
    (28) checkDim -> .

    DOT             shift and go to state 127
    LBRACK          shift and go to state 128
    ASIGNA          reduce using rule 28 (checkDim -> .)
    MULT            reduce using rule 28 (checkDim -> .)
    DIV             reduce using rule 28 (checkDim -> .)
    PLUS            reduce using rule 28 (checkDim -> .)
    MINUS           reduce using rule 28 (checkDim -> .)
    LT              reduce using rule 28 (checkDim -> .)
    GT              reduce using rule 28 (checkDim -> .)
    LTE             reduce using rule 28 (checkDim -> .)
    GTE             reduce using rule 28 (checkDim -> .)
    EQUALS          reduce using rule 28 (checkDim -> .)
    NEQUALS         reduce using rule 28 (checkDim -> .)
    AND             reduce using rule 28 (checkDim -> .)
    OR              reduce using rule 28 (checkDim -> .)
    RPAREN          reduce using rule 28 (checkDim -> .)
    COMMA           reduce using rule 28 (checkDim -> .)
    SCOLON          reduce using rule 28 (checkDim -> .)
    TO              reduce using rule 28 (checkDim -> .)
    DO              reduce using rule 28 (checkDim -> .)
    RBRACK          reduce using rule 28 (checkDim -> .)

    checkDim                       shift and go to state 126

state 105

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE . endProg prueba
    (4) endProg -> .

    $end            reduce using rule 4 (endProg -> .)

    endProg                        shift and go to state 129

state 106

    (52) listaEstatutos -> estatutos listaEstatutos .

    RBRACE          reduce using rule 52 (listaEstatutos -> estatutos listaEstatutos .)


state 107

    (54) estatutos -> llamada SCOLON .

    ID              reduce using rule 54 (estatutos -> llamada SCOLON .)
    RETURN          reduce using rule 54 (estatutos -> llamada SCOLON .)
    READ            reduce using rule 54 (estatutos -> llamada SCOLON .)
    WRITE           reduce using rule 54 (estatutos -> llamada SCOLON .)
    IF              reduce using rule 54 (estatutos -> llamada SCOLON .)
    WHILE           reduce using rule 54 (estatutos -> llamada SCOLON .)
    FOR             reduce using rule 54 (estatutos -> llamada SCOLON .)
    RBRACE          reduce using rule 54 (estatutos -> llamada SCOLON .)


state 108

    (55) estatutos -> asignacion SCOLON .

    ID              reduce using rule 55 (estatutos -> asignacion SCOLON .)
    RETURN          reduce using rule 55 (estatutos -> asignacion SCOLON .)
    READ            reduce using rule 55 (estatutos -> asignacion SCOLON .)
    WRITE           reduce using rule 55 (estatutos -> asignacion SCOLON .)
    IF              reduce using rule 55 (estatutos -> asignacion SCOLON .)
    WHILE           reduce using rule 55 (estatutos -> asignacion SCOLON .)
    FOR             reduce using rule 55 (estatutos -> asignacion SCOLON .)
    RBRACE          reduce using rule 55 (estatutos -> asignacion SCOLON .)


state 109

    (56) estatutos -> returnf SCOLON .

    ID              reduce using rule 56 (estatutos -> returnf SCOLON .)
    RETURN          reduce using rule 56 (estatutos -> returnf SCOLON .)
    READ            reduce using rule 56 (estatutos -> returnf SCOLON .)
    WRITE           reduce using rule 56 (estatutos -> returnf SCOLON .)
    IF              reduce using rule 56 (estatutos -> returnf SCOLON .)
    WHILE           reduce using rule 56 (estatutos -> returnf SCOLON .)
    FOR             reduce using rule 56 (estatutos -> returnf SCOLON .)
    RBRACE          reduce using rule 56 (estatutos -> returnf SCOLON .)


state 110

    (57) estatutos -> lectura SCOLON .

    ID              reduce using rule 57 (estatutos -> lectura SCOLON .)
    RETURN          reduce using rule 57 (estatutos -> lectura SCOLON .)
    READ            reduce using rule 57 (estatutos -> lectura SCOLON .)
    WRITE           reduce using rule 57 (estatutos -> lectura SCOLON .)
    IF              reduce using rule 57 (estatutos -> lectura SCOLON .)
    WHILE           reduce using rule 57 (estatutos -> lectura SCOLON .)
    FOR             reduce using rule 57 (estatutos -> lectura SCOLON .)
    RBRACE          reduce using rule 57 (estatutos -> lectura SCOLON .)


state 111

    (58) estatutos -> escritura SCOLON .

    ID              reduce using rule 58 (estatutos -> escritura SCOLON .)
    RETURN          reduce using rule 58 (estatutos -> escritura SCOLON .)
    READ            reduce using rule 58 (estatutos -> escritura SCOLON .)
    WRITE           reduce using rule 58 (estatutos -> escritura SCOLON .)
    IF              reduce using rule 58 (estatutos -> escritura SCOLON .)
    WHILE           reduce using rule 58 (estatutos -> escritura SCOLON .)
    FOR             reduce using rule 58 (estatutos -> escritura SCOLON .)
    RBRACE          reduce using rule 58 (estatutos -> escritura SCOLON .)


state 112

    (62) asignacion -> idCall ASIGNA . pushPoper exp asignStep2
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 130

state 113

    (74) returnf -> RETURN pushPoper . LPAREN exp RPAREN popReturn

    LPAREN          shift and go to state 131


state 114

    (76) lectura -> READ pushPoper . LPAREN listaId RPAREN

    LPAREN          shift and go to state 132


state 115

    (81) escritura -> WRITE pushPoper . LPAREN exp popIO lextra RPAREN
    (82) escritura -> WRITE pushPoper . LPAREN LETRERO letreroPush popIO lextra RPAREN

    LPAREN          shift and go to state 133


state 116

    (88) condicion -> IF LPAREN . exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> IF LPAREN . exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    exp                            shift and go to state 135
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 117

    (92) cond_w -> WHILE step1While . LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While

    LPAREN          shift and go to state 146


state 118

    (96) cond_f -> FOR asignacion . TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While

    TO              shift and go to state 147


state 119

    (20) idCall -> ID . idCallaux checkDim
    (21) idCall -> ID . idCallaux DOT ID
    (22) idCall -> ID . idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> ID . idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2
    (24) idCallaux -> .

    DOT             reduce using rule 24 (idCallaux -> .)
    LBRACK          reduce using rule 24 (idCallaux -> .)
    ASIGNA          reduce using rule 24 (idCallaux -> .)
    COMMA           reduce using rule 24 (idCallaux -> .)
    RPAREN          reduce using rule 24 (idCallaux -> .)

    idCallaux                      shift and go to state 104

state 120

    (47) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI . LBRACE listaEstatutos RBRACE endF definFunc

    LBRACE          shift and go to state 148


state 121

    (14) idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable RBRACK auxCTE .

    COMMA           reduce using rule 14 (idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable RBRACK auxCTE .)
    SCOLON          reduce using rule 14 (idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable RBRACK auxCTE .)


state 122

    (15) idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I . addCteTable auxCTE2 RBRACK
    (121) addCteTable -> .

    RBRACK          reduce using rule 121 (addCteTable -> .)

    addCteTable                    shift and go to state 149

state 123

    (39) declarMethods -> tipoMethod FUNC ID LPAREN . listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (41) listaParam -> . param
    (42) listaParam -> . param COMMA listaParam
    (43) listaParam -> . empty
    (44) param -> . tipo COLON ID
    (131) empty -> .
    (31) tipo -> . ID
    (32) tipo -> . INT
    (33) tipo -> . FLOAT
    (34) tipo -> . CHAR

    RPAREN          reduce using rule 131 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    listaParam                     shift and go to state 150
    param                          shift and go to state 59
    empty                          shift and go to state 60
    tipo                           shift and go to state 61

state 124

    (64) llamada -> ID DOT ID . LPAREN enviaParam RPAREN

    LPAREN          shift and go to state 151


state 125

    (65) llamada -> ID verExist LPAREN . enviaParam coherenceGo RPAREN
    (66) enviaParam -> . paramReferencia
    (67) enviaParam -> . empty
    (68) paramReferencia -> . exp paramType
    (69) paramReferencia -> . exp paramType COMMA paramCount paramReferencia
    (131) empty -> .
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    RPAREN          reduce using rule 131 (empty -> .)
    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    enviaParam                     shift and go to state 152
    paramReferencia                shift and go to state 153
    empty                          shift and go to state 154
    exp                            shift and go to state 155
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 126

    (20) idCall -> ID idCallaux checkDim .

    ASIGNA          reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    MULT            reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    DIV             reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    PLUS            reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    MINUS           reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    LT              reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    GT              reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    LTE             reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    GTE             reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    EQUALS          reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    NEQUALS         reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    AND             reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    OR              reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    RPAREN          reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    COMMA           reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    SCOLON          reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    TO              reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    DO              reduce using rule 20 (idCall -> ID idCallaux checkDim .)
    RBRACK          reduce using rule 20 (idCall -> ID idCallaux checkDim .)


state 127

    (21) idCall -> ID idCallaux DOT . ID

    ID              shift and go to state 156


state 128

    (22) idCall -> ID idCallaux LBRACK . addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> ID idCallaux LBRACK . addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2
    (128) addFF -> .

    LPAREN          reduce using rule 128 (addFF -> .)
    CTE_I           reduce using rule 128 (addFF -> .)
    CTE_F           reduce using rule 128 (addFF -> .)
    CTE_C           reduce using rule 128 (addFF -> .)
    ID              reduce using rule 128 (addFF -> .)

    addFF                          shift and go to state 157

state 129

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg . prueba
    (132) prueba -> .

    $end            reduce using rule 132 (prueba -> .)

    prueba                         shift and go to state 158

state 130

    (62) asignacion -> idCall ASIGNA pushPoper . exp asignStep2
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    idCall                         shift and go to state 145
    exp                            shift and go to state 159
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144

state 131

    (74) returnf -> RETURN pushPoper LPAREN . exp RPAREN popReturn
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    exp                            shift and go to state 160
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 132

    (76) lectura -> READ pushPoper LPAREN . listaId RPAREN
    (77) listaId -> . idCall popIO
    (78) listaId -> . idCall COMMA popIO insertOpRead listaId
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    ID              shift and go to state 119

    listaId                        shift and go to state 161
    idCall                         shift and go to state 162

state 133

    (81) escritura -> WRITE pushPoper LPAREN . exp popIO lextra RPAREN
    (82) escritura -> WRITE pushPoper LPAREN . LETRERO letreroPush popIO lextra RPAREN
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LETRERO         shift and go to state 164
    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    exp                            shift and go to state 163
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 134

    (115) f -> LPAREN . addFF exp RPAREN rmFF
    (128) addFF -> .

    LPAREN          reduce using rule 128 (addFF -> .)
    CTE_I           reduce using rule 128 (addFF -> .)
    CTE_F           reduce using rule 128 (addFF -> .)
    CTE_C           reduce using rule 128 (addFF -> .)
    ID              reduce using rule 128 (addFF -> .)

    addFF                          shift and go to state 165

state 135

    (88) condicion -> IF LPAREN exp . RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> IF LPAREN exp . RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    RPAREN          shift and go to state 166


state 136

    (98) exp -> texp . step7
    (99) exp -> texp . step7 OR pushPoper exp
    (127) step7 -> .

    OR              reduce using rule 127 (step7 -> .)
    RPAREN          reduce using rule 127 (step7 -> .)
    COMMA           reduce using rule 127 (step7 -> .)
    SCOLON          reduce using rule 127 (step7 -> .)
    TO              reduce using rule 127 (step7 -> .)
    DO              reduce using rule 127 (step7 -> .)
    RBRACK          reduce using rule 127 (step7 -> .)

    step7                          shift and go to state 167

state 137

    (100) texp -> gexp . step6
    (101) texp -> gexp . step6 AND pushPoper texp
    (126) step6 -> .

    AND             reduce using rule 126 (step6 -> .)
    OR              reduce using rule 126 (step6 -> .)
    RPAREN          reduce using rule 126 (step6 -> .)
    COMMA           reduce using rule 126 (step6 -> .)
    SCOLON          reduce using rule 126 (step6 -> .)
    TO              reduce using rule 126 (step6 -> .)
    DO              reduce using rule 126 (step6 -> .)
    RBRACK          reduce using rule 126 (step6 -> .)

    step6                          shift and go to state 168

state 138

    (102) gexp -> mexp . step5
    (103) gexp -> mexp . step5 LT pushPoper gexp
    (104) gexp -> mexp . step5 GT pushPoper gexp
    (105) gexp -> mexp . step5 LTE pushPoper gexp
    (106) gexp -> mexp . step5 GTE pushPoper gexp
    (107) gexp -> mexp . step5 EQUALS pushPoper gexp
    (108) gexp -> mexp . step5 NEQUALS pushPoper gexp
    (125) step5 -> .

    LT              reduce using rule 125 (step5 -> .)
    GT              reduce using rule 125 (step5 -> .)
    LTE             reduce using rule 125 (step5 -> .)
    GTE             reduce using rule 125 (step5 -> .)
    EQUALS          reduce using rule 125 (step5 -> .)
    NEQUALS         reduce using rule 125 (step5 -> .)
    AND             reduce using rule 125 (step5 -> .)
    OR              reduce using rule 125 (step5 -> .)
    RPAREN          reduce using rule 125 (step5 -> .)
    COMMA           reduce using rule 125 (step5 -> .)
    SCOLON          reduce using rule 125 (step5 -> .)
    TO              reduce using rule 125 (step5 -> .)
    DO              reduce using rule 125 (step5 -> .)
    RBRACK          reduce using rule 125 (step5 -> .)

    step5                          shift and go to state 169

state 139

    (109) mexp -> t . step4
    (110) mexp -> t . step4 PLUS pushPoper mexp
    (111) mexp -> t . step4 MINUS pushPoper mexp
    (124) step4 -> .

    PLUS            reduce using rule 124 (step4 -> .)
    MINUS           reduce using rule 124 (step4 -> .)
    LT              reduce using rule 124 (step4 -> .)
    GT              reduce using rule 124 (step4 -> .)
    LTE             reduce using rule 124 (step4 -> .)
    GTE             reduce using rule 124 (step4 -> .)
    EQUALS          reduce using rule 124 (step4 -> .)
    NEQUALS         reduce using rule 124 (step4 -> .)
    AND             reduce using rule 124 (step4 -> .)
    OR              reduce using rule 124 (step4 -> .)
    RPAREN          reduce using rule 124 (step4 -> .)
    COMMA           reduce using rule 124 (step4 -> .)
    SCOLON          reduce using rule 124 (step4 -> .)
    TO              reduce using rule 124 (step4 -> .)
    DO              reduce using rule 124 (step4 -> .)
    RBRACK          reduce using rule 124 (step4 -> .)

    step4                          shift and go to state 170

state 140

    (112) t -> f . step3
    (113) t -> f . step3 MULT pushPoper t
    (114) t -> f . step3 DIV pushPoper t
    (123) step3 -> .

    MULT            reduce using rule 123 (step3 -> .)
    DIV             reduce using rule 123 (step3 -> .)
    PLUS            reduce using rule 123 (step3 -> .)
    MINUS           reduce using rule 123 (step3 -> .)
    LT              reduce using rule 123 (step3 -> .)
    GT              reduce using rule 123 (step3 -> .)
    LTE             reduce using rule 123 (step3 -> .)
    GTE             reduce using rule 123 (step3 -> .)
    EQUALS          reduce using rule 123 (step3 -> .)
    NEQUALS         reduce using rule 123 (step3 -> .)
    AND             reduce using rule 123 (step3 -> .)
    OR              reduce using rule 123 (step3 -> .)
    RPAREN          reduce using rule 123 (step3 -> .)
    COMMA           reduce using rule 123 (step3 -> .)
    SCOLON          reduce using rule 123 (step3 -> .)
    TO              reduce using rule 123 (step3 -> .)
    DO              reduce using rule 123 (step3 -> .)
    RBRACK          reduce using rule 123 (step3 -> .)

    step3                          shift and go to state 171

state 141

    (116) f -> CTE_I . addCteTable step1
    (121) addCteTable -> .

    MULT            reduce using rule 121 (addCteTable -> .)
    DIV             reduce using rule 121 (addCteTable -> .)
    PLUS            reduce using rule 121 (addCteTable -> .)
    MINUS           reduce using rule 121 (addCteTable -> .)
    LT              reduce using rule 121 (addCteTable -> .)
    GT              reduce using rule 121 (addCteTable -> .)
    LTE             reduce using rule 121 (addCteTable -> .)
    GTE             reduce using rule 121 (addCteTable -> .)
    EQUALS          reduce using rule 121 (addCteTable -> .)
    NEQUALS         reduce using rule 121 (addCteTable -> .)
    AND             reduce using rule 121 (addCteTable -> .)
    OR              reduce using rule 121 (addCteTable -> .)
    RPAREN          reduce using rule 121 (addCteTable -> .)
    COMMA           reduce using rule 121 (addCteTable -> .)
    SCOLON          reduce using rule 121 (addCteTable -> .)
    TO              reduce using rule 121 (addCteTable -> .)
    DO              reduce using rule 121 (addCteTable -> .)
    RBRACK          reduce using rule 121 (addCteTable -> .)

    addCteTable                    shift and go to state 172

state 142

    (117) f -> CTE_F . addCteTable step1
    (121) addCteTable -> .

    MULT            reduce using rule 121 (addCteTable -> .)
    DIV             reduce using rule 121 (addCteTable -> .)
    PLUS            reduce using rule 121 (addCteTable -> .)
    MINUS           reduce using rule 121 (addCteTable -> .)
    LT              reduce using rule 121 (addCteTable -> .)
    GT              reduce using rule 121 (addCteTable -> .)
    LTE             reduce using rule 121 (addCteTable -> .)
    GTE             reduce using rule 121 (addCteTable -> .)
    EQUALS          reduce using rule 121 (addCteTable -> .)
    NEQUALS         reduce using rule 121 (addCteTable -> .)
    AND             reduce using rule 121 (addCteTable -> .)
    OR              reduce using rule 121 (addCteTable -> .)
    RPAREN          reduce using rule 121 (addCteTable -> .)
    COMMA           reduce using rule 121 (addCteTable -> .)
    SCOLON          reduce using rule 121 (addCteTable -> .)
    TO              reduce using rule 121 (addCteTable -> .)
    DO              reduce using rule 121 (addCteTable -> .)
    RBRACK          reduce using rule 121 (addCteTable -> .)

    addCteTable                    shift and go to state 173

state 143

    (118) f -> CTE_C . addCteTable step1
    (121) addCteTable -> .

    MULT            reduce using rule 121 (addCteTable -> .)
    DIV             reduce using rule 121 (addCteTable -> .)
    PLUS            reduce using rule 121 (addCteTable -> .)
    MINUS           reduce using rule 121 (addCteTable -> .)
    LT              reduce using rule 121 (addCteTable -> .)
    GT              reduce using rule 121 (addCteTable -> .)
    LTE             reduce using rule 121 (addCteTable -> .)
    GTE             reduce using rule 121 (addCteTable -> .)
    EQUALS          reduce using rule 121 (addCteTable -> .)
    NEQUALS         reduce using rule 121 (addCteTable -> .)
    AND             reduce using rule 121 (addCteTable -> .)
    OR              reduce using rule 121 (addCteTable -> .)
    RPAREN          reduce using rule 121 (addCteTable -> .)
    COMMA           reduce using rule 121 (addCteTable -> .)
    SCOLON          reduce using rule 121 (addCteTable -> .)
    TO              reduce using rule 121 (addCteTable -> .)
    DO              reduce using rule 121 (addCteTable -> .)
    RBRACK          reduce using rule 121 (addCteTable -> .)

    addCteTable                    shift and go to state 174

state 144

    (119) f -> llamada .

    MULT            reduce using rule 119 (f -> llamada .)
    DIV             reduce using rule 119 (f -> llamada .)
    PLUS            reduce using rule 119 (f -> llamada .)
    MINUS           reduce using rule 119 (f -> llamada .)
    LT              reduce using rule 119 (f -> llamada .)
    GT              reduce using rule 119 (f -> llamada .)
    LTE             reduce using rule 119 (f -> llamada .)
    GTE             reduce using rule 119 (f -> llamada .)
    EQUALS          reduce using rule 119 (f -> llamada .)
    NEQUALS         reduce using rule 119 (f -> llamada .)
    AND             reduce using rule 119 (f -> llamada .)
    OR              reduce using rule 119 (f -> llamada .)
    RPAREN          reduce using rule 119 (f -> llamada .)
    COMMA           reduce using rule 119 (f -> llamada .)
    SCOLON          reduce using rule 119 (f -> llamada .)
    TO              reduce using rule 119 (f -> llamada .)
    DO              reduce using rule 119 (f -> llamada .)
    RBRACK          reduce using rule 119 (f -> llamada .)


state 145

    (120) f -> idCall .

    MULT            reduce using rule 120 (f -> idCall .)
    DIV             reduce using rule 120 (f -> idCall .)
    PLUS            reduce using rule 120 (f -> idCall .)
    MINUS           reduce using rule 120 (f -> idCall .)
    LT              reduce using rule 120 (f -> idCall .)
    GT              reduce using rule 120 (f -> idCall .)
    LTE             reduce using rule 120 (f -> idCall .)
    GTE             reduce using rule 120 (f -> idCall .)
    EQUALS          reduce using rule 120 (f -> idCall .)
    NEQUALS         reduce using rule 120 (f -> idCall .)
    AND             reduce using rule 120 (f -> idCall .)
    OR              reduce using rule 120 (f -> idCall .)
    RPAREN          reduce using rule 120 (f -> idCall .)
    COMMA           reduce using rule 120 (f -> idCall .)
    SCOLON          reduce using rule 120 (f -> idCall .)
    TO              reduce using rule 120 (f -> idCall .)
    DO              reduce using rule 120 (f -> idCall .)
    RBRACK          reduce using rule 120 (f -> idCall .)


state 146

    (92) cond_w -> WHILE step1While LPAREN . exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    exp                            shift and go to state 175
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 147

    (96) cond_f -> FOR asignacion TO . exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    exp                            shift and go to state 176
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 148

    (47) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE . listaEstatutos RBRACE endF definFunc
    (52) listaEstatutos -> . estatutos listaEstatutos
    (53) listaEstatutos -> . empty
    (54) estatutos -> . llamada SCOLON
    (55) estatutos -> . asignacion SCOLON
    (56) estatutos -> . returnf SCOLON
    (57) estatutos -> . lectura SCOLON
    (58) estatutos -> . escritura SCOLON
    (59) estatutos -> . condicion
    (60) estatutos -> . cond_w
    (61) estatutos -> . cond_f
    (131) empty -> .
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (62) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (74) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (76) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (81) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (82) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (88) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (92) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (96) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    RBRACE          reduce using rule 131 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 177
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 149

    (15) idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable . auxCTE2 RBRACK
    (19) auxCTE2 -> .

    RBRACK          reduce using rule 19 (auxCTE2 -> .)

    auxCTE2                        shift and go to state 178

state 150

    (39) declarMethods -> tipoMethod FUNC ID LPAREN listaParam . RPAREN LBRACE listaEstatutos RBRACE declarMethods

    RPAREN          shift and go to state 179


state 151

    (64) llamada -> ID DOT ID LPAREN . enviaParam RPAREN
    (66) enviaParam -> . paramReferencia
    (67) enviaParam -> . empty
    (68) paramReferencia -> . exp paramType
    (69) paramReferencia -> . exp paramType COMMA paramCount paramReferencia
    (131) empty -> .
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    RPAREN          reduce using rule 131 (empty -> .)
    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    enviaParam                     shift and go to state 180
    paramReferencia                shift and go to state 153
    empty                          shift and go to state 154
    exp                            shift and go to state 155
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 152

    (65) llamada -> ID verExist LPAREN enviaParam . coherenceGo RPAREN
    (73) coherenceGo -> .

    RPAREN          reduce using rule 73 (coherenceGo -> .)

    coherenceGo                    shift and go to state 181

state 153

    (66) enviaParam -> paramReferencia .

    RPAREN          reduce using rule 66 (enviaParam -> paramReferencia .)


state 154

    (67) enviaParam -> empty .

    RPAREN          reduce using rule 67 (enviaParam -> empty .)


state 155

    (68) paramReferencia -> exp . paramType
    (69) paramReferencia -> exp . paramType COMMA paramCount paramReferencia
    (71) paramType -> .

    COMMA           reduce using rule 71 (paramType -> .)
    RPAREN          reduce using rule 71 (paramType -> .)

    paramType                      shift and go to state 182

state 156

    (21) idCall -> ID idCallaux DOT ID .

    ASIGNA          reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    MULT            reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    DIV             reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    PLUS            reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    MINUS           reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    LT              reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    GT              reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    LTE             reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    GTE             reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    EQUALS          reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    NEQUALS         reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    AND             reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    OR              reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    RPAREN          reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    COMMA           reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    SCOLON          reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    TO              reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    DO              reduce using rule 21 (idCall -> ID idCallaux DOT ID .)
    RBRACK          reduce using rule 21 (idCall -> ID idCallaux DOT ID .)


state 157

    (22) idCall -> ID idCallaux LBRACK addFF . exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> ID idCallaux LBRACK addFF . exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    exp                            shift and go to state 183
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 158

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba .

    $end            reduce using rule 1 (program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba .)


state 159

    (62) asignacion -> idCall ASIGNA pushPoper exp . asignStep2
    (63) asignStep2 -> .

    SCOLON          reduce using rule 63 (asignStep2 -> .)
    TO              reduce using rule 63 (asignStep2 -> .)

    asignStep2                     shift and go to state 184

state 160

    (74) returnf -> RETURN pushPoper LPAREN exp . RPAREN popReturn

    RPAREN          shift and go to state 185


state 161

    (76) lectura -> READ pushPoper LPAREN listaId . RPAREN

    RPAREN          shift and go to state 186


state 162

    (77) listaId -> idCall . popIO
    (78) listaId -> idCall . COMMA popIO insertOpRead listaId
    (80) popIO -> .

    COMMA           shift and go to state 188
    RPAREN          reduce using rule 80 (popIO -> .)

    popIO                          shift and go to state 187

state 163

    (81) escritura -> WRITE pushPoper LPAREN exp . popIO lextra RPAREN
    (80) popIO -> .

    COMMA           reduce using rule 80 (popIO -> .)
    RPAREN          reduce using rule 80 (popIO -> .)

    popIO                          shift and go to state 189

state 164

    (82) escritura -> WRITE pushPoper LPAREN LETRERO . letreroPush popIO lextra RPAREN
    (87) letreroPush -> .

    COMMA           reduce using rule 87 (letreroPush -> .)
    RPAREN          reduce using rule 87 (letreroPush -> .)

    letreroPush                    shift and go to state 190

state 165

    (115) f -> LPAREN addFF . exp RPAREN rmFF
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    exp                            shift and go to state 191
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 166

    (88) condicion -> IF LPAREN exp RPAREN . cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> IF LPAREN exp RPAREN . cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (90) cond1 -> .

    THEN            reduce using rule 90 (cond1 -> .)

    cond1                          shift and go to state 192

state 167

    (98) exp -> texp step7 .
    (99) exp -> texp step7 . OR pushPoper exp

    RPAREN          reduce using rule 98 (exp -> texp step7 .)
    COMMA           reduce using rule 98 (exp -> texp step7 .)
    SCOLON          reduce using rule 98 (exp -> texp step7 .)
    TO              reduce using rule 98 (exp -> texp step7 .)
    DO              reduce using rule 98 (exp -> texp step7 .)
    RBRACK          reduce using rule 98 (exp -> texp step7 .)
    OR              shift and go to state 193


state 168

    (100) texp -> gexp step6 .
    (101) texp -> gexp step6 . AND pushPoper texp

    OR              reduce using rule 100 (texp -> gexp step6 .)
    RPAREN          reduce using rule 100 (texp -> gexp step6 .)
    COMMA           reduce using rule 100 (texp -> gexp step6 .)
    SCOLON          reduce using rule 100 (texp -> gexp step6 .)
    TO              reduce using rule 100 (texp -> gexp step6 .)
    DO              reduce using rule 100 (texp -> gexp step6 .)
    RBRACK          reduce using rule 100 (texp -> gexp step6 .)
    AND             shift and go to state 194


state 169

    (102) gexp -> mexp step5 .
    (103) gexp -> mexp step5 . LT pushPoper gexp
    (104) gexp -> mexp step5 . GT pushPoper gexp
    (105) gexp -> mexp step5 . LTE pushPoper gexp
    (106) gexp -> mexp step5 . GTE pushPoper gexp
    (107) gexp -> mexp step5 . EQUALS pushPoper gexp
    (108) gexp -> mexp step5 . NEQUALS pushPoper gexp

    AND             reduce using rule 102 (gexp -> mexp step5 .)
    OR              reduce using rule 102 (gexp -> mexp step5 .)
    RPAREN          reduce using rule 102 (gexp -> mexp step5 .)
    COMMA           reduce using rule 102 (gexp -> mexp step5 .)
    SCOLON          reduce using rule 102 (gexp -> mexp step5 .)
    TO              reduce using rule 102 (gexp -> mexp step5 .)
    DO              reduce using rule 102 (gexp -> mexp step5 .)
    RBRACK          reduce using rule 102 (gexp -> mexp step5 .)
    LT              shift and go to state 195
    GT              shift and go to state 196
    LTE             shift and go to state 197
    GTE             shift and go to state 198
    EQUALS          shift and go to state 199
    NEQUALS         shift and go to state 200


state 170

    (109) mexp -> t step4 .
    (110) mexp -> t step4 . PLUS pushPoper mexp
    (111) mexp -> t step4 . MINUS pushPoper mexp

    LT              reduce using rule 109 (mexp -> t step4 .)
    GT              reduce using rule 109 (mexp -> t step4 .)
    LTE             reduce using rule 109 (mexp -> t step4 .)
    GTE             reduce using rule 109 (mexp -> t step4 .)
    EQUALS          reduce using rule 109 (mexp -> t step4 .)
    NEQUALS         reduce using rule 109 (mexp -> t step4 .)
    AND             reduce using rule 109 (mexp -> t step4 .)
    OR              reduce using rule 109 (mexp -> t step4 .)
    RPAREN          reduce using rule 109 (mexp -> t step4 .)
    COMMA           reduce using rule 109 (mexp -> t step4 .)
    SCOLON          reduce using rule 109 (mexp -> t step4 .)
    TO              reduce using rule 109 (mexp -> t step4 .)
    DO              reduce using rule 109 (mexp -> t step4 .)
    RBRACK          reduce using rule 109 (mexp -> t step4 .)
    PLUS            shift and go to state 201
    MINUS           shift and go to state 202


state 171

    (112) t -> f step3 .
    (113) t -> f step3 . MULT pushPoper t
    (114) t -> f step3 . DIV pushPoper t

    PLUS            reduce using rule 112 (t -> f step3 .)
    MINUS           reduce using rule 112 (t -> f step3 .)
    LT              reduce using rule 112 (t -> f step3 .)
    GT              reduce using rule 112 (t -> f step3 .)
    LTE             reduce using rule 112 (t -> f step3 .)
    GTE             reduce using rule 112 (t -> f step3 .)
    EQUALS          reduce using rule 112 (t -> f step3 .)
    NEQUALS         reduce using rule 112 (t -> f step3 .)
    AND             reduce using rule 112 (t -> f step3 .)
    OR              reduce using rule 112 (t -> f step3 .)
    RPAREN          reduce using rule 112 (t -> f step3 .)
    COMMA           reduce using rule 112 (t -> f step3 .)
    SCOLON          reduce using rule 112 (t -> f step3 .)
    TO              reduce using rule 112 (t -> f step3 .)
    DO              reduce using rule 112 (t -> f step3 .)
    RBRACK          reduce using rule 112 (t -> f step3 .)
    MULT            shift and go to state 203
    DIV             shift and go to state 204


state 172

    (116) f -> CTE_I addCteTable . step1
    (122) step1 -> .

    MULT            reduce using rule 122 (step1 -> .)
    DIV             reduce using rule 122 (step1 -> .)
    PLUS            reduce using rule 122 (step1 -> .)
    MINUS           reduce using rule 122 (step1 -> .)
    LT              reduce using rule 122 (step1 -> .)
    GT              reduce using rule 122 (step1 -> .)
    LTE             reduce using rule 122 (step1 -> .)
    GTE             reduce using rule 122 (step1 -> .)
    EQUALS          reduce using rule 122 (step1 -> .)
    NEQUALS         reduce using rule 122 (step1 -> .)
    AND             reduce using rule 122 (step1 -> .)
    OR              reduce using rule 122 (step1 -> .)
    RPAREN          reduce using rule 122 (step1 -> .)
    COMMA           reduce using rule 122 (step1 -> .)
    SCOLON          reduce using rule 122 (step1 -> .)
    TO              reduce using rule 122 (step1 -> .)
    DO              reduce using rule 122 (step1 -> .)
    RBRACK          reduce using rule 122 (step1 -> .)

    step1                          shift and go to state 205

state 173

    (117) f -> CTE_F addCteTable . step1
    (122) step1 -> .

    MULT            reduce using rule 122 (step1 -> .)
    DIV             reduce using rule 122 (step1 -> .)
    PLUS            reduce using rule 122 (step1 -> .)
    MINUS           reduce using rule 122 (step1 -> .)
    LT              reduce using rule 122 (step1 -> .)
    GT              reduce using rule 122 (step1 -> .)
    LTE             reduce using rule 122 (step1 -> .)
    GTE             reduce using rule 122 (step1 -> .)
    EQUALS          reduce using rule 122 (step1 -> .)
    NEQUALS         reduce using rule 122 (step1 -> .)
    AND             reduce using rule 122 (step1 -> .)
    OR              reduce using rule 122 (step1 -> .)
    RPAREN          reduce using rule 122 (step1 -> .)
    COMMA           reduce using rule 122 (step1 -> .)
    SCOLON          reduce using rule 122 (step1 -> .)
    TO              reduce using rule 122 (step1 -> .)
    DO              reduce using rule 122 (step1 -> .)
    RBRACK          reduce using rule 122 (step1 -> .)

    step1                          shift and go to state 206

state 174

    (118) f -> CTE_C addCteTable . step1
    (122) step1 -> .

    MULT            reduce using rule 122 (step1 -> .)
    DIV             reduce using rule 122 (step1 -> .)
    PLUS            reduce using rule 122 (step1 -> .)
    MINUS           reduce using rule 122 (step1 -> .)
    LT              reduce using rule 122 (step1 -> .)
    GT              reduce using rule 122 (step1 -> .)
    LTE             reduce using rule 122 (step1 -> .)
    GTE             reduce using rule 122 (step1 -> .)
    EQUALS          reduce using rule 122 (step1 -> .)
    NEQUALS         reduce using rule 122 (step1 -> .)
    AND             reduce using rule 122 (step1 -> .)
    OR              reduce using rule 122 (step1 -> .)
    RPAREN          reduce using rule 122 (step1 -> .)
    COMMA           reduce using rule 122 (step1 -> .)
    SCOLON          reduce using rule 122 (step1 -> .)
    TO              reduce using rule 122 (step1 -> .)
    DO              reduce using rule 122 (step1 -> .)
    RBRACK          reduce using rule 122 (step1 -> .)

    step1                          shift and go to state 207

state 175

    (92) cond_w -> WHILE step1While LPAREN exp . RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While

    RPAREN          shift and go to state 208


state 176

    (96) cond_f -> FOR asignacion TO exp . step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (93) step1While -> .

    DO              reduce using rule 93 (step1While -> .)

    step1While                     shift and go to state 209

state 177

    (47) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos . RBRACE endF definFunc

    RBRACE          shift and go to state 210


state 178

    (15) idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 . RBRACK

    RBRACK          shift and go to state 211


state 179

    (39) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN . LBRACE listaEstatutos RBRACE declarMethods

    LBRACE          shift and go to state 212


state 180

    (64) llamada -> ID DOT ID LPAREN enviaParam . RPAREN

    RPAREN          shift and go to state 213


state 181

    (65) llamada -> ID verExist LPAREN enviaParam coherenceGo . RPAREN

    RPAREN          shift and go to state 214


state 182

    (68) paramReferencia -> exp paramType .
    (69) paramReferencia -> exp paramType . COMMA paramCount paramReferencia

    RPAREN          reduce using rule 68 (paramReferencia -> exp paramType .)
    COMMA           shift and go to state 215


state 183

    (22) idCall -> ID idCallaux LBRACK addFF exp . RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> ID idCallaux LBRACK addFF exp . idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2
    (25) idCallaux2 -> .

    RBRACK          shift and go to state 216
    COMMA           reduce using rule 25 (idCallaux2 -> .)

    idCallaux2                     shift and go to state 217

state 184

    (62) asignacion -> idCall ASIGNA pushPoper exp asignStep2 .

    SCOLON          reduce using rule 62 (asignacion -> idCall ASIGNA pushPoper exp asignStep2 .)
    TO              reduce using rule 62 (asignacion -> idCall ASIGNA pushPoper exp asignStep2 .)


state 185

    (74) returnf -> RETURN pushPoper LPAREN exp RPAREN . popReturn
    (75) popReturn -> .

    SCOLON          reduce using rule 75 (popReturn -> .)

    popReturn                      shift and go to state 218

state 186

    (76) lectura -> READ pushPoper LPAREN listaId RPAREN .

    SCOLON          reduce using rule 76 (lectura -> READ pushPoper LPAREN listaId RPAREN .)


state 187

    (77) listaId -> idCall popIO .

    RPAREN          reduce using rule 77 (listaId -> idCall popIO .)


state 188

    (78) listaId -> idCall COMMA . popIO insertOpRead listaId
    (80) popIO -> .

    ID              reduce using rule 80 (popIO -> .)

    popIO                          shift and go to state 219

state 189

    (81) escritura -> WRITE pushPoper LPAREN exp popIO . lextra RPAREN
    (83) lextra -> . COMMA insertOpWrite exp popIO lextra
    (84) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (85) lextra -> . empty
    (131) empty -> .

    COMMA           shift and go to state 221
    RPAREN          reduce using rule 131 (empty -> .)

    lextra                         shift and go to state 220
    empty                          shift and go to state 222

state 190

    (82) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush . popIO lextra RPAREN
    (80) popIO -> .

    COMMA           reduce using rule 80 (popIO -> .)
    RPAREN          reduce using rule 80 (popIO -> .)

    popIO                          shift and go to state 223

state 191

    (115) f -> LPAREN addFF exp . RPAREN rmFF

    RPAREN          shift and go to state 224


state 192

    (88) condicion -> IF LPAREN exp RPAREN cond1 . THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> IF LPAREN exp RPAREN cond1 . THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    THEN            shift and go to state 225


state 193

    (99) exp -> texp step7 OR . pushPoper exp
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 226

state 194

    (101) texp -> gexp step6 AND . pushPoper texp
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 227

state 195

    (103) gexp -> mexp step5 LT . pushPoper gexp
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 228

state 196

    (104) gexp -> mexp step5 GT . pushPoper gexp
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 229

state 197

    (105) gexp -> mexp step5 LTE . pushPoper gexp
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 230

state 198

    (106) gexp -> mexp step5 GTE . pushPoper gexp
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 231

state 199

    (107) gexp -> mexp step5 EQUALS . pushPoper gexp
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 232

state 200

    (108) gexp -> mexp step5 NEQUALS . pushPoper gexp
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 233

state 201

    (110) mexp -> t step4 PLUS . pushPoper mexp
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 234

state 202

    (111) mexp -> t step4 MINUS . pushPoper mexp
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 235

state 203

    (113) t -> f step3 MULT . pushPoper t
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 236

state 204

    (114) t -> f step3 DIV . pushPoper t
    (130) pushPoper -> .

    LPAREN          reduce using rule 130 (pushPoper -> .)
    CTE_I           reduce using rule 130 (pushPoper -> .)
    CTE_F           reduce using rule 130 (pushPoper -> .)
    CTE_C           reduce using rule 130 (pushPoper -> .)
    ID              reduce using rule 130 (pushPoper -> .)

    pushPoper                      shift and go to state 237

state 205

    (116) f -> CTE_I addCteTable step1 .

    MULT            reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    DIV             reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    PLUS            reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    MINUS           reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    LT              reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    GT              reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    LTE             reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    GTE             reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    EQUALS          reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    NEQUALS         reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    AND             reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    OR              reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    RPAREN          reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    COMMA           reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    SCOLON          reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    TO              reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    DO              reduce using rule 116 (f -> CTE_I addCteTable step1 .)
    RBRACK          reduce using rule 116 (f -> CTE_I addCteTable step1 .)


state 206

    (117) f -> CTE_F addCteTable step1 .

    MULT            reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    DIV             reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    PLUS            reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    MINUS           reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    LT              reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    GT              reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    LTE             reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    GTE             reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    EQUALS          reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    NEQUALS         reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    AND             reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    OR              reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    RPAREN          reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    COMMA           reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    SCOLON          reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    TO              reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    DO              reduce using rule 117 (f -> CTE_F addCteTable step1 .)
    RBRACK          reduce using rule 117 (f -> CTE_F addCteTable step1 .)


state 207

    (118) f -> CTE_C addCteTable step1 .

    MULT            reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    DIV             reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    PLUS            reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    MINUS           reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    LT              reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    GT              reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    LTE             reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    GTE             reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    EQUALS          reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    NEQUALS         reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    AND             reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    OR              reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    RPAREN          reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    COMMA           reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    SCOLON          reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    TO              reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    DO              reduce using rule 118 (f -> CTE_C addCteTable step1 .)
    RBRACK          reduce using rule 118 (f -> CTE_C addCteTable step1 .)


state 208

    (92) cond_w -> WHILE step1While LPAREN exp RPAREN . step2While DO LBRACE listaEstatutos RBRACE step3While
    (94) step2While -> .

    DO              reduce using rule 94 (step2While -> .)

    step2While                     shift and go to state 238

state 209

    (96) cond_f -> FOR asignacion TO exp step1While . step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (97) step1For -> .

    DO              reduce using rule 97 (step1For -> .)

    step1For                       shift and go to state 239

state 210

    (47) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE . endF definFunc
    (51) endF -> .

    VOID            reduce using rule 51 (endF -> .)
    INT             reduce using rule 51 (endF -> .)
    FLOAT           reduce using rule 51 (endF -> .)
    CHAR            reduce using rule 51 (endF -> .)
    MAIN            reduce using rule 51 (endF -> .)

    endF                           shift and go to state 240

state 211

    (15) idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK .

    COMMA           reduce using rule 15 (idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK .)
    SCOLON          reduce using rule 15 (idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK .)


state 212

    (39) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE . listaEstatutos RBRACE declarMethods
    (52) listaEstatutos -> . estatutos listaEstatutos
    (53) listaEstatutos -> . empty
    (54) estatutos -> . llamada SCOLON
    (55) estatutos -> . asignacion SCOLON
    (56) estatutos -> . returnf SCOLON
    (57) estatutos -> . lectura SCOLON
    (58) estatutos -> . escritura SCOLON
    (59) estatutos -> . condicion
    (60) estatutos -> . cond_w
    (61) estatutos -> . cond_f
    (131) empty -> .
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (62) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (74) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (76) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (81) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (82) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (88) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (92) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (96) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    RBRACE          reduce using rule 131 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 241
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 213

    (64) llamada -> ID DOT ID LPAREN enviaParam RPAREN .

    SCOLON          reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    MULT            reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    DIV             reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    PLUS            reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    MINUS           reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    LT              reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    GT              reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    LTE             reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    GTE             reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    EQUALS          reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    NEQUALS         reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    AND             reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    OR              reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    RPAREN          reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    COMMA           reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    TO              reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    DO              reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    RBRACK          reduce using rule 64 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)


state 214

    (65) llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .

    SCOLON          reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    MULT            reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    DIV             reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    PLUS            reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    MINUS           reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    LT              reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    GT              reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    LTE             reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    GTE             reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    EQUALS          reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    NEQUALS         reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    AND             reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    OR              reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    RPAREN          reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    COMMA           reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    TO              reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    DO              reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    RBRACK          reduce using rule 65 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)


state 215

    (69) paramReferencia -> exp paramType COMMA . paramCount paramReferencia
    (72) paramCount -> .

    LPAREN          reduce using rule 72 (paramCount -> .)
    CTE_I           reduce using rule 72 (paramCount -> .)
    CTE_F           reduce using rule 72 (paramCount -> .)
    CTE_C           reduce using rule 72 (paramCount -> .)
    ID              reduce using rule 72 (paramCount -> .)

    paramCount                     shift and go to state 242

state 216

    (22) idCall -> ID idCallaux LBRACK addFF exp RBRACK . rmFF idCallaux4 checkDim1
    (129) rmFF -> .

    ASIGNA          reduce using rule 129 (rmFF -> .)
    MULT            reduce using rule 129 (rmFF -> .)
    DIV             reduce using rule 129 (rmFF -> .)
    PLUS            reduce using rule 129 (rmFF -> .)
    MINUS           reduce using rule 129 (rmFF -> .)
    LT              reduce using rule 129 (rmFF -> .)
    GT              reduce using rule 129 (rmFF -> .)
    LTE             reduce using rule 129 (rmFF -> .)
    GTE             reduce using rule 129 (rmFF -> .)
    EQUALS          reduce using rule 129 (rmFF -> .)
    NEQUALS         reduce using rule 129 (rmFF -> .)
    AND             reduce using rule 129 (rmFF -> .)
    OR              reduce using rule 129 (rmFF -> .)
    RPAREN          reduce using rule 129 (rmFF -> .)
    COMMA           reduce using rule 129 (rmFF -> .)
    SCOLON          reduce using rule 129 (rmFF -> .)
    TO              reduce using rule 129 (rmFF -> .)
    DO              reduce using rule 129 (rmFF -> .)
    RBRACK          reduce using rule 129 (rmFF -> .)

    rmFF                           shift and go to state 243

state 217

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 . rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2
    (129) rmFF -> .

    COMMA           reduce using rule 129 (rmFF -> .)

    rmFF                           shift and go to state 244

state 218

    (74) returnf -> RETURN pushPoper LPAREN exp RPAREN popReturn .

    SCOLON          reduce using rule 74 (returnf -> RETURN pushPoper LPAREN exp RPAREN popReturn .)


state 219

    (78) listaId -> idCall COMMA popIO . insertOpRead listaId
    (79) insertOpRead -> .

    ID              reduce using rule 79 (insertOpRead -> .)

    insertOpRead                   shift and go to state 245

state 220

    (81) escritura -> WRITE pushPoper LPAREN exp popIO lextra . RPAREN

    RPAREN          shift and go to state 246


state 221

    (83) lextra -> COMMA . insertOpWrite exp popIO lextra
    (84) lextra -> COMMA . insertOpWrite LETRERO letreroPush popIO lextra
    (86) insertOpWrite -> .

    LETRERO         reduce using rule 86 (insertOpWrite -> .)
    LPAREN          reduce using rule 86 (insertOpWrite -> .)
    CTE_I           reduce using rule 86 (insertOpWrite -> .)
    CTE_F           reduce using rule 86 (insertOpWrite -> .)
    CTE_C           reduce using rule 86 (insertOpWrite -> .)
    ID              reduce using rule 86 (insertOpWrite -> .)

    insertOpWrite                  shift and go to state 247

state 222

    (85) lextra -> empty .

    RPAREN          reduce using rule 85 (lextra -> empty .)


state 223

    (82) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO . lextra RPAREN
    (83) lextra -> . COMMA insertOpWrite exp popIO lextra
    (84) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (85) lextra -> . empty
    (131) empty -> .

    COMMA           shift and go to state 221
    RPAREN          reduce using rule 131 (empty -> .)

    lextra                         shift and go to state 248
    empty                          shift and go to state 222

state 224

    (115) f -> LPAREN addFF exp RPAREN . rmFF
    (129) rmFF -> .

    MULT            reduce using rule 129 (rmFF -> .)
    DIV             reduce using rule 129 (rmFF -> .)
    PLUS            reduce using rule 129 (rmFF -> .)
    MINUS           reduce using rule 129 (rmFF -> .)
    LT              reduce using rule 129 (rmFF -> .)
    GT              reduce using rule 129 (rmFF -> .)
    LTE             reduce using rule 129 (rmFF -> .)
    GTE             reduce using rule 129 (rmFF -> .)
    EQUALS          reduce using rule 129 (rmFF -> .)
    NEQUALS         reduce using rule 129 (rmFF -> .)
    AND             reduce using rule 129 (rmFF -> .)
    OR              reduce using rule 129 (rmFF -> .)
    RPAREN          reduce using rule 129 (rmFF -> .)
    COMMA           reduce using rule 129 (rmFF -> .)
    SCOLON          reduce using rule 129 (rmFF -> .)
    TO              reduce using rule 129 (rmFF -> .)
    DO              reduce using rule 129 (rmFF -> .)
    RBRACK          reduce using rule 129 (rmFF -> .)

    rmFF                           shift and go to state 249

state 225

    (88) condicion -> IF LPAREN exp RPAREN cond1 THEN . LBRACE listaEstatutos RBRACE
    (89) condicion -> IF LPAREN exp RPAREN cond1 THEN . LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 250


state 226

    (99) exp -> texp step7 OR pushPoper . exp
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    texp                           shift and go to state 136
    exp                            shift and go to state 251
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 227

    (101) texp -> gexp step6 AND pushPoper . texp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    gexp                           shift and go to state 137
    texp                           shift and go to state 252
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 228

    (103) gexp -> mexp step5 LT pushPoper . gexp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    mexp                           shift and go to state 138
    gexp                           shift and go to state 253
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 229

    (104) gexp -> mexp step5 GT pushPoper . gexp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    mexp                           shift and go to state 138
    gexp                           shift and go to state 254
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 230

    (105) gexp -> mexp step5 LTE pushPoper . gexp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    mexp                           shift and go to state 138
    gexp                           shift and go to state 255
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 231

    (106) gexp -> mexp step5 GTE pushPoper . gexp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    mexp                           shift and go to state 138
    gexp                           shift and go to state 256
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 232

    (107) gexp -> mexp step5 EQUALS pushPoper . gexp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    mexp                           shift and go to state 138
    gexp                           shift and go to state 257
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 233

    (108) gexp -> mexp step5 NEQUALS pushPoper . gexp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    mexp                           shift and go to state 138
    gexp                           shift and go to state 258
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 234

    (110) mexp -> t step4 PLUS pushPoper . mexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    t                              shift and go to state 139
    mexp                           shift and go to state 259
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 235

    (111) mexp -> t step4 MINUS pushPoper . mexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    t                              shift and go to state 139
    mexp                           shift and go to state 260
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 236

    (113) t -> f step3 MULT pushPoper . t
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    f                              shift and go to state 140
    t                              shift and go to state 261
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 237

    (114) t -> f step3 DIV pushPoper . t
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    f                              shift and go to state 140
    t                              shift and go to state 262
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 238

    (92) cond_w -> WHILE step1While LPAREN exp RPAREN step2While . DO LBRACE listaEstatutos RBRACE step3While

    DO              shift and go to state 263


state 239

    (96) cond_f -> FOR asignacion TO exp step1While step1For . step2While DO LBRACE listaEstatutos RBRACE step3While
    (94) step2While -> .

    DO              reduce using rule 94 (step2While -> .)

    step2While                     shift and go to state 264

state 240

    (47) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF . definFunc
    (47) definFunc -> . tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (48) definFunc -> . empty
    (35) tipoMethod -> . VOID
    (36) tipoMethod -> . INT
    (37) tipoMethod -> . FLOAT
    (38) tipoMethod -> . CHAR
    (131) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    MAIN            reduce using rule 131 (empty -> .)

    tipoMethod                     shift and go to state 14
    definFunc                      shift and go to state 265
    empty                          shift and go to state 15

state 241

    (39) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos . RBRACE declarMethods

    RBRACE          shift and go to state 266


state 242

    (69) paramReferencia -> exp paramType COMMA paramCount . paramReferencia
    (68) paramReferencia -> . exp paramType
    (69) paramReferencia -> . exp paramType COMMA paramCount paramReferencia
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    exp                            shift and go to state 155
    paramReferencia                shift and go to state 267
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 243

    (22) idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF . idCallaux4 checkDim1
    (27) idCallaux4 -> .

    ASIGNA          reduce using rule 27 (idCallaux4 -> .)
    MULT            reduce using rule 27 (idCallaux4 -> .)
    DIV             reduce using rule 27 (idCallaux4 -> .)
    PLUS            reduce using rule 27 (idCallaux4 -> .)
    MINUS           reduce using rule 27 (idCallaux4 -> .)
    LT              reduce using rule 27 (idCallaux4 -> .)
    GT              reduce using rule 27 (idCallaux4 -> .)
    LTE             reduce using rule 27 (idCallaux4 -> .)
    GTE             reduce using rule 27 (idCallaux4 -> .)
    EQUALS          reduce using rule 27 (idCallaux4 -> .)
    NEQUALS         reduce using rule 27 (idCallaux4 -> .)
    AND             reduce using rule 27 (idCallaux4 -> .)
    OR              reduce using rule 27 (idCallaux4 -> .)
    RPAREN          reduce using rule 27 (idCallaux4 -> .)
    COMMA           reduce using rule 27 (idCallaux4 -> .)
    SCOLON          reduce using rule 27 (idCallaux4 -> .)
    TO              reduce using rule 27 (idCallaux4 -> .)
    DO              reduce using rule 27 (idCallaux4 -> .)
    RBRACK          reduce using rule 27 (idCallaux4 -> .)

    idCallaux4                     shift and go to state 268

state 244

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF . COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    COMMA           shift and go to state 269


state 245

    (78) listaId -> idCall COMMA popIO insertOpRead . listaId
    (77) listaId -> . idCall popIO
    (78) listaId -> . idCall COMMA popIO insertOpRead listaId
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    ID              shift and go to state 119

    idCall                         shift and go to state 162
    listaId                        shift and go to state 270

state 246

    (81) escritura -> WRITE pushPoper LPAREN exp popIO lextra RPAREN .

    SCOLON          reduce using rule 81 (escritura -> WRITE pushPoper LPAREN exp popIO lextra RPAREN .)


state 247

    (83) lextra -> COMMA insertOpWrite . exp popIO lextra
    (84) lextra -> COMMA insertOpWrite . LETRERO letreroPush popIO lextra
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LETRERO         shift and go to state 272
    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    exp                            shift and go to state 271
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 248

    (82) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra . RPAREN

    RPAREN          shift and go to state 273


state 249

    (115) f -> LPAREN addFF exp RPAREN rmFF .

    MULT            reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    DIV             reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    PLUS            reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    MINUS           reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    LT              reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    GT              reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    LTE             reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    GTE             reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    EQUALS          reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    NEQUALS         reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    AND             reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    OR              reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    RPAREN          reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    COMMA           reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    SCOLON          reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    TO              reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    DO              reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)
    RBRACK          reduce using rule 115 (f -> LPAREN addFF exp RPAREN rmFF .)


state 250

    (88) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE . listaEstatutos RBRACE
    (89) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE . listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (52) listaEstatutos -> . estatutos listaEstatutos
    (53) listaEstatutos -> . empty
    (54) estatutos -> . llamada SCOLON
    (55) estatutos -> . asignacion SCOLON
    (56) estatutos -> . returnf SCOLON
    (57) estatutos -> . lectura SCOLON
    (58) estatutos -> . escritura SCOLON
    (59) estatutos -> . condicion
    (60) estatutos -> . cond_w
    (61) estatutos -> . cond_f
    (131) empty -> .
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (62) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (74) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (76) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (81) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (82) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (88) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (92) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (96) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    RBRACE          reduce using rule 131 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 274
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 251

    (99) exp -> texp step7 OR pushPoper exp .

    RPAREN          reduce using rule 99 (exp -> texp step7 OR pushPoper exp .)
    COMMA           reduce using rule 99 (exp -> texp step7 OR pushPoper exp .)
    SCOLON          reduce using rule 99 (exp -> texp step7 OR pushPoper exp .)
    TO              reduce using rule 99 (exp -> texp step7 OR pushPoper exp .)
    DO              reduce using rule 99 (exp -> texp step7 OR pushPoper exp .)
    RBRACK          reduce using rule 99 (exp -> texp step7 OR pushPoper exp .)


state 252

    (101) texp -> gexp step6 AND pushPoper texp .

    OR              reduce using rule 101 (texp -> gexp step6 AND pushPoper texp .)
    RPAREN          reduce using rule 101 (texp -> gexp step6 AND pushPoper texp .)
    COMMA           reduce using rule 101 (texp -> gexp step6 AND pushPoper texp .)
    SCOLON          reduce using rule 101 (texp -> gexp step6 AND pushPoper texp .)
    TO              reduce using rule 101 (texp -> gexp step6 AND pushPoper texp .)
    DO              reduce using rule 101 (texp -> gexp step6 AND pushPoper texp .)
    RBRACK          reduce using rule 101 (texp -> gexp step6 AND pushPoper texp .)


state 253

    (103) gexp -> mexp step5 LT pushPoper gexp .

    AND             reduce using rule 103 (gexp -> mexp step5 LT pushPoper gexp .)
    OR              reduce using rule 103 (gexp -> mexp step5 LT pushPoper gexp .)
    RPAREN          reduce using rule 103 (gexp -> mexp step5 LT pushPoper gexp .)
    COMMA           reduce using rule 103 (gexp -> mexp step5 LT pushPoper gexp .)
    SCOLON          reduce using rule 103 (gexp -> mexp step5 LT pushPoper gexp .)
    TO              reduce using rule 103 (gexp -> mexp step5 LT pushPoper gexp .)
    DO              reduce using rule 103 (gexp -> mexp step5 LT pushPoper gexp .)
    RBRACK          reduce using rule 103 (gexp -> mexp step5 LT pushPoper gexp .)


state 254

    (104) gexp -> mexp step5 GT pushPoper gexp .

    AND             reduce using rule 104 (gexp -> mexp step5 GT pushPoper gexp .)
    OR              reduce using rule 104 (gexp -> mexp step5 GT pushPoper gexp .)
    RPAREN          reduce using rule 104 (gexp -> mexp step5 GT pushPoper gexp .)
    COMMA           reduce using rule 104 (gexp -> mexp step5 GT pushPoper gexp .)
    SCOLON          reduce using rule 104 (gexp -> mexp step5 GT pushPoper gexp .)
    TO              reduce using rule 104 (gexp -> mexp step5 GT pushPoper gexp .)
    DO              reduce using rule 104 (gexp -> mexp step5 GT pushPoper gexp .)
    RBRACK          reduce using rule 104 (gexp -> mexp step5 GT pushPoper gexp .)


state 255

    (105) gexp -> mexp step5 LTE pushPoper gexp .

    AND             reduce using rule 105 (gexp -> mexp step5 LTE pushPoper gexp .)
    OR              reduce using rule 105 (gexp -> mexp step5 LTE pushPoper gexp .)
    RPAREN          reduce using rule 105 (gexp -> mexp step5 LTE pushPoper gexp .)
    COMMA           reduce using rule 105 (gexp -> mexp step5 LTE pushPoper gexp .)
    SCOLON          reduce using rule 105 (gexp -> mexp step5 LTE pushPoper gexp .)
    TO              reduce using rule 105 (gexp -> mexp step5 LTE pushPoper gexp .)
    DO              reduce using rule 105 (gexp -> mexp step5 LTE pushPoper gexp .)
    RBRACK          reduce using rule 105 (gexp -> mexp step5 LTE pushPoper gexp .)


state 256

    (106) gexp -> mexp step5 GTE pushPoper gexp .

    AND             reduce using rule 106 (gexp -> mexp step5 GTE pushPoper gexp .)
    OR              reduce using rule 106 (gexp -> mexp step5 GTE pushPoper gexp .)
    RPAREN          reduce using rule 106 (gexp -> mexp step5 GTE pushPoper gexp .)
    COMMA           reduce using rule 106 (gexp -> mexp step5 GTE pushPoper gexp .)
    SCOLON          reduce using rule 106 (gexp -> mexp step5 GTE pushPoper gexp .)
    TO              reduce using rule 106 (gexp -> mexp step5 GTE pushPoper gexp .)
    DO              reduce using rule 106 (gexp -> mexp step5 GTE pushPoper gexp .)
    RBRACK          reduce using rule 106 (gexp -> mexp step5 GTE pushPoper gexp .)


state 257

    (107) gexp -> mexp step5 EQUALS pushPoper gexp .

    AND             reduce using rule 107 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    OR              reduce using rule 107 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    RPAREN          reduce using rule 107 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    COMMA           reduce using rule 107 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    SCOLON          reduce using rule 107 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    TO              reduce using rule 107 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    DO              reduce using rule 107 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    RBRACK          reduce using rule 107 (gexp -> mexp step5 EQUALS pushPoper gexp .)


state 258

    (108) gexp -> mexp step5 NEQUALS pushPoper gexp .

    AND             reduce using rule 108 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    OR              reduce using rule 108 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    RPAREN          reduce using rule 108 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    COMMA           reduce using rule 108 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    SCOLON          reduce using rule 108 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    TO              reduce using rule 108 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    DO              reduce using rule 108 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    RBRACK          reduce using rule 108 (gexp -> mexp step5 NEQUALS pushPoper gexp .)


state 259

    (110) mexp -> t step4 PLUS pushPoper mexp .

    LT              reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    GT              reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    LTE             reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    GTE             reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    EQUALS          reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    NEQUALS         reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    AND             reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    OR              reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    RPAREN          reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    COMMA           reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    SCOLON          reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    TO              reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    DO              reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)
    RBRACK          reduce using rule 110 (mexp -> t step4 PLUS pushPoper mexp .)


state 260

    (111) mexp -> t step4 MINUS pushPoper mexp .

    LT              reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    GT              reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    LTE             reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    GTE             reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    EQUALS          reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    NEQUALS         reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    AND             reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    OR              reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    RPAREN          reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    COMMA           reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    SCOLON          reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    TO              reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    DO              reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)
    RBRACK          reduce using rule 111 (mexp -> t step4 MINUS pushPoper mexp .)


state 261

    (113) t -> f step3 MULT pushPoper t .

    PLUS            reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    MINUS           reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    LT              reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    GT              reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    LTE             reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    GTE             reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    EQUALS          reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    NEQUALS         reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    AND             reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    OR              reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    RPAREN          reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    COMMA           reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    SCOLON          reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    TO              reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    DO              reduce using rule 113 (t -> f step3 MULT pushPoper t .)
    RBRACK          reduce using rule 113 (t -> f step3 MULT pushPoper t .)


state 262

    (114) t -> f step3 DIV pushPoper t .

    PLUS            reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    MINUS           reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    LT              reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    GT              reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    LTE             reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    GTE             reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    EQUALS          reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    NEQUALS         reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    AND             reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    OR              reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    RPAREN          reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    COMMA           reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    SCOLON          reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    TO              reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    DO              reduce using rule 114 (t -> f step3 DIV pushPoper t .)
    RBRACK          reduce using rule 114 (t -> f step3 DIV pushPoper t .)


state 263

    (92) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO . LBRACE listaEstatutos RBRACE step3While

    LBRACE          shift and go to state 275


state 264

    (96) cond_f -> FOR asignacion TO exp step1While step1For step2While . DO LBRACE listaEstatutos RBRACE step3While

    DO              shift and go to state 276


state 265

    (47) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc .

    MAIN            reduce using rule 47 (definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc .)


state 266

    (39) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE . declarMethods
    (39) declarMethods -> . tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (40) declarMethods -> . empty
    (35) tipoMethod -> . VOID
    (36) tipoMethod -> . INT
    (37) tipoMethod -> . FLOAT
    (38) tipoMethod -> . CHAR
    (131) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    RBRACE          reduce using rule 131 (empty -> .)

    tipoMethod                     shift and go to state 64
    declarMethods                  shift and go to state 277
    empty                          shift and go to state 65

state 267

    (69) paramReferencia -> exp paramType COMMA paramCount paramReferencia .

    RPAREN          reduce using rule 69 (paramReferencia -> exp paramType COMMA paramCount paramReferencia .)


state 268

    (22) idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 . checkDim1
    (29) checkDim1 -> .

    ASIGNA          reduce using rule 29 (checkDim1 -> .)
    MULT            reduce using rule 29 (checkDim1 -> .)
    DIV             reduce using rule 29 (checkDim1 -> .)
    PLUS            reduce using rule 29 (checkDim1 -> .)
    MINUS           reduce using rule 29 (checkDim1 -> .)
    LT              reduce using rule 29 (checkDim1 -> .)
    GT              reduce using rule 29 (checkDim1 -> .)
    LTE             reduce using rule 29 (checkDim1 -> .)
    GTE             reduce using rule 29 (checkDim1 -> .)
    EQUALS          reduce using rule 29 (checkDim1 -> .)
    NEQUALS         reduce using rule 29 (checkDim1 -> .)
    AND             reduce using rule 29 (checkDim1 -> .)
    OR              reduce using rule 29 (checkDim1 -> .)
    RPAREN          reduce using rule 29 (checkDim1 -> .)
    COMMA           reduce using rule 29 (checkDim1 -> .)
    SCOLON          reduce using rule 29 (checkDim1 -> .)
    TO              reduce using rule 29 (checkDim1 -> .)
    DO              reduce using rule 29 (checkDim1 -> .)
    RBRACK          reduce using rule 29 (checkDim1 -> .)

    checkDim1                      shift and go to state 278

state 269

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA . addFF exp idCallaux3 RBRACK rmFF checkDim2
    (128) addFF -> .

    LPAREN          reduce using rule 128 (addFF -> .)
    CTE_I           reduce using rule 128 (addFF -> .)
    CTE_F           reduce using rule 128 (addFF -> .)
    CTE_C           reduce using rule 128 (addFF -> .)
    ID              reduce using rule 128 (addFF -> .)

    addFF                          shift and go to state 279

state 270

    (78) listaId -> idCall COMMA popIO insertOpRead listaId .

    RPAREN          reduce using rule 78 (listaId -> idCall COMMA popIO insertOpRead listaId .)


state 271

    (83) lextra -> COMMA insertOpWrite exp . popIO lextra
    (80) popIO -> .

    COMMA           reduce using rule 80 (popIO -> .)
    RPAREN          reduce using rule 80 (popIO -> .)

    popIO                          shift and go to state 280

state 272

    (84) lextra -> COMMA insertOpWrite LETRERO . letreroPush popIO lextra
    (87) letreroPush -> .

    COMMA           reduce using rule 87 (letreroPush -> .)
    RPAREN          reduce using rule 87 (letreroPush -> .)

    letreroPush                    shift and go to state 281

state 273

    (82) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN .

    SCOLON          reduce using rule 82 (escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN .)


state 274

    (88) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos . RBRACE
    (89) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos . RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    RBRACE          shift and go to state 282


state 275

    (92) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE . listaEstatutos RBRACE step3While
    (52) listaEstatutos -> . estatutos listaEstatutos
    (53) listaEstatutos -> . empty
    (54) estatutos -> . llamada SCOLON
    (55) estatutos -> . asignacion SCOLON
    (56) estatutos -> . returnf SCOLON
    (57) estatutos -> . lectura SCOLON
    (58) estatutos -> . escritura SCOLON
    (59) estatutos -> . condicion
    (60) estatutos -> . cond_w
    (61) estatutos -> . cond_f
    (131) empty -> .
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (62) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (74) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (76) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (81) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (82) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (88) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (92) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (96) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    RBRACE          reduce using rule 131 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 283
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 276

    (96) cond_f -> FOR asignacion TO exp step1While step1For step2While DO . LBRACE listaEstatutos RBRACE step3While

    LBRACE          shift and go to state 284


state 277

    (39) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods .

    RBRACE          reduce using rule 39 (declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods .)


state 278

    (22) idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .

    ASIGNA          reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    MULT            reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    DIV             reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    PLUS            reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    MINUS           reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    LT              reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    GT              reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    LTE             reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    GTE             reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    EQUALS          reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    NEQUALS         reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    AND             reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    OR              reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    RPAREN          reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    COMMA           reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    SCOLON          reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    TO              reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    DO              reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)
    RBRACK          reduce using rule 22 (idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1 .)


state 279

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF . exp idCallaux3 RBRACK rmFF checkDim2
    (98) exp -> . texp step7
    (99) exp -> . texp step7 OR pushPoper exp
    (100) texp -> . gexp step6
    (101) texp -> . gexp step6 AND pushPoper texp
    (102) gexp -> . mexp step5
    (103) gexp -> . mexp step5 LT pushPoper gexp
    (104) gexp -> . mexp step5 GT pushPoper gexp
    (105) gexp -> . mexp step5 LTE pushPoper gexp
    (106) gexp -> . mexp step5 GTE pushPoper gexp
    (107) gexp -> . mexp step5 EQUALS pushPoper gexp
    (108) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (109) mexp -> . t step4
    (110) mexp -> . t step4 PLUS pushPoper mexp
    (111) mexp -> . t step4 MINUS pushPoper mexp
    (112) t -> . f step3
    (113) t -> . f step3 MULT pushPoper t
    (114) t -> . f step3 DIV pushPoper t
    (115) f -> . LPAREN addFF exp RPAREN rmFF
    (116) f -> . CTE_I addCteTable step1
    (117) f -> . CTE_F addCteTable step1
    (118) f -> . CTE_C addCteTable step1
    (119) f -> . llamada
    (120) f -> . idCall
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    LPAREN          shift and go to state 134
    CTE_I           shift and go to state 141
    CTE_F           shift and go to state 142
    CTE_C           shift and go to state 143
    ID              shift and go to state 75

    exp                            shift and go to state 285
    texp                           shift and go to state 136
    gexp                           shift and go to state 137
    mexp                           shift and go to state 138
    t                              shift and go to state 139
    f                              shift and go to state 140
    llamada                        shift and go to state 144
    idCall                         shift and go to state 145

state 280

    (83) lextra -> COMMA insertOpWrite exp popIO . lextra
    (83) lextra -> . COMMA insertOpWrite exp popIO lextra
    (84) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (85) lextra -> . empty
    (131) empty -> .

    COMMA           shift and go to state 221
    RPAREN          reduce using rule 131 (empty -> .)

    lextra                         shift and go to state 286
    empty                          shift and go to state 222

state 281

    (84) lextra -> COMMA insertOpWrite LETRERO letreroPush . popIO lextra
    (80) popIO -> .

    COMMA           reduce using rule 80 (popIO -> .)
    RPAREN          reduce using rule 80 (popIO -> .)

    popIO                          shift and go to state 287

state 282

    (88) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .
    (89) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE . ELSE cond3 LBRACE listaEstatutos RBRACE

    ID              reduce using rule 88 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 88 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 88 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 88 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 88 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 88 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 88 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 88 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    ELSE            shift and go to state 288


state 283

    (92) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos . RBRACE step3While

    RBRACE          shift and go to state 289


state 284

    (96) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE . listaEstatutos RBRACE step3While
    (52) listaEstatutos -> . estatutos listaEstatutos
    (53) listaEstatutos -> . empty
    (54) estatutos -> . llamada SCOLON
    (55) estatutos -> . asignacion SCOLON
    (56) estatutos -> . returnf SCOLON
    (57) estatutos -> . lectura SCOLON
    (58) estatutos -> . escritura SCOLON
    (59) estatutos -> . condicion
    (60) estatutos -> . cond_w
    (61) estatutos -> . cond_f
    (131) empty -> .
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (62) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (74) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (76) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (81) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (82) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (88) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (92) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (96) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    RBRACE          reduce using rule 131 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    asignacion                     shift and go to state 80
    listaEstatutos                 shift and go to state 290
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 285

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp . idCallaux3 RBRACK rmFF checkDim2
    (26) idCallaux3 -> .

    RBRACK          reduce using rule 26 (idCallaux3 -> .)

    idCallaux3                     shift and go to state 291

state 286

    (83) lextra -> COMMA insertOpWrite exp popIO lextra .

    RPAREN          reduce using rule 83 (lextra -> COMMA insertOpWrite exp popIO lextra .)


state 287

    (84) lextra -> COMMA insertOpWrite LETRERO letreroPush popIO . lextra
    (83) lextra -> . COMMA insertOpWrite exp popIO lextra
    (84) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (85) lextra -> . empty
    (131) empty -> .

    COMMA           shift and go to state 221
    RPAREN          reduce using rule 131 (empty -> .)

    lextra                         shift and go to state 292
    empty                          shift and go to state 222

state 288

    (89) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE . cond3 LBRACE listaEstatutos RBRACE
    (91) cond3 -> .

    LBRACE          reduce using rule 91 (cond3 -> .)

    cond3                          shift and go to state 293

state 289

    (92) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE . step3While
    (95) step3While -> .

    ID              reduce using rule 95 (step3While -> .)
    RETURN          reduce using rule 95 (step3While -> .)
    READ            reduce using rule 95 (step3While -> .)
    WRITE           reduce using rule 95 (step3While -> .)
    IF              reduce using rule 95 (step3While -> .)
    WHILE           reduce using rule 95 (step3While -> .)
    FOR             reduce using rule 95 (step3While -> .)
    RBRACE          reduce using rule 95 (step3While -> .)

    step3While                     shift and go to state 294

state 290

    (96) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos . RBRACE step3While

    RBRACE          shift and go to state 295


state 291

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 . RBRACK rmFF checkDim2

    RBRACK          shift and go to state 296


state 292

    (84) lextra -> COMMA insertOpWrite LETRERO letreroPush popIO lextra .

    RPAREN          reduce using rule 84 (lextra -> COMMA insertOpWrite LETRERO letreroPush popIO lextra .)


state 293

    (89) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 . LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 297


state 294

    (92) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .

    ID              reduce using rule 92 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RETURN          reduce using rule 92 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    READ            reduce using rule 92 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WRITE           reduce using rule 92 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    IF              reduce using rule 92 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WHILE           reduce using rule 92 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    FOR             reduce using rule 92 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RBRACE          reduce using rule 92 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)


state 295

    (96) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE . step3While
    (95) step3While -> .

    ID              reduce using rule 95 (step3While -> .)
    RETURN          reduce using rule 95 (step3While -> .)
    READ            reduce using rule 95 (step3While -> .)
    WRITE           reduce using rule 95 (step3While -> .)
    IF              reduce using rule 95 (step3While -> .)
    WHILE           reduce using rule 95 (step3While -> .)
    FOR             reduce using rule 95 (step3While -> .)
    RBRACE          reduce using rule 95 (step3While -> .)

    step3While                     shift and go to state 298

state 296

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK . rmFF checkDim2
    (129) rmFF -> .

    ASIGNA          reduce using rule 129 (rmFF -> .)
    MULT            reduce using rule 129 (rmFF -> .)
    DIV             reduce using rule 129 (rmFF -> .)
    PLUS            reduce using rule 129 (rmFF -> .)
    MINUS           reduce using rule 129 (rmFF -> .)
    LT              reduce using rule 129 (rmFF -> .)
    GT              reduce using rule 129 (rmFF -> .)
    LTE             reduce using rule 129 (rmFF -> .)
    GTE             reduce using rule 129 (rmFF -> .)
    EQUALS          reduce using rule 129 (rmFF -> .)
    NEQUALS         reduce using rule 129 (rmFF -> .)
    AND             reduce using rule 129 (rmFF -> .)
    OR              reduce using rule 129 (rmFF -> .)
    RPAREN          reduce using rule 129 (rmFF -> .)
    COMMA           reduce using rule 129 (rmFF -> .)
    SCOLON          reduce using rule 129 (rmFF -> .)
    TO              reduce using rule 129 (rmFF -> .)
    DO              reduce using rule 129 (rmFF -> .)
    RBRACK          reduce using rule 129 (rmFF -> .)

    rmFF                           shift and go to state 299

state 297

    (89) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE . listaEstatutos RBRACE
    (52) listaEstatutos -> . estatutos listaEstatutos
    (53) listaEstatutos -> . empty
    (54) estatutos -> . llamada SCOLON
    (55) estatutos -> . asignacion SCOLON
    (56) estatutos -> . returnf SCOLON
    (57) estatutos -> . lectura SCOLON
    (58) estatutos -> . escritura SCOLON
    (59) estatutos -> . condicion
    (60) estatutos -> . cond_w
    (61) estatutos -> . cond_f
    (131) empty -> .
    (64) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (65) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (62) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (74) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (76) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (81) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (82) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (88) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (89) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (92) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (96) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (20) idCall -> . ID idCallaux checkDim
    (21) idCall -> . ID idCallaux DOT ID
    (22) idCall -> . ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2

    RBRACE          reduce using rule 131 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 300
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 298

    (96) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .

    ID              reduce using rule 96 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RETURN          reduce using rule 96 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    READ            reduce using rule 96 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WRITE           reduce using rule 96 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    IF              reduce using rule 96 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WHILE           reduce using rule 96 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    FOR             reduce using rule 96 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RBRACE          reduce using rule 96 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)


state 299

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF . checkDim2
    (30) checkDim2 -> .

    ASIGNA          reduce using rule 30 (checkDim2 -> .)
    MULT            reduce using rule 30 (checkDim2 -> .)
    DIV             reduce using rule 30 (checkDim2 -> .)
    PLUS            reduce using rule 30 (checkDim2 -> .)
    MINUS           reduce using rule 30 (checkDim2 -> .)
    LT              reduce using rule 30 (checkDim2 -> .)
    GT              reduce using rule 30 (checkDim2 -> .)
    LTE             reduce using rule 30 (checkDim2 -> .)
    GTE             reduce using rule 30 (checkDim2 -> .)
    EQUALS          reduce using rule 30 (checkDim2 -> .)
    NEQUALS         reduce using rule 30 (checkDim2 -> .)
    AND             reduce using rule 30 (checkDim2 -> .)
    OR              reduce using rule 30 (checkDim2 -> .)
    RPAREN          reduce using rule 30 (checkDim2 -> .)
    COMMA           reduce using rule 30 (checkDim2 -> .)
    SCOLON          reduce using rule 30 (checkDim2 -> .)
    TO              reduce using rule 30 (checkDim2 -> .)
    DO              reduce using rule 30 (checkDim2 -> .)
    RBRACK          reduce using rule 30 (checkDim2 -> .)

    checkDim2                      shift and go to state 301

state 300

    (89) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos . RBRACE

    RBRACE          shift and go to state 302


state 301

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .

    ASIGNA          reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    MULT            reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    DIV             reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    PLUS            reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    MINUS           reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    LT              reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    GT              reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    LTE             reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    GTE             reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    EQUALS          reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    NEQUALS         reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    AND             reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    OR              reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    RPAREN          reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    COMMA           reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    SCOLON          reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    TO              reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    DO              reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)
    RBRACK          reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2 .)


state 302

    (89) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .

    ID              reduce using rule 89 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 89 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 89 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 89 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 89 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 89 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 89 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 89 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 75 resolved as shift
