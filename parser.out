Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    GTE
    LTE
    QUOTE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba
Rule 2     prueba -> <empty>
Rule 3     a1InitProg -> <empty>
Rule 4     globalTrue -> <empty>
Rule 5     globalFalse -> <empty>
Rule 6     auxMain -> <empty>
Rule 7     declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
Rule 8     declarClases -> empty
Rule 9     herencia -> LT EXTENDS ID GT
Rule 10    herencia -> empty
Rule 11    declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes
Rule 12    declarAttributes -> empty
Rule 13    listaIdDeclare -> idDeclare
Rule 14    listaIdDeclare -> idDeclare COMMA listaIdDeclare
Rule 15    idDeclare -> ID
Rule 16    idDeclare -> ID LBRACK CTE_I RBRACK
Rule 17    idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK
Rule 18    idCall -> ID
Rule 19    idCall -> ID DOT ID
Rule 20    idCall -> ID LBRACK exp RBRACK
Rule 21    idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK
Rule 22    tipo -> ID
Rule 23    tipo -> INT
Rule 24    tipo -> FLOAT
Rule 25    tipo -> CHAR
Rule 26    declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
Rule 27    declarMethods -> empty
Rule 28    tipoMethod -> VOID
Rule 29    tipoMethod -> INT
Rule 30    tipoMethod -> FLOAT
Rule 31    tipoMethod -> CHAR
Rule 32    listaParam -> param
Rule 33    listaParam -> param COMMA listaParam
Rule 34    listaParam -> empty
Rule 35    param -> tipo COLON ID
Rule 36    declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar
Rule 37    declarVar -> empty
Rule 38    definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc
Rule 39    definFunc -> empty
Rule 40    auxFuncion -> <empty>
Rule 41    listaEstatutos -> estatutos listaEstatutos
Rule 42    listaEstatutos -> empty
Rule 43    estatutos -> llamada SCOLON
Rule 44    estatutos -> asignacion SCOLON
Rule 45    estatutos -> returnf SCOLON
Rule 46    estatutos -> lectura SCOLON
Rule 47    estatutos -> escritura SCOLON
Rule 48    estatutos -> condicion
Rule 49    estatutos -> cond_w
Rule 50    estatutos -> cond_f
Rule 51    asignacion -> idCall ASIGNA exp
Rule 52    llamada -> ID DOT ID LPAREN enviaParam RPAREN
Rule 53    llamada -> ID LPAREN enviaParam RPAREN
Rule 54    enviaParam -> paramReferencia
Rule 55    enviaParam -> empty
Rule 56    paramReferencia -> exp
Rule 57    paramReferencia -> exp COMMA paramReferencia
Rule 58    returnf -> RETURN LPAREN exp RPAREN
Rule 59    lectura -> READ LPAREN listaId RPAREN
Rule 60    listaId -> idCall
Rule 61    listaId -> idCall COMMA listaId
Rule 62    escritura -> WRITE LPAREN exp lextra RPAREN
Rule 63    escritura -> WRITE LPAREN LETRERO lextra RPAREN
Rule 64    lextra -> COMMA exp lextra
Rule 65    lextra -> COMMA LETRERO lextra
Rule 66    lextra -> empty
Rule 67    condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
Rule 68    condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
Rule 69    cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
Rule 70    cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE
Rule 71    exp -> texp
Rule 72    exp -> texp OR exp
Rule 73    texp -> gexp
Rule 74    texp -> gexp AND texp
Rule 75    gexp -> mexp
Rule 76    gexp -> mexp LT mexp
Rule 77    gexp -> mexp GT mexp
Rule 78    gexp -> mexp EQUALS mexp
Rule 79    gexp -> mexp NEQUALS mexp
Rule 80    mexp -> t
Rule 81    mexp -> t PLUS mexp
Rule 82    mexp -> t MINUS mexp
Rule 83    t -> f
Rule 84    t -> f MULT t
Rule 85    t -> f DIV t
Rule 86    f -> LPAREN exp RPAREN
Rule 87    f -> CTE_I
Rule 88    f -> CTE_F
Rule 89    f -> CTE_C
Rule 90    f -> llamada
Rule 91    f -> idCall
Rule 92    empty -> <empty>

Terminals, with rules where they appear

AND                  : 74
ASIGNA               : 51 70
ATTRIBUTES           : 7
CHAR                 : 25 31
CLASS                : 7
COLON                : 11 35 36
COMMA                : 14 33 57 61 64 65
CTE_C                : 89
CTE_F                : 88
CTE_I                : 16 17 17 87
DIV                  : 85
DO                   : 69 70
DOT                  : 19 52
ELSE                 : 68
EQUALS               : 78
EXTENDS              : 9
FLOAT                : 24 30
FOR                  : 70
FUNC                 : 26 38
GT                   : 9 77
GTE                  : 
ID                   : 1 7 9 15 16 17 18 19 19 20 21 22 26 35 38 52 52 53
IF                   : 67 68
INT                  : 23 29
LBRACE               : 1 7 26 38 67 68 68 69 70
LBRACK               : 16 17 17 20 21 21
LETRERO              : 63 65
LPAREN               : 1 26 38 52 53 58 59 62 63 67 68 69 86
LT                   : 9 76
LTE                  : 
MAIN                 : 1
METHODS              : 7
MINUS                : 82
MULT                 : 84
NEQUALS              : 79
OR                   : 72
PLUS                 : 81
PROGRAM              : 1
QUOTE                : 
RBRACE               : 1 7 26 38 67 68 68 69 70
RBRACK               : 16 17 17 20 21 21
READ                 : 59
RETURN               : 58
RPAREN               : 1 26 38 52 53 58 59 62 63 67 68 69 86
SCOLON               : 1 11 36 43 44 45 46 47
THEN                 : 67 68
TO                   : 70
VAR                  : 36
VOID                 : 28
WHILE                : 69
WRITE                : 62 63
error                : 

Nonterminals, with rules where they appear

a1InitProg           : 1
asignacion           : 44
auxFuncion           : 38
auxMain              : 1
cond_f               : 50
cond_w               : 49
condicion            : 48
declarAttributes     : 7 11
declarClases         : 1 7
declarMethods        : 7 26
declarVar            : 1 1 36 38
definFunc            : 1 38
empty                : 8 10 12 27 34 37 39 42 55 66
enviaParam           : 52 53
escritura            : 47
estatutos            : 41
exp                  : 20 21 21 51 56 57 58 62 64 67 68 69 70 70 72 86
f                    : 83 84 85
gexp                 : 73 74
globalFalse          : 1
globalTrue           : 1
herencia             : 7
idCall               : 51 60 61 70 91
idDeclare            : 13 14
lectura              : 46
lextra               : 62 63 64 65
listaEstatutos       : 1 26 38 41 67 68 68 69 70
listaId              : 59 61
listaIdDeclare       : 11 14 36
listaParam           : 26 33 38
llamada              : 43 90
mexp                 : 75 76 76 77 77 78 78 79 79 81 82
param                : 32 33
paramReferencia      : 54 57
program              : 0
prueba               : 1
returnf              : 45
t                    : 80 81 82 84 85
texp                 : 71 72 74
tipo                 : 11 35 36
tipoMethod           : 26 38

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba
    (3) a1InitProg -> .

    SCOLON          reduce using rule 3 (a1InitProg -> .)

    a1InitProg                     shift and go to state 4

state 4

    (1) program -> PROGRAM ID a1InitProg . SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba

    SCOLON          shift and go to state 5


state 5

    (1) program -> PROGRAM ID a1InitProg SCOLON . declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba
    (7) declarClases -> . CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (8) declarClases -> . empty
    (92) empty -> .

    CLASS           shift and go to state 7
    VAR             reduce using rule 92 (empty -> .)
    VOID            reduce using rule 92 (empty -> .)
    INT             reduce using rule 92 (empty -> .)
    FLOAT           reduce using rule 92 (empty -> .)
    CHAR            reduce using rule 92 (empty -> .)
    MAIN            reduce using rule 92 (empty -> .)

    declarClases                   shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases . globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba
    (4) globalTrue -> .

    VAR             reduce using rule 4 (globalTrue -> .)
    VOID            reduce using rule 4 (globalTrue -> .)
    INT             reduce using rule 4 (globalTrue -> .)
    FLOAT           reduce using rule 4 (globalTrue -> .)
    CHAR            reduce using rule 4 (globalTrue -> .)
    MAIN            reduce using rule 4 (globalTrue -> .)

    globalTrue                     shift and go to state 9

state 7

    (7) declarClases -> CLASS . ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    ID              shift and go to state 10


state 8

    (8) declarClases -> empty .

    VAR             reduce using rule 8 (declarClases -> empty .)
    VOID            reduce using rule 8 (declarClases -> empty .)
    INT             reduce using rule 8 (declarClases -> empty .)
    FLOAT           reduce using rule 8 (declarClases -> empty .)
    CHAR            reduce using rule 8 (declarClases -> empty .)
    MAIN            reduce using rule 8 (declarClases -> empty .)


state 9

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue . declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba
    (36) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (37) declarVar -> . empty
    (92) empty -> .

    VAR             shift and go to state 12
    VOID            reduce using rule 92 (empty -> .)
    INT             reduce using rule 92 (empty -> .)
    FLOAT           reduce using rule 92 (empty -> .)
    CHAR            reduce using rule 92 (empty -> .)
    MAIN            reduce using rule 92 (empty -> .)

    declarVar                      shift and go to state 11
    empty                          shift and go to state 13

state 10

    (7) declarClases -> CLASS ID . herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (9) herencia -> . LT EXTENDS ID GT
    (10) herencia -> . empty
    (92) empty -> .

    LT              shift and go to state 15
    LBRACE          reduce using rule 92 (empty -> .)

    herencia                       shift and go to state 14
    empty                          shift and go to state 16

state 11

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar . globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba
    (5) globalFalse -> .

    VOID            reduce using rule 5 (globalFalse -> .)
    INT             reduce using rule 5 (globalFalse -> .)
    FLOAT           reduce using rule 5 (globalFalse -> .)
    CHAR            reduce using rule 5 (globalFalse -> .)
    MAIN            reduce using rule 5 (globalFalse -> .)

    globalFalse                    shift and go to state 17

state 12

    (36) declarVar -> VAR . tipo COLON listaIdDeclare SCOLON declarVar
    (22) tipo -> . ID
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . CHAR

    ID              shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 18

state 13

    (37) declarVar -> empty .

    VOID            reduce using rule 37 (declarVar -> empty .)
    INT             reduce using rule 37 (declarVar -> empty .)
    FLOAT           reduce using rule 37 (declarVar -> empty .)
    CHAR            reduce using rule 37 (declarVar -> empty .)
    MAIN            reduce using rule 37 (declarVar -> empty .)
    ID              reduce using rule 37 (declarVar -> empty .)
    RETURN          reduce using rule 37 (declarVar -> empty .)
    READ            reduce using rule 37 (declarVar -> empty .)
    WRITE           reduce using rule 37 (declarVar -> empty .)
    IF              reduce using rule 37 (declarVar -> empty .)
    WHILE           reduce using rule 37 (declarVar -> empty .)
    FOR             reduce using rule 37 (declarVar -> empty .)
    RBRACE          reduce using rule 37 (declarVar -> empty .)
    LBRACE          reduce using rule 37 (declarVar -> empty .)


state 14

    (7) declarClases -> CLASS ID herencia . LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    LBRACE          shift and go to state 23


state 15

    (9) herencia -> LT . EXTENDS ID GT

    EXTENDS         shift and go to state 24


state 16

    (10) herencia -> empty .

    LBRACE          reduce using rule 10 (herencia -> empty .)


state 17

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse . definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba
    (38) definFunc -> . tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc
    (39) definFunc -> . empty
    (28) tipoMethod -> . VOID
    (29) tipoMethod -> . INT
    (30) tipoMethod -> . FLOAT
    (31) tipoMethod -> . CHAR
    (92) empty -> .

    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    MAIN            reduce using rule 92 (empty -> .)

    definFunc                      shift and go to state 25
    tipoMethod                     shift and go to state 26
    empty                          shift and go to state 27

state 18

    (36) declarVar -> VAR tipo . COLON listaIdDeclare SCOLON declarVar

    COLON           shift and go to state 32


state 19

    (22) tipo -> ID .

    COLON           reduce using rule 22 (tipo -> ID .)


state 20

    (23) tipo -> INT .

    COLON           reduce using rule 23 (tipo -> INT .)


state 21

    (24) tipo -> FLOAT .

    COLON           reduce using rule 24 (tipo -> FLOAT .)


state 22

    (25) tipo -> CHAR .

    COLON           reduce using rule 25 (tipo -> CHAR .)


state 23

    (7) declarClases -> CLASS ID herencia LBRACE . ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    ATTRIBUTES      shift and go to state 33


state 24

    (9) herencia -> LT EXTENDS . ID GT

    ID              shift and go to state 34


state 25

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc . MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba

    MAIN            shift and go to state 35


state 26

    (38) definFunc -> tipoMethod . FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc

    FUNC            shift and go to state 36


state 27

    (39) definFunc -> empty .

    MAIN            reduce using rule 39 (definFunc -> empty .)


state 28

    (28) tipoMethod -> VOID .

    FUNC            reduce using rule 28 (tipoMethod -> VOID .)


state 29

    (29) tipoMethod -> INT .

    FUNC            reduce using rule 29 (tipoMethod -> INT .)


state 30

    (30) tipoMethod -> FLOAT .

    FUNC            reduce using rule 30 (tipoMethod -> FLOAT .)


state 31

    (31) tipoMethod -> CHAR .

    FUNC            reduce using rule 31 (tipoMethod -> CHAR .)


state 32

    (36) declarVar -> VAR tipo COLON . listaIdDeclare SCOLON declarVar
    (13) listaIdDeclare -> . idDeclare
    (14) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (15) idDeclare -> . ID
    (16) idDeclare -> . ID LBRACK CTE_I RBRACK
    (17) idDeclare -> . ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    ID              shift and go to state 39

    listaIdDeclare                 shift and go to state 37
    idDeclare                      shift and go to state 38

state 33

    (7) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES . declarAttributes METHODS declarMethods RBRACE declarClases
    (11) declarAttributes -> . tipo COLON listaIdDeclare SCOLON declarAttributes
    (12) declarAttributes -> . empty
    (22) tipo -> . ID
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . CHAR
    (92) empty -> .

    ID              shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    METHODS         reduce using rule 92 (empty -> .)

    declarAttributes               shift and go to state 40
    tipo                           shift and go to state 41
    empty                          shift and go to state 42

state 34

    (9) herencia -> LT EXTENDS ID . GT

    GT              shift and go to state 43


state 35

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN . auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba
    (6) auxMain -> .

    LPAREN          reduce using rule 6 (auxMain -> .)

    auxMain                        shift and go to state 44

state 36

    (38) definFunc -> tipoMethod FUNC . ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc

    ID              shift and go to state 45


state 37

    (36) declarVar -> VAR tipo COLON listaIdDeclare . SCOLON declarVar

    SCOLON          shift and go to state 46


state 38

    (13) listaIdDeclare -> idDeclare .
    (14) listaIdDeclare -> idDeclare . COMMA listaIdDeclare

    SCOLON          reduce using rule 13 (listaIdDeclare -> idDeclare .)
    COMMA           shift and go to state 47


state 39

    (15) idDeclare -> ID .
    (16) idDeclare -> ID . LBRACK CTE_I RBRACK
    (17) idDeclare -> ID . LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    COMMA           reduce using rule 15 (idDeclare -> ID .)
    SCOLON          reduce using rule 15 (idDeclare -> ID .)
    LBRACK          shift and go to state 48


state 40

    (7) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes . METHODS declarMethods RBRACE declarClases

    METHODS         shift and go to state 49


state 41

    (11) declarAttributes -> tipo . COLON listaIdDeclare SCOLON declarAttributes

    COLON           shift and go to state 50


state 42

    (12) declarAttributes -> empty .

    METHODS         reduce using rule 12 (declarAttributes -> empty .)


state 43

    (9) herencia -> LT EXTENDS ID GT .

    LBRACE          reduce using rule 9 (herencia -> LT EXTENDS ID GT .)


state 44

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain . LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba

    LPAREN          shift and go to state 51


state 45

    (38) definFunc -> tipoMethod FUNC ID . auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc
    (40) auxFuncion -> .

    LPAREN          reduce using rule 40 (auxFuncion -> .)

    auxFuncion                     shift and go to state 52

state 46

    (36) declarVar -> VAR tipo COLON listaIdDeclare SCOLON . declarVar
    (36) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (37) declarVar -> . empty
    (92) empty -> .

    VAR             shift and go to state 12
    VOID            reduce using rule 92 (empty -> .)
    INT             reduce using rule 92 (empty -> .)
    FLOAT           reduce using rule 92 (empty -> .)
    CHAR            reduce using rule 92 (empty -> .)
    MAIN            reduce using rule 92 (empty -> .)
    ID              reduce using rule 92 (empty -> .)
    RETURN          reduce using rule 92 (empty -> .)
    READ            reduce using rule 92 (empty -> .)
    WRITE           reduce using rule 92 (empty -> .)
    IF              reduce using rule 92 (empty -> .)
    WHILE           reduce using rule 92 (empty -> .)
    FOR             reduce using rule 92 (empty -> .)
    RBRACE          reduce using rule 92 (empty -> .)
    LBRACE          reduce using rule 92 (empty -> .)

    declarVar                      shift and go to state 53
    empty                          shift and go to state 13

state 47

    (14) listaIdDeclare -> idDeclare COMMA . listaIdDeclare
    (13) listaIdDeclare -> . idDeclare
    (14) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (15) idDeclare -> . ID
    (16) idDeclare -> . ID LBRACK CTE_I RBRACK
    (17) idDeclare -> . ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    ID              shift and go to state 39

    idDeclare                      shift and go to state 38
    listaIdDeclare                 shift and go to state 54

state 48

    (16) idDeclare -> ID LBRACK . CTE_I RBRACK
    (17) idDeclare -> ID LBRACK . CTE_I RBRACK LBRACK CTE_I RBRACK

    CTE_I           shift and go to state 55


state 49

    (7) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS . declarMethods RBRACE declarClases
    (26) declarMethods -> . tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (27) declarMethods -> . empty
    (28) tipoMethod -> . VOID
    (29) tipoMethod -> . INT
    (30) tipoMethod -> . FLOAT
    (31) tipoMethod -> . CHAR
    (92) empty -> .

    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    RBRACE          reduce using rule 92 (empty -> .)

    declarMethods                  shift and go to state 56
    tipoMethod                     shift and go to state 57
    empty                          shift and go to state 58

state 50

    (11) declarAttributes -> tipo COLON . listaIdDeclare SCOLON declarAttributes
    (13) listaIdDeclare -> . idDeclare
    (14) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (15) idDeclare -> . ID
    (16) idDeclare -> . ID LBRACK CTE_I RBRACK
    (17) idDeclare -> . ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    ID              shift and go to state 39

    listaIdDeclare                 shift and go to state 59
    idDeclare                      shift and go to state 38

state 51

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN . RPAREN LBRACE declarVar listaEstatutos RBRACE prueba

    RPAREN          shift and go to state 60


state 52

    (38) definFunc -> tipoMethod FUNC ID auxFuncion . LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc

    LPAREN          shift and go to state 61


state 53

    (36) declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .

    VOID            reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    INT             reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    FLOAT           reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    CHAR            reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    MAIN            reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    ID              reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    RETURN          reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    READ            reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    WRITE           reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    IF              reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    WHILE           reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    FOR             reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    RBRACE          reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    LBRACE          reduce using rule 36 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)


state 54

    (14) listaIdDeclare -> idDeclare COMMA listaIdDeclare .

    SCOLON          reduce using rule 14 (listaIdDeclare -> idDeclare COMMA listaIdDeclare .)


state 55

    (16) idDeclare -> ID LBRACK CTE_I . RBRACK
    (17) idDeclare -> ID LBRACK CTE_I . RBRACK LBRACK CTE_I RBRACK

    RBRACK          shift and go to state 62


state 56

    (7) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods . RBRACE declarClases

    RBRACE          shift and go to state 63


state 57

    (26) declarMethods -> tipoMethod . FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    FUNC            shift and go to state 64


state 58

    (27) declarMethods -> empty .

    RBRACE          reduce using rule 27 (declarMethods -> empty .)


state 59

    (11) declarAttributes -> tipo COLON listaIdDeclare . SCOLON declarAttributes

    SCOLON          shift and go to state 65


state 60

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN . LBRACE declarVar listaEstatutos RBRACE prueba

    LBRACE          shift and go to state 66


state 61

    (38) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN . listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc
    (32) listaParam -> . param
    (33) listaParam -> . param COMMA listaParam
    (34) listaParam -> . empty
    (35) param -> . tipo COLON ID
    (92) empty -> .
    (22) tipo -> . ID
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . CHAR

    RPAREN          reduce using rule 92 (empty -> .)
    ID              shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    listaParam                     shift and go to state 67
    param                          shift and go to state 68
    empty                          shift and go to state 69
    tipo                           shift and go to state 70

state 62

    (16) idDeclare -> ID LBRACK CTE_I RBRACK .
    (17) idDeclare -> ID LBRACK CTE_I RBRACK . LBRACK CTE_I RBRACK

    COMMA           reduce using rule 16 (idDeclare -> ID LBRACK CTE_I RBRACK .)
    SCOLON          reduce using rule 16 (idDeclare -> ID LBRACK CTE_I RBRACK .)
    LBRACK          shift and go to state 71


state 63

    (7) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE . declarClases
    (7) declarClases -> . CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (8) declarClases -> . empty
    (92) empty -> .

    CLASS           shift and go to state 7
    VAR             reduce using rule 92 (empty -> .)
    VOID            reduce using rule 92 (empty -> .)
    INT             reduce using rule 92 (empty -> .)
    FLOAT           reduce using rule 92 (empty -> .)
    CHAR            reduce using rule 92 (empty -> .)
    MAIN            reduce using rule 92 (empty -> .)

    declarClases                   shift and go to state 72
    empty                          shift and go to state 8

state 64

    (26) declarMethods -> tipoMethod FUNC . ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    ID              shift and go to state 73


state 65

    (11) declarAttributes -> tipo COLON listaIdDeclare SCOLON . declarAttributes
    (11) declarAttributes -> . tipo COLON listaIdDeclare SCOLON declarAttributes
    (12) declarAttributes -> . empty
    (22) tipo -> . ID
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . CHAR
    (92) empty -> .

    ID              shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    METHODS         reduce using rule 92 (empty -> .)

    tipo                           shift and go to state 41
    declarAttributes               shift and go to state 74
    empty                          shift and go to state 42

state 66

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE . declarVar listaEstatutos RBRACE prueba
    (36) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (37) declarVar -> . empty
    (92) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 92 (empty -> .)
    RETURN          reduce using rule 92 (empty -> .)
    READ            reduce using rule 92 (empty -> .)
    WRITE           reduce using rule 92 (empty -> .)
    IF              reduce using rule 92 (empty -> .)
    WHILE           reduce using rule 92 (empty -> .)
    FOR             reduce using rule 92 (empty -> .)
    RBRACE          reduce using rule 92 (empty -> .)

    declarVar                      shift and go to state 75
    empty                          shift and go to state 13

state 67

    (38) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam . RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc

    RPAREN          shift and go to state 76


state 68

    (32) listaParam -> param .
    (33) listaParam -> param . COMMA listaParam

    RPAREN          reduce using rule 32 (listaParam -> param .)
    COMMA           shift and go to state 77


state 69

    (34) listaParam -> empty .

    RPAREN          reduce using rule 34 (listaParam -> empty .)


state 70

    (35) param -> tipo . COLON ID

    COLON           shift and go to state 78


state 71

    (17) idDeclare -> ID LBRACK CTE_I RBRACK LBRACK . CTE_I RBRACK

    CTE_I           shift and go to state 79


state 72

    (7) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .

    VAR             reduce using rule 7 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    VOID            reduce using rule 7 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    INT             reduce using rule 7 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    FLOAT           reduce using rule 7 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    CHAR            reduce using rule 7 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    MAIN            reduce using rule 7 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)


state 73

    (26) declarMethods -> tipoMethod FUNC ID . LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    LPAREN          shift and go to state 80


state 74

    (11) declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes .

    METHODS         reduce using rule 11 (declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes .)


state 75

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar . listaEstatutos RBRACE prueba
    (41) listaEstatutos -> . estatutos listaEstatutos
    (42) listaEstatutos -> . empty
    (43) estatutos -> . llamada SCOLON
    (44) estatutos -> . asignacion SCOLON
    (45) estatutos -> . returnf SCOLON
    (46) estatutos -> . lectura SCOLON
    (47) estatutos -> . escritura SCOLON
    (48) estatutos -> . condicion
    (49) estatutos -> . cond_w
    (50) estatutos -> . cond_f
    (92) empty -> .
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (51) asignacion -> . idCall ASIGNA exp
    (58) returnf -> . RETURN LPAREN exp RPAREN
    (59) lectura -> . READ LPAREN listaId RPAREN
    (62) escritura -> . WRITE LPAREN exp lextra RPAREN
    (63) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (67) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (69) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (70) cond_f -> . FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 92 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 94
    READ            shift and go to state 95
    WRITE           shift and go to state 96
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FOR             shift and go to state 99

    listaEstatutos                 shift and go to state 82
    estatutos                      shift and go to state 83
    empty                          shift and go to state 84
    llamada                        shift and go to state 85
    asignacion                     shift and go to state 86
    returnf                        shift and go to state 87
    lectura                        shift and go to state 88
    escritura                      shift and go to state 89
    condicion                      shift and go to state 90
    cond_w                         shift and go to state 91
    cond_f                         shift and go to state 92
    idCall                         shift and go to state 93

state 76

    (38) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN . declarVar LBRACE listaEstatutos RBRACE definFunc
    (36) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (37) declarVar -> . empty
    (92) empty -> .

    VAR             shift and go to state 12
    LBRACE          reduce using rule 92 (empty -> .)

    declarVar                      shift and go to state 100
    empty                          shift and go to state 13

state 77

    (33) listaParam -> param COMMA . listaParam
    (32) listaParam -> . param
    (33) listaParam -> . param COMMA listaParam
    (34) listaParam -> . empty
    (35) param -> . tipo COLON ID
    (92) empty -> .
    (22) tipo -> . ID
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . CHAR

    RPAREN          reduce using rule 92 (empty -> .)
    ID              shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    param                          shift and go to state 68
    listaParam                     shift and go to state 101
    empty                          shift and go to state 69
    tipo                           shift and go to state 70

state 78

    (35) param -> tipo COLON . ID

    ID              shift and go to state 102


state 79

    (17) idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I . RBRACK

    RBRACK          shift and go to state 103


state 80

    (26) declarMethods -> tipoMethod FUNC ID LPAREN . listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (32) listaParam -> . param
    (33) listaParam -> . param COMMA listaParam
    (34) listaParam -> . empty
    (35) param -> . tipo COLON ID
    (92) empty -> .
    (22) tipo -> . ID
    (23) tipo -> . INT
    (24) tipo -> . FLOAT
    (25) tipo -> . CHAR

    RPAREN          reduce using rule 92 (empty -> .)
    ID              shift and go to state 19
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    listaParam                     shift and go to state 104
    param                          shift and go to state 68
    empty                          shift and go to state 69
    tipo                           shift and go to state 70

state 81

    (52) llamada -> ID . DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> ID . LPAREN enviaParam RPAREN
    (18) idCall -> ID .
    (19) idCall -> ID . DOT ID
    (20) idCall -> ID . LBRACK exp RBRACK
    (21) idCall -> ID . LBRACK exp RBRACK LBRACK exp RBRACK

    DOT             shift and go to state 105
    LPAREN          shift and go to state 106
    ASIGNA          reduce using rule 18 (idCall -> ID .)
    MULT            reduce using rule 18 (idCall -> ID .)
    DIV             reduce using rule 18 (idCall -> ID .)
    PLUS            reduce using rule 18 (idCall -> ID .)
    MINUS           reduce using rule 18 (idCall -> ID .)
    LT              reduce using rule 18 (idCall -> ID .)
    GT              reduce using rule 18 (idCall -> ID .)
    EQUALS          reduce using rule 18 (idCall -> ID .)
    NEQUALS         reduce using rule 18 (idCall -> ID .)
    AND             reduce using rule 18 (idCall -> ID .)
    OR              reduce using rule 18 (idCall -> ID .)
    COMMA           reduce using rule 18 (idCall -> ID .)
    RPAREN          reduce using rule 18 (idCall -> ID .)
    RBRACK          reduce using rule 18 (idCall -> ID .)
    SCOLON          reduce using rule 18 (idCall -> ID .)
    TO              reduce using rule 18 (idCall -> ID .)
    DO              reduce using rule 18 (idCall -> ID .)
    LBRACK          shift and go to state 107


state 82

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos . RBRACE prueba

    RBRACE          shift and go to state 108


state 83

    (41) listaEstatutos -> estatutos . listaEstatutos
    (41) listaEstatutos -> . estatutos listaEstatutos
    (42) listaEstatutos -> . empty
    (43) estatutos -> . llamada SCOLON
    (44) estatutos -> . asignacion SCOLON
    (45) estatutos -> . returnf SCOLON
    (46) estatutos -> . lectura SCOLON
    (47) estatutos -> . escritura SCOLON
    (48) estatutos -> . condicion
    (49) estatutos -> . cond_w
    (50) estatutos -> . cond_f
    (92) empty -> .
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (51) asignacion -> . idCall ASIGNA exp
    (58) returnf -> . RETURN LPAREN exp RPAREN
    (59) lectura -> . READ LPAREN listaId RPAREN
    (62) escritura -> . WRITE LPAREN exp lextra RPAREN
    (63) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (67) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (69) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (70) cond_f -> . FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 92 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 94
    READ            shift and go to state 95
    WRITE           shift and go to state 96
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FOR             shift and go to state 99

    estatutos                      shift and go to state 83
    listaEstatutos                 shift and go to state 109
    empty                          shift and go to state 84
    llamada                        shift and go to state 85
    asignacion                     shift and go to state 86
    returnf                        shift and go to state 87
    lectura                        shift and go to state 88
    escritura                      shift and go to state 89
    condicion                      shift and go to state 90
    cond_w                         shift and go to state 91
    cond_f                         shift and go to state 92
    idCall                         shift and go to state 93

state 84

    (42) listaEstatutos -> empty .

    RBRACE          reduce using rule 42 (listaEstatutos -> empty .)


state 85

    (43) estatutos -> llamada . SCOLON

    SCOLON          shift and go to state 110


state 86

    (44) estatutos -> asignacion . SCOLON

    SCOLON          shift and go to state 111


state 87

    (45) estatutos -> returnf . SCOLON

    SCOLON          shift and go to state 112


state 88

    (46) estatutos -> lectura . SCOLON

    SCOLON          shift and go to state 113


state 89

    (47) estatutos -> escritura . SCOLON

    SCOLON          shift and go to state 114


state 90

    (48) estatutos -> condicion .

    ID              reduce using rule 48 (estatutos -> condicion .)
    RETURN          reduce using rule 48 (estatutos -> condicion .)
    READ            reduce using rule 48 (estatutos -> condicion .)
    WRITE           reduce using rule 48 (estatutos -> condicion .)
    IF              reduce using rule 48 (estatutos -> condicion .)
    WHILE           reduce using rule 48 (estatutos -> condicion .)
    FOR             reduce using rule 48 (estatutos -> condicion .)
    RBRACE          reduce using rule 48 (estatutos -> condicion .)


state 91

    (49) estatutos -> cond_w .

    ID              reduce using rule 49 (estatutos -> cond_w .)
    RETURN          reduce using rule 49 (estatutos -> cond_w .)
    READ            reduce using rule 49 (estatutos -> cond_w .)
    WRITE           reduce using rule 49 (estatutos -> cond_w .)
    IF              reduce using rule 49 (estatutos -> cond_w .)
    WHILE           reduce using rule 49 (estatutos -> cond_w .)
    FOR             reduce using rule 49 (estatutos -> cond_w .)
    RBRACE          reduce using rule 49 (estatutos -> cond_w .)


state 92

    (50) estatutos -> cond_f .

    ID              reduce using rule 50 (estatutos -> cond_f .)
    RETURN          reduce using rule 50 (estatutos -> cond_f .)
    READ            reduce using rule 50 (estatutos -> cond_f .)
    WRITE           reduce using rule 50 (estatutos -> cond_f .)
    IF              reduce using rule 50 (estatutos -> cond_f .)
    WHILE           reduce using rule 50 (estatutos -> cond_f .)
    FOR             reduce using rule 50 (estatutos -> cond_f .)
    RBRACE          reduce using rule 50 (estatutos -> cond_f .)


state 93

    (51) asignacion -> idCall . ASIGNA exp

    ASIGNA          shift and go to state 115


state 94

    (58) returnf -> RETURN . LPAREN exp RPAREN

    LPAREN          shift and go to state 116


state 95

    (59) lectura -> READ . LPAREN listaId RPAREN

    LPAREN          shift and go to state 117


state 96

    (62) escritura -> WRITE . LPAREN exp lextra RPAREN
    (63) escritura -> WRITE . LPAREN LETRERO lextra RPAREN

    LPAREN          shift and go to state 118


state 97

    (67) condicion -> IF . LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> IF . LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE

    LPAREN          shift and go to state 119


state 98

    (69) cond_w -> WHILE . LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE

    LPAREN          shift and go to state 120


state 99

    (70) cond_f -> FOR . idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    ID              shift and go to state 122

    idCall                         shift and go to state 121

state 100

    (38) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar . LBRACE listaEstatutos RBRACE definFunc

    LBRACE          shift and go to state 123


state 101

    (33) listaParam -> param COMMA listaParam .

    RPAREN          reduce using rule 33 (listaParam -> param COMMA listaParam .)


state 102

    (35) param -> tipo COLON ID .

    COMMA           reduce using rule 35 (param -> tipo COLON ID .)
    RPAREN          reduce using rule 35 (param -> tipo COLON ID .)


state 103

    (17) idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK .

    COMMA           reduce using rule 17 (idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK .)
    SCOLON          reduce using rule 17 (idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK .)


state 104

    (26) declarMethods -> tipoMethod FUNC ID LPAREN listaParam . RPAREN LBRACE listaEstatutos RBRACE declarMethods

    RPAREN          shift and go to state 124


state 105

    (52) llamada -> ID DOT . ID LPAREN enviaParam RPAREN
    (19) idCall -> ID DOT . ID

    ID              shift and go to state 125


state 106

    (53) llamada -> ID LPAREN . enviaParam RPAREN
    (54) enviaParam -> . paramReferencia
    (55) enviaParam -> . empty
    (56) paramReferencia -> . exp
    (57) paramReferencia -> . exp COMMA paramReferencia
    (92) empty -> .
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RPAREN          reduce using rule 92 (empty -> .)
    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    enviaParam                     shift and go to state 127
    paramReferencia                shift and go to state 128
    empty                          shift and go to state 129
    exp                            shift and go to state 130
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 107

    (20) idCall -> ID LBRACK . exp RBRACK
    (21) idCall -> ID LBRACK . exp RBRACK LBRACK exp RBRACK
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    exp                            shift and go to state 141
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 108

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE . prueba
    (2) prueba -> .

    $end            reduce using rule 2 (prueba -> .)

    prueba                         shift and go to state 142

state 109

    (41) listaEstatutos -> estatutos listaEstatutos .

    RBRACE          reduce using rule 41 (listaEstatutos -> estatutos listaEstatutos .)


state 110

    (43) estatutos -> llamada SCOLON .

    ID              reduce using rule 43 (estatutos -> llamada SCOLON .)
    RETURN          reduce using rule 43 (estatutos -> llamada SCOLON .)
    READ            reduce using rule 43 (estatutos -> llamada SCOLON .)
    WRITE           reduce using rule 43 (estatutos -> llamada SCOLON .)
    IF              reduce using rule 43 (estatutos -> llamada SCOLON .)
    WHILE           reduce using rule 43 (estatutos -> llamada SCOLON .)
    FOR             reduce using rule 43 (estatutos -> llamada SCOLON .)
    RBRACE          reduce using rule 43 (estatutos -> llamada SCOLON .)


state 111

    (44) estatutos -> asignacion SCOLON .

    ID              reduce using rule 44 (estatutos -> asignacion SCOLON .)
    RETURN          reduce using rule 44 (estatutos -> asignacion SCOLON .)
    READ            reduce using rule 44 (estatutos -> asignacion SCOLON .)
    WRITE           reduce using rule 44 (estatutos -> asignacion SCOLON .)
    IF              reduce using rule 44 (estatutos -> asignacion SCOLON .)
    WHILE           reduce using rule 44 (estatutos -> asignacion SCOLON .)
    FOR             reduce using rule 44 (estatutos -> asignacion SCOLON .)
    RBRACE          reduce using rule 44 (estatutos -> asignacion SCOLON .)


state 112

    (45) estatutos -> returnf SCOLON .

    ID              reduce using rule 45 (estatutos -> returnf SCOLON .)
    RETURN          reduce using rule 45 (estatutos -> returnf SCOLON .)
    READ            reduce using rule 45 (estatutos -> returnf SCOLON .)
    WRITE           reduce using rule 45 (estatutos -> returnf SCOLON .)
    IF              reduce using rule 45 (estatutos -> returnf SCOLON .)
    WHILE           reduce using rule 45 (estatutos -> returnf SCOLON .)
    FOR             reduce using rule 45 (estatutos -> returnf SCOLON .)
    RBRACE          reduce using rule 45 (estatutos -> returnf SCOLON .)


state 113

    (46) estatutos -> lectura SCOLON .

    ID              reduce using rule 46 (estatutos -> lectura SCOLON .)
    RETURN          reduce using rule 46 (estatutos -> lectura SCOLON .)
    READ            reduce using rule 46 (estatutos -> lectura SCOLON .)
    WRITE           reduce using rule 46 (estatutos -> lectura SCOLON .)
    IF              reduce using rule 46 (estatutos -> lectura SCOLON .)
    WHILE           reduce using rule 46 (estatutos -> lectura SCOLON .)
    FOR             reduce using rule 46 (estatutos -> lectura SCOLON .)
    RBRACE          reduce using rule 46 (estatutos -> lectura SCOLON .)


state 114

    (47) estatutos -> escritura SCOLON .

    ID              reduce using rule 47 (estatutos -> escritura SCOLON .)
    RETURN          reduce using rule 47 (estatutos -> escritura SCOLON .)
    READ            reduce using rule 47 (estatutos -> escritura SCOLON .)
    WRITE           reduce using rule 47 (estatutos -> escritura SCOLON .)
    IF              reduce using rule 47 (estatutos -> escritura SCOLON .)
    WHILE           reduce using rule 47 (estatutos -> escritura SCOLON .)
    FOR             reduce using rule 47 (estatutos -> escritura SCOLON .)
    RBRACE          reduce using rule 47 (estatutos -> escritura SCOLON .)


state 115

    (51) asignacion -> idCall ASIGNA . exp
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    idCall                         shift and go to state 140
    exp                            shift and go to state 143
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139

state 116

    (58) returnf -> RETURN LPAREN . exp RPAREN
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    exp                            shift and go to state 144
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 117

    (59) lectura -> READ LPAREN . listaId RPAREN
    (60) listaId -> . idCall
    (61) listaId -> . idCall COMMA listaId
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    ID              shift and go to state 122

    listaId                        shift and go to state 145
    idCall                         shift and go to state 146

state 118

    (62) escritura -> WRITE LPAREN . exp lextra RPAREN
    (63) escritura -> WRITE LPAREN . LETRERO lextra RPAREN
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LETRERO         shift and go to state 148
    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    exp                            shift and go to state 147
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 119

    (67) condicion -> IF LPAREN . exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> IF LPAREN . exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    exp                            shift and go to state 149
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 120

    (69) cond_w -> WHILE LPAREN . exp RPAREN DO LBRACE listaEstatutos RBRACE
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    exp                            shift and go to state 150
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 121

    (70) cond_f -> FOR idCall . ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE

    ASIGNA          shift and go to state 151


state 122

    (18) idCall -> ID .
    (19) idCall -> ID . DOT ID
    (20) idCall -> ID . LBRACK exp RBRACK
    (21) idCall -> ID . LBRACK exp RBRACK LBRACK exp RBRACK

    ASIGNA          reduce using rule 18 (idCall -> ID .)
    COMMA           reduce using rule 18 (idCall -> ID .)
    RPAREN          reduce using rule 18 (idCall -> ID .)
    DOT             shift and go to state 152
    LBRACK          shift and go to state 107


state 123

    (38) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE . listaEstatutos RBRACE definFunc
    (41) listaEstatutos -> . estatutos listaEstatutos
    (42) listaEstatutos -> . empty
    (43) estatutos -> . llamada SCOLON
    (44) estatutos -> . asignacion SCOLON
    (45) estatutos -> . returnf SCOLON
    (46) estatutos -> . lectura SCOLON
    (47) estatutos -> . escritura SCOLON
    (48) estatutos -> . condicion
    (49) estatutos -> . cond_w
    (50) estatutos -> . cond_f
    (92) empty -> .
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (51) asignacion -> . idCall ASIGNA exp
    (58) returnf -> . RETURN LPAREN exp RPAREN
    (59) lectura -> . READ LPAREN listaId RPAREN
    (62) escritura -> . WRITE LPAREN exp lextra RPAREN
    (63) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (67) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (69) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (70) cond_f -> . FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 92 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 94
    READ            shift and go to state 95
    WRITE           shift and go to state 96
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FOR             shift and go to state 99

    listaEstatutos                 shift and go to state 153
    estatutos                      shift and go to state 83
    empty                          shift and go to state 84
    llamada                        shift and go to state 85
    asignacion                     shift and go to state 86
    returnf                        shift and go to state 87
    lectura                        shift and go to state 88
    escritura                      shift and go to state 89
    condicion                      shift and go to state 90
    cond_w                         shift and go to state 91
    cond_f                         shift and go to state 92
    idCall                         shift and go to state 93

state 124

    (26) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN . LBRACE listaEstatutos RBRACE declarMethods

    LBRACE          shift and go to state 154


state 125

    (52) llamada -> ID DOT ID . LPAREN enviaParam RPAREN
    (19) idCall -> ID DOT ID .

    LPAREN          shift and go to state 155
    ASIGNA          reduce using rule 19 (idCall -> ID DOT ID .)
    MULT            reduce using rule 19 (idCall -> ID DOT ID .)
    DIV             reduce using rule 19 (idCall -> ID DOT ID .)
    PLUS            reduce using rule 19 (idCall -> ID DOT ID .)
    MINUS           reduce using rule 19 (idCall -> ID DOT ID .)
    LT              reduce using rule 19 (idCall -> ID DOT ID .)
    GT              reduce using rule 19 (idCall -> ID DOT ID .)
    EQUALS          reduce using rule 19 (idCall -> ID DOT ID .)
    NEQUALS         reduce using rule 19 (idCall -> ID DOT ID .)
    AND             reduce using rule 19 (idCall -> ID DOT ID .)
    OR              reduce using rule 19 (idCall -> ID DOT ID .)
    COMMA           reduce using rule 19 (idCall -> ID DOT ID .)
    RPAREN          reduce using rule 19 (idCall -> ID DOT ID .)
    RBRACK          reduce using rule 19 (idCall -> ID DOT ID .)
    SCOLON          reduce using rule 19 (idCall -> ID DOT ID .)
    TO              reduce using rule 19 (idCall -> ID DOT ID .)
    DO              reduce using rule 19 (idCall -> ID DOT ID .)


state 126

    (86) f -> LPAREN . exp RPAREN
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    exp                            shift and go to state 156
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 127

    (53) llamada -> ID LPAREN enviaParam . RPAREN

    RPAREN          shift and go to state 157


state 128

    (54) enviaParam -> paramReferencia .

    RPAREN          reduce using rule 54 (enviaParam -> paramReferencia .)


state 129

    (55) enviaParam -> empty .

    RPAREN          reduce using rule 55 (enviaParam -> empty .)


state 130

    (56) paramReferencia -> exp .
    (57) paramReferencia -> exp . COMMA paramReferencia

    RPAREN          reduce using rule 56 (paramReferencia -> exp .)
    COMMA           shift and go to state 158


state 131

    (71) exp -> texp .
    (72) exp -> texp . OR exp

    COMMA           reduce using rule 71 (exp -> texp .)
    RPAREN          reduce using rule 71 (exp -> texp .)
    RBRACK          reduce using rule 71 (exp -> texp .)
    SCOLON          reduce using rule 71 (exp -> texp .)
    TO              reduce using rule 71 (exp -> texp .)
    DO              reduce using rule 71 (exp -> texp .)
    OR              shift and go to state 159


state 132

    (73) texp -> gexp .
    (74) texp -> gexp . AND texp

    OR              reduce using rule 73 (texp -> gexp .)
    COMMA           reduce using rule 73 (texp -> gexp .)
    RPAREN          reduce using rule 73 (texp -> gexp .)
    RBRACK          reduce using rule 73 (texp -> gexp .)
    SCOLON          reduce using rule 73 (texp -> gexp .)
    TO              reduce using rule 73 (texp -> gexp .)
    DO              reduce using rule 73 (texp -> gexp .)
    AND             shift and go to state 160


state 133

    (75) gexp -> mexp .
    (76) gexp -> mexp . LT mexp
    (77) gexp -> mexp . GT mexp
    (78) gexp -> mexp . EQUALS mexp
    (79) gexp -> mexp . NEQUALS mexp

    AND             reduce using rule 75 (gexp -> mexp .)
    OR              reduce using rule 75 (gexp -> mexp .)
    COMMA           reduce using rule 75 (gexp -> mexp .)
    RPAREN          reduce using rule 75 (gexp -> mexp .)
    RBRACK          reduce using rule 75 (gexp -> mexp .)
    SCOLON          reduce using rule 75 (gexp -> mexp .)
    TO              reduce using rule 75 (gexp -> mexp .)
    DO              reduce using rule 75 (gexp -> mexp .)
    LT              shift and go to state 161
    GT              shift and go to state 162
    EQUALS          shift and go to state 163
    NEQUALS         shift and go to state 164


state 134

    (80) mexp -> t .
    (81) mexp -> t . PLUS mexp
    (82) mexp -> t . MINUS mexp

    LT              reduce using rule 80 (mexp -> t .)
    GT              reduce using rule 80 (mexp -> t .)
    EQUALS          reduce using rule 80 (mexp -> t .)
    NEQUALS         reduce using rule 80 (mexp -> t .)
    AND             reduce using rule 80 (mexp -> t .)
    OR              reduce using rule 80 (mexp -> t .)
    COMMA           reduce using rule 80 (mexp -> t .)
    RPAREN          reduce using rule 80 (mexp -> t .)
    RBRACK          reduce using rule 80 (mexp -> t .)
    SCOLON          reduce using rule 80 (mexp -> t .)
    TO              reduce using rule 80 (mexp -> t .)
    DO              reduce using rule 80 (mexp -> t .)
    PLUS            shift and go to state 165
    MINUS           shift and go to state 166


state 135

    (83) t -> f .
    (84) t -> f . MULT t
    (85) t -> f . DIV t

    PLUS            reduce using rule 83 (t -> f .)
    MINUS           reduce using rule 83 (t -> f .)
    LT              reduce using rule 83 (t -> f .)
    GT              reduce using rule 83 (t -> f .)
    EQUALS          reduce using rule 83 (t -> f .)
    NEQUALS         reduce using rule 83 (t -> f .)
    AND             reduce using rule 83 (t -> f .)
    OR              reduce using rule 83 (t -> f .)
    COMMA           reduce using rule 83 (t -> f .)
    RPAREN          reduce using rule 83 (t -> f .)
    RBRACK          reduce using rule 83 (t -> f .)
    SCOLON          reduce using rule 83 (t -> f .)
    TO              reduce using rule 83 (t -> f .)
    DO              reduce using rule 83 (t -> f .)
    MULT            shift and go to state 167
    DIV             shift and go to state 168


state 136

    (87) f -> CTE_I .

    MULT            reduce using rule 87 (f -> CTE_I .)
    DIV             reduce using rule 87 (f -> CTE_I .)
    PLUS            reduce using rule 87 (f -> CTE_I .)
    MINUS           reduce using rule 87 (f -> CTE_I .)
    LT              reduce using rule 87 (f -> CTE_I .)
    GT              reduce using rule 87 (f -> CTE_I .)
    EQUALS          reduce using rule 87 (f -> CTE_I .)
    NEQUALS         reduce using rule 87 (f -> CTE_I .)
    AND             reduce using rule 87 (f -> CTE_I .)
    OR              reduce using rule 87 (f -> CTE_I .)
    COMMA           reduce using rule 87 (f -> CTE_I .)
    RPAREN          reduce using rule 87 (f -> CTE_I .)
    RBRACK          reduce using rule 87 (f -> CTE_I .)
    SCOLON          reduce using rule 87 (f -> CTE_I .)
    TO              reduce using rule 87 (f -> CTE_I .)
    DO              reduce using rule 87 (f -> CTE_I .)


state 137

    (88) f -> CTE_F .

    MULT            reduce using rule 88 (f -> CTE_F .)
    DIV             reduce using rule 88 (f -> CTE_F .)
    PLUS            reduce using rule 88 (f -> CTE_F .)
    MINUS           reduce using rule 88 (f -> CTE_F .)
    LT              reduce using rule 88 (f -> CTE_F .)
    GT              reduce using rule 88 (f -> CTE_F .)
    EQUALS          reduce using rule 88 (f -> CTE_F .)
    NEQUALS         reduce using rule 88 (f -> CTE_F .)
    AND             reduce using rule 88 (f -> CTE_F .)
    OR              reduce using rule 88 (f -> CTE_F .)
    COMMA           reduce using rule 88 (f -> CTE_F .)
    RPAREN          reduce using rule 88 (f -> CTE_F .)
    RBRACK          reduce using rule 88 (f -> CTE_F .)
    SCOLON          reduce using rule 88 (f -> CTE_F .)
    TO              reduce using rule 88 (f -> CTE_F .)
    DO              reduce using rule 88 (f -> CTE_F .)


state 138

    (89) f -> CTE_C .

    MULT            reduce using rule 89 (f -> CTE_C .)
    DIV             reduce using rule 89 (f -> CTE_C .)
    PLUS            reduce using rule 89 (f -> CTE_C .)
    MINUS           reduce using rule 89 (f -> CTE_C .)
    LT              reduce using rule 89 (f -> CTE_C .)
    GT              reduce using rule 89 (f -> CTE_C .)
    EQUALS          reduce using rule 89 (f -> CTE_C .)
    NEQUALS         reduce using rule 89 (f -> CTE_C .)
    AND             reduce using rule 89 (f -> CTE_C .)
    OR              reduce using rule 89 (f -> CTE_C .)
    COMMA           reduce using rule 89 (f -> CTE_C .)
    RPAREN          reduce using rule 89 (f -> CTE_C .)
    RBRACK          reduce using rule 89 (f -> CTE_C .)
    SCOLON          reduce using rule 89 (f -> CTE_C .)
    TO              reduce using rule 89 (f -> CTE_C .)
    DO              reduce using rule 89 (f -> CTE_C .)


state 139

    (90) f -> llamada .

    MULT            reduce using rule 90 (f -> llamada .)
    DIV             reduce using rule 90 (f -> llamada .)
    PLUS            reduce using rule 90 (f -> llamada .)
    MINUS           reduce using rule 90 (f -> llamada .)
    LT              reduce using rule 90 (f -> llamada .)
    GT              reduce using rule 90 (f -> llamada .)
    EQUALS          reduce using rule 90 (f -> llamada .)
    NEQUALS         reduce using rule 90 (f -> llamada .)
    AND             reduce using rule 90 (f -> llamada .)
    OR              reduce using rule 90 (f -> llamada .)
    COMMA           reduce using rule 90 (f -> llamada .)
    RPAREN          reduce using rule 90 (f -> llamada .)
    RBRACK          reduce using rule 90 (f -> llamada .)
    SCOLON          reduce using rule 90 (f -> llamada .)
    TO              reduce using rule 90 (f -> llamada .)
    DO              reduce using rule 90 (f -> llamada .)


state 140

    (91) f -> idCall .

    MULT            reduce using rule 91 (f -> idCall .)
    DIV             reduce using rule 91 (f -> idCall .)
    PLUS            reduce using rule 91 (f -> idCall .)
    MINUS           reduce using rule 91 (f -> idCall .)
    LT              reduce using rule 91 (f -> idCall .)
    GT              reduce using rule 91 (f -> idCall .)
    EQUALS          reduce using rule 91 (f -> idCall .)
    NEQUALS         reduce using rule 91 (f -> idCall .)
    AND             reduce using rule 91 (f -> idCall .)
    OR              reduce using rule 91 (f -> idCall .)
    COMMA           reduce using rule 91 (f -> idCall .)
    RPAREN          reduce using rule 91 (f -> idCall .)
    RBRACK          reduce using rule 91 (f -> idCall .)
    SCOLON          reduce using rule 91 (f -> idCall .)
    TO              reduce using rule 91 (f -> idCall .)
    DO              reduce using rule 91 (f -> idCall .)


state 141

    (20) idCall -> ID LBRACK exp . RBRACK
    (21) idCall -> ID LBRACK exp . RBRACK LBRACK exp RBRACK

    RBRACK          shift and go to state 169


state 142

    (1) program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba .

    $end            reduce using rule 1 (program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba .)


state 143

    (51) asignacion -> idCall ASIGNA exp .

    SCOLON          reduce using rule 51 (asignacion -> idCall ASIGNA exp .)


state 144

    (58) returnf -> RETURN LPAREN exp . RPAREN

    RPAREN          shift and go to state 170


state 145

    (59) lectura -> READ LPAREN listaId . RPAREN

    RPAREN          shift and go to state 171


state 146

    (60) listaId -> idCall .
    (61) listaId -> idCall . COMMA listaId

    RPAREN          reduce using rule 60 (listaId -> idCall .)
    COMMA           shift and go to state 172


state 147

    (62) escritura -> WRITE LPAREN exp . lextra RPAREN
    (64) lextra -> . COMMA exp lextra
    (65) lextra -> . COMMA LETRERO lextra
    (66) lextra -> . empty
    (92) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 92 (empty -> .)

    lextra                         shift and go to state 173
    empty                          shift and go to state 175

state 148

    (63) escritura -> WRITE LPAREN LETRERO . lextra RPAREN
    (64) lextra -> . COMMA exp lextra
    (65) lextra -> . COMMA LETRERO lextra
    (66) lextra -> . empty
    (92) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 92 (empty -> .)

    lextra                         shift and go to state 176
    empty                          shift and go to state 175

state 149

    (67) condicion -> IF LPAREN exp . RPAREN THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> IF LPAREN exp . RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE

    RPAREN          shift and go to state 177


state 150

    (69) cond_w -> WHILE LPAREN exp . RPAREN DO LBRACE listaEstatutos RBRACE

    RPAREN          shift and go to state 178


state 151

    (70) cond_f -> FOR idCall ASIGNA . exp TO exp DO LBRACE listaEstatutos RBRACE
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    idCall                         shift and go to state 140
    exp                            shift and go to state 179
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139

state 152

    (19) idCall -> ID DOT . ID

    ID              shift and go to state 180


state 153

    (38) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos . RBRACE definFunc

    RBRACE          shift and go to state 181


state 154

    (26) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE . listaEstatutos RBRACE declarMethods
    (41) listaEstatutos -> . estatutos listaEstatutos
    (42) listaEstatutos -> . empty
    (43) estatutos -> . llamada SCOLON
    (44) estatutos -> . asignacion SCOLON
    (45) estatutos -> . returnf SCOLON
    (46) estatutos -> . lectura SCOLON
    (47) estatutos -> . escritura SCOLON
    (48) estatutos -> . condicion
    (49) estatutos -> . cond_w
    (50) estatutos -> . cond_f
    (92) empty -> .
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (51) asignacion -> . idCall ASIGNA exp
    (58) returnf -> . RETURN LPAREN exp RPAREN
    (59) lectura -> . READ LPAREN listaId RPAREN
    (62) escritura -> . WRITE LPAREN exp lextra RPAREN
    (63) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (67) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (69) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (70) cond_f -> . FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 92 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 94
    READ            shift and go to state 95
    WRITE           shift and go to state 96
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FOR             shift and go to state 99

    listaEstatutos                 shift and go to state 182
    estatutos                      shift and go to state 83
    empty                          shift and go to state 84
    llamada                        shift and go to state 85
    asignacion                     shift and go to state 86
    returnf                        shift and go to state 87
    lectura                        shift and go to state 88
    escritura                      shift and go to state 89
    condicion                      shift and go to state 90
    cond_w                         shift and go to state 91
    cond_f                         shift and go to state 92
    idCall                         shift and go to state 93

state 155

    (52) llamada -> ID DOT ID LPAREN . enviaParam RPAREN
    (54) enviaParam -> . paramReferencia
    (55) enviaParam -> . empty
    (56) paramReferencia -> . exp
    (57) paramReferencia -> . exp COMMA paramReferencia
    (92) empty -> .
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RPAREN          reduce using rule 92 (empty -> .)
    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    enviaParam                     shift and go to state 183
    paramReferencia                shift and go to state 128
    empty                          shift and go to state 129
    exp                            shift and go to state 130
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 156

    (86) f -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 184


state 157

    (53) llamada -> ID LPAREN enviaParam RPAREN .

    SCOLON          reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    MULT            reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    DIV             reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    PLUS            reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    MINUS           reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    LT              reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    GT              reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    EQUALS          reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    NEQUALS         reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    AND             reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    OR              reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    COMMA           reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    RPAREN          reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    RBRACK          reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    TO              reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)
    DO              reduce using rule 53 (llamada -> ID LPAREN enviaParam RPAREN .)


state 158

    (57) paramReferencia -> exp COMMA . paramReferencia
    (56) paramReferencia -> . exp
    (57) paramReferencia -> . exp COMMA paramReferencia
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    exp                            shift and go to state 130
    paramReferencia                shift and go to state 185
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 159

    (72) exp -> texp OR . exp
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    texp                           shift and go to state 131
    exp                            shift and go to state 186
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 160

    (74) texp -> gexp AND . texp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    gexp                           shift and go to state 132
    texp                           shift and go to state 187
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 161

    (76) gexp -> mexp LT . mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    mexp                           shift and go to state 188
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 162

    (77) gexp -> mexp GT . mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    mexp                           shift and go to state 189
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 163

    (78) gexp -> mexp EQUALS . mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    mexp                           shift and go to state 190
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 164

    (79) gexp -> mexp NEQUALS . mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    mexp                           shift and go to state 191
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 165

    (81) mexp -> t PLUS . mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    t                              shift and go to state 134
    mexp                           shift and go to state 192
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 166

    (82) mexp -> t MINUS . mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    t                              shift and go to state 134
    mexp                           shift and go to state 193
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 167

    (84) t -> f MULT . t
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    f                              shift and go to state 135
    t                              shift and go to state 194
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 168

    (85) t -> f DIV . t
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    f                              shift and go to state 135
    t                              shift and go to state 195
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 169

    (20) idCall -> ID LBRACK exp RBRACK .
    (21) idCall -> ID LBRACK exp RBRACK . LBRACK exp RBRACK

    ASIGNA          reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    MULT            reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    DIV             reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    PLUS            reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    MINUS           reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    LT              reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    GT              reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    EQUALS          reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    NEQUALS         reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    AND             reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    OR              reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    COMMA           reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    RPAREN          reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    RBRACK          reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    SCOLON          reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    TO              reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    DO              reduce using rule 20 (idCall -> ID LBRACK exp RBRACK .)
    LBRACK          shift and go to state 196


state 170

    (58) returnf -> RETURN LPAREN exp RPAREN .

    SCOLON          reduce using rule 58 (returnf -> RETURN LPAREN exp RPAREN .)


state 171

    (59) lectura -> READ LPAREN listaId RPAREN .

    SCOLON          reduce using rule 59 (lectura -> READ LPAREN listaId RPAREN .)


state 172

    (61) listaId -> idCall COMMA . listaId
    (60) listaId -> . idCall
    (61) listaId -> . idCall COMMA listaId
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    ID              shift and go to state 122

    idCall                         shift and go to state 146
    listaId                        shift and go to state 197

state 173

    (62) escritura -> WRITE LPAREN exp lextra . RPAREN

    RPAREN          shift and go to state 198


state 174

    (64) lextra -> COMMA . exp lextra
    (65) lextra -> COMMA . LETRERO lextra
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LETRERO         shift and go to state 200
    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    exp                            shift and go to state 199
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 175

    (66) lextra -> empty .

    RPAREN          reduce using rule 66 (lextra -> empty .)


state 176

    (63) escritura -> WRITE LPAREN LETRERO lextra . RPAREN

    RPAREN          shift and go to state 201


state 177

    (67) condicion -> IF LPAREN exp RPAREN . THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> IF LPAREN exp RPAREN . THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE

    THEN            shift and go to state 202


state 178

    (69) cond_w -> WHILE LPAREN exp RPAREN . DO LBRACE listaEstatutos RBRACE

    DO              shift and go to state 203


state 179

    (70) cond_f -> FOR idCall ASIGNA exp . TO exp DO LBRACE listaEstatutos RBRACE

    TO              shift and go to state 204


state 180

    (19) idCall -> ID DOT ID .

    ASIGNA          reduce using rule 19 (idCall -> ID DOT ID .)
    COMMA           reduce using rule 19 (idCall -> ID DOT ID .)
    RPAREN          reduce using rule 19 (idCall -> ID DOT ID .)


state 181

    (38) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE . definFunc
    (38) definFunc -> . tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc
    (39) definFunc -> . empty
    (28) tipoMethod -> . VOID
    (29) tipoMethod -> . INT
    (30) tipoMethod -> . FLOAT
    (31) tipoMethod -> . CHAR
    (92) empty -> .

    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    MAIN            reduce using rule 92 (empty -> .)

    tipoMethod                     shift and go to state 26
    definFunc                      shift and go to state 205
    empty                          shift and go to state 27

state 182

    (26) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos . RBRACE declarMethods

    RBRACE          shift and go to state 206


state 183

    (52) llamada -> ID DOT ID LPAREN enviaParam . RPAREN

    RPAREN          shift and go to state 207


state 184

    (86) f -> LPAREN exp RPAREN .

    MULT            reduce using rule 86 (f -> LPAREN exp RPAREN .)
    DIV             reduce using rule 86 (f -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 86 (f -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 86 (f -> LPAREN exp RPAREN .)
    LT              reduce using rule 86 (f -> LPAREN exp RPAREN .)
    GT              reduce using rule 86 (f -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 86 (f -> LPAREN exp RPAREN .)
    NEQUALS         reduce using rule 86 (f -> LPAREN exp RPAREN .)
    AND             reduce using rule 86 (f -> LPAREN exp RPAREN .)
    OR              reduce using rule 86 (f -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 86 (f -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 86 (f -> LPAREN exp RPAREN .)
    RBRACK          reduce using rule 86 (f -> LPAREN exp RPAREN .)
    SCOLON          reduce using rule 86 (f -> LPAREN exp RPAREN .)
    TO              reduce using rule 86 (f -> LPAREN exp RPAREN .)
    DO              reduce using rule 86 (f -> LPAREN exp RPAREN .)


state 185

    (57) paramReferencia -> exp COMMA paramReferencia .

    RPAREN          reduce using rule 57 (paramReferencia -> exp COMMA paramReferencia .)


state 186

    (72) exp -> texp OR exp .

    COMMA           reduce using rule 72 (exp -> texp OR exp .)
    RPAREN          reduce using rule 72 (exp -> texp OR exp .)
    RBRACK          reduce using rule 72 (exp -> texp OR exp .)
    SCOLON          reduce using rule 72 (exp -> texp OR exp .)
    TO              reduce using rule 72 (exp -> texp OR exp .)
    DO              reduce using rule 72 (exp -> texp OR exp .)


state 187

    (74) texp -> gexp AND texp .

    OR              reduce using rule 74 (texp -> gexp AND texp .)
    COMMA           reduce using rule 74 (texp -> gexp AND texp .)
    RPAREN          reduce using rule 74 (texp -> gexp AND texp .)
    RBRACK          reduce using rule 74 (texp -> gexp AND texp .)
    SCOLON          reduce using rule 74 (texp -> gexp AND texp .)
    TO              reduce using rule 74 (texp -> gexp AND texp .)
    DO              reduce using rule 74 (texp -> gexp AND texp .)


state 188

    (76) gexp -> mexp LT mexp .

    AND             reduce using rule 76 (gexp -> mexp LT mexp .)
    OR              reduce using rule 76 (gexp -> mexp LT mexp .)
    COMMA           reduce using rule 76 (gexp -> mexp LT mexp .)
    RPAREN          reduce using rule 76 (gexp -> mexp LT mexp .)
    RBRACK          reduce using rule 76 (gexp -> mexp LT mexp .)
    SCOLON          reduce using rule 76 (gexp -> mexp LT mexp .)
    TO              reduce using rule 76 (gexp -> mexp LT mexp .)
    DO              reduce using rule 76 (gexp -> mexp LT mexp .)


state 189

    (77) gexp -> mexp GT mexp .

    AND             reduce using rule 77 (gexp -> mexp GT mexp .)
    OR              reduce using rule 77 (gexp -> mexp GT mexp .)
    COMMA           reduce using rule 77 (gexp -> mexp GT mexp .)
    RPAREN          reduce using rule 77 (gexp -> mexp GT mexp .)
    RBRACK          reduce using rule 77 (gexp -> mexp GT mexp .)
    SCOLON          reduce using rule 77 (gexp -> mexp GT mexp .)
    TO              reduce using rule 77 (gexp -> mexp GT mexp .)
    DO              reduce using rule 77 (gexp -> mexp GT mexp .)


state 190

    (78) gexp -> mexp EQUALS mexp .

    AND             reduce using rule 78 (gexp -> mexp EQUALS mexp .)
    OR              reduce using rule 78 (gexp -> mexp EQUALS mexp .)
    COMMA           reduce using rule 78 (gexp -> mexp EQUALS mexp .)
    RPAREN          reduce using rule 78 (gexp -> mexp EQUALS mexp .)
    RBRACK          reduce using rule 78 (gexp -> mexp EQUALS mexp .)
    SCOLON          reduce using rule 78 (gexp -> mexp EQUALS mexp .)
    TO              reduce using rule 78 (gexp -> mexp EQUALS mexp .)
    DO              reduce using rule 78 (gexp -> mexp EQUALS mexp .)


state 191

    (79) gexp -> mexp NEQUALS mexp .

    AND             reduce using rule 79 (gexp -> mexp NEQUALS mexp .)
    OR              reduce using rule 79 (gexp -> mexp NEQUALS mexp .)
    COMMA           reduce using rule 79 (gexp -> mexp NEQUALS mexp .)
    RPAREN          reduce using rule 79 (gexp -> mexp NEQUALS mexp .)
    RBRACK          reduce using rule 79 (gexp -> mexp NEQUALS mexp .)
    SCOLON          reduce using rule 79 (gexp -> mexp NEQUALS mexp .)
    TO              reduce using rule 79 (gexp -> mexp NEQUALS mexp .)
    DO              reduce using rule 79 (gexp -> mexp NEQUALS mexp .)


state 192

    (81) mexp -> t PLUS mexp .

    LT              reduce using rule 81 (mexp -> t PLUS mexp .)
    GT              reduce using rule 81 (mexp -> t PLUS mexp .)
    EQUALS          reduce using rule 81 (mexp -> t PLUS mexp .)
    NEQUALS         reduce using rule 81 (mexp -> t PLUS mexp .)
    AND             reduce using rule 81 (mexp -> t PLUS mexp .)
    OR              reduce using rule 81 (mexp -> t PLUS mexp .)
    COMMA           reduce using rule 81 (mexp -> t PLUS mexp .)
    RPAREN          reduce using rule 81 (mexp -> t PLUS mexp .)
    RBRACK          reduce using rule 81 (mexp -> t PLUS mexp .)
    SCOLON          reduce using rule 81 (mexp -> t PLUS mexp .)
    TO              reduce using rule 81 (mexp -> t PLUS mexp .)
    DO              reduce using rule 81 (mexp -> t PLUS mexp .)


state 193

    (82) mexp -> t MINUS mexp .

    LT              reduce using rule 82 (mexp -> t MINUS mexp .)
    GT              reduce using rule 82 (mexp -> t MINUS mexp .)
    EQUALS          reduce using rule 82 (mexp -> t MINUS mexp .)
    NEQUALS         reduce using rule 82 (mexp -> t MINUS mexp .)
    AND             reduce using rule 82 (mexp -> t MINUS mexp .)
    OR              reduce using rule 82 (mexp -> t MINUS mexp .)
    COMMA           reduce using rule 82 (mexp -> t MINUS mexp .)
    RPAREN          reduce using rule 82 (mexp -> t MINUS mexp .)
    RBRACK          reduce using rule 82 (mexp -> t MINUS mexp .)
    SCOLON          reduce using rule 82 (mexp -> t MINUS mexp .)
    TO              reduce using rule 82 (mexp -> t MINUS mexp .)
    DO              reduce using rule 82 (mexp -> t MINUS mexp .)


state 194

    (84) t -> f MULT t .

    PLUS            reduce using rule 84 (t -> f MULT t .)
    MINUS           reduce using rule 84 (t -> f MULT t .)
    LT              reduce using rule 84 (t -> f MULT t .)
    GT              reduce using rule 84 (t -> f MULT t .)
    EQUALS          reduce using rule 84 (t -> f MULT t .)
    NEQUALS         reduce using rule 84 (t -> f MULT t .)
    AND             reduce using rule 84 (t -> f MULT t .)
    OR              reduce using rule 84 (t -> f MULT t .)
    COMMA           reduce using rule 84 (t -> f MULT t .)
    RPAREN          reduce using rule 84 (t -> f MULT t .)
    RBRACK          reduce using rule 84 (t -> f MULT t .)
    SCOLON          reduce using rule 84 (t -> f MULT t .)
    TO              reduce using rule 84 (t -> f MULT t .)
    DO              reduce using rule 84 (t -> f MULT t .)


state 195

    (85) t -> f DIV t .

    PLUS            reduce using rule 85 (t -> f DIV t .)
    MINUS           reduce using rule 85 (t -> f DIV t .)
    LT              reduce using rule 85 (t -> f DIV t .)
    GT              reduce using rule 85 (t -> f DIV t .)
    EQUALS          reduce using rule 85 (t -> f DIV t .)
    NEQUALS         reduce using rule 85 (t -> f DIV t .)
    AND             reduce using rule 85 (t -> f DIV t .)
    OR              reduce using rule 85 (t -> f DIV t .)
    COMMA           reduce using rule 85 (t -> f DIV t .)
    RPAREN          reduce using rule 85 (t -> f DIV t .)
    RBRACK          reduce using rule 85 (t -> f DIV t .)
    SCOLON          reduce using rule 85 (t -> f DIV t .)
    TO              reduce using rule 85 (t -> f DIV t .)
    DO              reduce using rule 85 (t -> f DIV t .)


state 196

    (21) idCall -> ID LBRACK exp RBRACK LBRACK . exp RBRACK
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    exp                            shift and go to state 208
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139
    idCall                         shift and go to state 140

state 197

    (61) listaId -> idCall COMMA listaId .

    RPAREN          reduce using rule 61 (listaId -> idCall COMMA listaId .)


state 198

    (62) escritura -> WRITE LPAREN exp lextra RPAREN .

    SCOLON          reduce using rule 62 (escritura -> WRITE LPAREN exp lextra RPAREN .)


state 199

    (64) lextra -> COMMA exp . lextra
    (64) lextra -> . COMMA exp lextra
    (65) lextra -> . COMMA LETRERO lextra
    (66) lextra -> . empty
    (92) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 92 (empty -> .)

    lextra                         shift and go to state 209
    empty                          shift and go to state 175

state 200

    (65) lextra -> COMMA LETRERO . lextra
    (64) lextra -> . COMMA exp lextra
    (65) lextra -> . COMMA LETRERO lextra
    (66) lextra -> . empty
    (92) empty -> .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 92 (empty -> .)

    lextra                         shift and go to state 210
    empty                          shift and go to state 175

state 201

    (63) escritura -> WRITE LPAREN LETRERO lextra RPAREN .

    SCOLON          reduce using rule 63 (escritura -> WRITE LPAREN LETRERO lextra RPAREN .)


state 202

    (67) condicion -> IF LPAREN exp RPAREN THEN . LBRACE listaEstatutos RBRACE
    (68) condicion -> IF LPAREN exp RPAREN THEN . LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 211


state 203

    (69) cond_w -> WHILE LPAREN exp RPAREN DO . LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 212


state 204

    (70) cond_f -> FOR idCall ASIGNA exp TO . exp DO LBRACE listaEstatutos RBRACE
    (71) exp -> . texp
    (72) exp -> . texp OR exp
    (73) texp -> . gexp
    (74) texp -> . gexp AND texp
    (75) gexp -> . mexp
    (76) gexp -> . mexp LT mexp
    (77) gexp -> . mexp GT mexp
    (78) gexp -> . mexp EQUALS mexp
    (79) gexp -> . mexp NEQUALS mexp
    (80) mexp -> . t
    (81) mexp -> . t PLUS mexp
    (82) mexp -> . t MINUS mexp
    (83) t -> . f
    (84) t -> . f MULT t
    (85) t -> . f DIV t
    (86) f -> . LPAREN exp RPAREN
    (87) f -> . CTE_I
    (88) f -> . CTE_F
    (89) f -> . CTE_C
    (90) f -> . llamada
    (91) f -> . idCall
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 126
    CTE_I           shift and go to state 136
    CTE_F           shift and go to state 137
    CTE_C           shift and go to state 138
    ID              shift and go to state 81

    idCall                         shift and go to state 140
    exp                            shift and go to state 213
    texp                           shift and go to state 131
    gexp                           shift and go to state 132
    mexp                           shift and go to state 133
    t                              shift and go to state 134
    f                              shift and go to state 135
    llamada                        shift and go to state 139

state 205

    (38) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc .

    MAIN            reduce using rule 38 (definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc .)


state 206

    (26) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE . declarMethods
    (26) declarMethods -> . tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (27) declarMethods -> . empty
    (28) tipoMethod -> . VOID
    (29) tipoMethod -> . INT
    (30) tipoMethod -> . FLOAT
    (31) tipoMethod -> . CHAR
    (92) empty -> .

    VOID            shift and go to state 28
    INT             shift and go to state 29
    FLOAT           shift and go to state 30
    CHAR            shift and go to state 31
    RBRACE          reduce using rule 92 (empty -> .)

    tipoMethod                     shift and go to state 57
    declarMethods                  shift and go to state 214
    empty                          shift and go to state 58

state 207

    (52) llamada -> ID DOT ID LPAREN enviaParam RPAREN .

    SCOLON          reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    MULT            reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    DIV             reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    PLUS            reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    MINUS           reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    LT              reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    GT              reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    EQUALS          reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    NEQUALS         reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    AND             reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    OR              reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    COMMA           reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    RPAREN          reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    RBRACK          reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    TO              reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    DO              reduce using rule 52 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)


state 208

    (21) idCall -> ID LBRACK exp RBRACK LBRACK exp . RBRACK

    RBRACK          shift and go to state 215


state 209

    (64) lextra -> COMMA exp lextra .

    RPAREN          reduce using rule 64 (lextra -> COMMA exp lextra .)


state 210

    (65) lextra -> COMMA LETRERO lextra .

    RPAREN          reduce using rule 65 (lextra -> COMMA LETRERO lextra .)


state 211

    (67) condicion -> IF LPAREN exp RPAREN THEN LBRACE . listaEstatutos RBRACE
    (68) condicion -> IF LPAREN exp RPAREN THEN LBRACE . listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (41) listaEstatutos -> . estatutos listaEstatutos
    (42) listaEstatutos -> . empty
    (43) estatutos -> . llamada SCOLON
    (44) estatutos -> . asignacion SCOLON
    (45) estatutos -> . returnf SCOLON
    (46) estatutos -> . lectura SCOLON
    (47) estatutos -> . escritura SCOLON
    (48) estatutos -> . condicion
    (49) estatutos -> . cond_w
    (50) estatutos -> . cond_f
    (92) empty -> .
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (51) asignacion -> . idCall ASIGNA exp
    (58) returnf -> . RETURN LPAREN exp RPAREN
    (59) lectura -> . READ LPAREN listaId RPAREN
    (62) escritura -> . WRITE LPAREN exp lextra RPAREN
    (63) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (67) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (69) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (70) cond_f -> . FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 92 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 94
    READ            shift and go to state 95
    WRITE           shift and go to state 96
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FOR             shift and go to state 99

    listaEstatutos                 shift and go to state 216
    estatutos                      shift and go to state 83
    empty                          shift and go to state 84
    llamada                        shift and go to state 85
    asignacion                     shift and go to state 86
    returnf                        shift and go to state 87
    lectura                        shift and go to state 88
    escritura                      shift and go to state 89
    condicion                      shift and go to state 90
    cond_w                         shift and go to state 91
    cond_f                         shift and go to state 92
    idCall                         shift and go to state 93

state 212

    (69) cond_w -> WHILE LPAREN exp RPAREN DO LBRACE . listaEstatutos RBRACE
    (41) listaEstatutos -> . estatutos listaEstatutos
    (42) listaEstatutos -> . empty
    (43) estatutos -> . llamada SCOLON
    (44) estatutos -> . asignacion SCOLON
    (45) estatutos -> . returnf SCOLON
    (46) estatutos -> . lectura SCOLON
    (47) estatutos -> . escritura SCOLON
    (48) estatutos -> . condicion
    (49) estatutos -> . cond_w
    (50) estatutos -> . cond_f
    (92) empty -> .
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (51) asignacion -> . idCall ASIGNA exp
    (58) returnf -> . RETURN LPAREN exp RPAREN
    (59) lectura -> . READ LPAREN listaId RPAREN
    (62) escritura -> . WRITE LPAREN exp lextra RPAREN
    (63) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (67) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (69) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (70) cond_f -> . FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 92 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 94
    READ            shift and go to state 95
    WRITE           shift and go to state 96
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FOR             shift and go to state 99

    listaEstatutos                 shift and go to state 217
    estatutos                      shift and go to state 83
    empty                          shift and go to state 84
    llamada                        shift and go to state 85
    asignacion                     shift and go to state 86
    returnf                        shift and go to state 87
    lectura                        shift and go to state 88
    escritura                      shift and go to state 89
    condicion                      shift and go to state 90
    cond_w                         shift and go to state 91
    cond_f                         shift and go to state 92
    idCall                         shift and go to state 93

state 213

    (70) cond_f -> FOR idCall ASIGNA exp TO exp . DO LBRACE listaEstatutos RBRACE

    DO              shift and go to state 218


state 214

    (26) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods .

    RBRACE          reduce using rule 26 (declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods .)


state 215

    (21) idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .

    ASIGNA          reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    MULT            reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    DIV             reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    PLUS            reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    MINUS           reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    LT              reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    GT              reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    EQUALS          reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    NEQUALS         reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    AND             reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    OR              reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    COMMA           reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    RPAREN          reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    RBRACK          reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    SCOLON          reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    TO              reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    DO              reduce using rule 21 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)


state 216

    (67) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos . RBRACE
    (68) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos . RBRACE ELSE LBRACE listaEstatutos RBRACE

    RBRACE          shift and go to state 219


state 217

    (69) cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos . RBRACE

    RBRACE          shift and go to state 220


state 218

    (70) cond_f -> FOR idCall ASIGNA exp TO exp DO . LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 221


state 219

    (67) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .
    (68) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE . ELSE LBRACE listaEstatutos RBRACE

    ID              reduce using rule 67 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 67 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 67 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 67 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 67 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 67 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 67 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 67 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    ELSE            shift and go to state 222


state 220

    (69) cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .

    ID              reduce using rule 69 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 69 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 69 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 69 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 69 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 69 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 69 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 69 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)


state 221

    (70) cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE . listaEstatutos RBRACE
    (41) listaEstatutos -> . estatutos listaEstatutos
    (42) listaEstatutos -> . empty
    (43) estatutos -> . llamada SCOLON
    (44) estatutos -> . asignacion SCOLON
    (45) estatutos -> . returnf SCOLON
    (46) estatutos -> . lectura SCOLON
    (47) estatutos -> . escritura SCOLON
    (48) estatutos -> . condicion
    (49) estatutos -> . cond_w
    (50) estatutos -> . cond_f
    (92) empty -> .
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (51) asignacion -> . idCall ASIGNA exp
    (58) returnf -> . RETURN LPAREN exp RPAREN
    (59) lectura -> . READ LPAREN listaId RPAREN
    (62) escritura -> . WRITE LPAREN exp lextra RPAREN
    (63) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (67) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (69) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (70) cond_f -> . FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 92 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 94
    READ            shift and go to state 95
    WRITE           shift and go to state 96
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FOR             shift and go to state 99

    idCall                         shift and go to state 93
    listaEstatutos                 shift and go to state 223
    estatutos                      shift and go to state 83
    empty                          shift and go to state 84
    llamada                        shift and go to state 85
    asignacion                     shift and go to state 86
    returnf                        shift and go to state 87
    lectura                        shift and go to state 88
    escritura                      shift and go to state 89
    condicion                      shift and go to state 90
    cond_w                         shift and go to state 91
    cond_f                         shift and go to state 92

state 222

    (68) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE . LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 224


state 223

    (70) cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos . RBRACE

    RBRACE          shift and go to state 225


state 224

    (68) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE . listaEstatutos RBRACE
    (41) listaEstatutos -> . estatutos listaEstatutos
    (42) listaEstatutos -> . empty
    (43) estatutos -> . llamada SCOLON
    (44) estatutos -> . asignacion SCOLON
    (45) estatutos -> . returnf SCOLON
    (46) estatutos -> . lectura SCOLON
    (47) estatutos -> . escritura SCOLON
    (48) estatutos -> . condicion
    (49) estatutos -> . cond_w
    (50) estatutos -> . cond_f
    (92) empty -> .
    (52) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (53) llamada -> . ID LPAREN enviaParam RPAREN
    (51) asignacion -> . idCall ASIGNA exp
    (58) returnf -> . RETURN LPAREN exp RPAREN
    (59) lectura -> . READ LPAREN listaId RPAREN
    (62) escritura -> . WRITE LPAREN exp lextra RPAREN
    (63) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (67) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (69) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (70) cond_f -> . FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE
    (18) idCall -> . ID
    (19) idCall -> . ID DOT ID
    (20) idCall -> . ID LBRACK exp RBRACK
    (21) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 92 (empty -> .)
    ID              shift and go to state 81
    RETURN          shift and go to state 94
    READ            shift and go to state 95
    WRITE           shift and go to state 96
    IF              shift and go to state 97
    WHILE           shift and go to state 98
    FOR             shift and go to state 99

    listaEstatutos                 shift and go to state 226
    estatutos                      shift and go to state 83
    empty                          shift and go to state 84
    llamada                        shift and go to state 85
    asignacion                     shift and go to state 86
    returnf                        shift and go to state 87
    lectura                        shift and go to state 88
    escritura                      shift and go to state 89
    condicion                      shift and go to state 90
    cond_w                         shift and go to state 91
    cond_f                         shift and go to state 92
    idCall                         shift and go to state 93

state 225

    (70) cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE .

    ID              reduce using rule 70 (cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 70 (cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 70 (cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 70 (cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 70 (cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 70 (cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 70 (cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 70 (cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE .)


state 226

    (68) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos . RBRACE

    RBRACE          shift and go to state 227


state 227

    (68) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .

    ID              reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)

