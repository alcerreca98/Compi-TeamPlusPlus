Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    QUOTE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba
Rule 2     prueba -> <empty>
Rule 3     initProg -> <empty>
Rule 4     auxMain -> <empty>
Rule 5     declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
Rule 6     declarClases -> empty
Rule 7     herencia -> LT EXTENDS ID GT
Rule 8     herencia -> empty
Rule 9     declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes
Rule 10    declarAttributes -> empty
Rule 11    listaIdDeclare -> idDeclare
Rule 12    listaIdDeclare -> idDeclare COMMA listaIdDeclare
Rule 13    idDeclare -> ID
Rule 14    idDeclare -> ID LBRACK CTE_I RBRACK
Rule 15    idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK
Rule 16    idCall -> ID
Rule 17    idCall -> ID DOT ID
Rule 18    idCall -> ID LBRACK exp RBRACK
Rule 19    idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK
Rule 20    tipo -> ID
Rule 21    tipo -> INT
Rule 22    tipo -> FLOAT
Rule 23    tipo -> CHAR
Rule 24    declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
Rule 25    declarMethods -> empty
Rule 26    tipoMethod -> VOID
Rule 27    tipoMethod -> INT
Rule 28    tipoMethod -> FLOAT
Rule 29    tipoMethod -> CHAR
Rule 30    listaParam -> param
Rule 31    listaParam -> param COMMA listaParam
Rule 32    listaParam -> empty
Rule 33    param -> tipo COLON ID
Rule 34    declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar
Rule 35    declarVar -> empty
Rule 36    definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc
Rule 37    definFunc -> empty
Rule 38    auxFuncion -> <empty>
Rule 39    listaEstatutos -> estatutos listaEstatutos
Rule 40    listaEstatutos -> empty
Rule 41    estatutos -> llamada SCOLON
Rule 42    estatutos -> asignacion SCOLON
Rule 43    estatutos -> returnf SCOLON
Rule 44    estatutos -> lectura SCOLON
Rule 45    estatutos -> escritura SCOLON
Rule 46    estatutos -> condicion
Rule 47    estatutos -> cond_w
Rule 48    estatutos -> cond_f
Rule 49    asignacion -> idCall ASIGNA pushPoper exp asignStep2
Rule 50    asignStep2 -> <empty>
Rule 51    llamada -> ID DOT ID LPAREN enviaParam RPAREN
Rule 52    llamada -> ID LPAREN enviaParam RPAREN
Rule 53    enviaParam -> paramReferencia
Rule 54    enviaParam -> empty
Rule 55    paramReferencia -> exp
Rule 56    paramReferencia -> exp COMMA paramReferencia
Rule 57    returnf -> RETURN LPAREN exp RPAREN
Rule 58    lectura -> READ pushPoper LPAREN listaId RPAREN
Rule 59    listaId -> idCall popIO
Rule 60    listaId -> idCall COMMA popIO insertOpRead listaId
Rule 61    insertOpRead -> <empty>
Rule 62    popIO -> <empty>
Rule 63    escritura -> WRITE LPAREN exp lextra RPAREN
Rule 64    escritura -> WRITE LPAREN LETRERO lextra RPAREN
Rule 65    lextra -> COMMA exp lextra
Rule 66    lextra -> COMMA LETRERO lextra
Rule 67    lextra -> empty
Rule 68    condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
Rule 69    condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
Rule 70    cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
Rule 71    cond_f -> FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE
Rule 72    exp -> texp step7
Rule 73    exp -> texp step7 OR pushPoper exp
Rule 74    texp -> gexp step6
Rule 75    texp -> gexp step6 AND pushPoper texp
Rule 76    gexp -> mexp step5
Rule 77    gexp -> mexp step5 LT pushPoper mexp
Rule 78    gexp -> mexp step5 GT pushPoper mexp
Rule 79    gexp -> mexp step5 LTE pushPoper mexp
Rule 80    gexp -> mexp step5 GTE pushPoper mexp
Rule 81    gexp -> mexp step5 EQUALS pushPoper mexp
Rule 82    gexp -> mexp step5 NEQUALS pushPoper mexp
Rule 83    mexp -> t step4
Rule 84    mexp -> t step4 PLUS pushPoper mexp
Rule 85    mexp -> t step4 MINUS pushPoper mexp
Rule 86    t -> f step3
Rule 87    t -> f step3 MULT pushPoper t
Rule 88    t -> f step3 DIV pushPoper t
Rule 89    f -> LPAREN addFF exp RPAREN rmFF
Rule 90    f -> CTE_I step1
Rule 91    f -> CTE_F step1
Rule 92    f -> CTE_C step1
Rule 93    f -> llamada
Rule 94    f -> idCall
Rule 95    step1 -> <empty>
Rule 96    step3 -> <empty>
Rule 97    step4 -> <empty>
Rule 98    step5 -> <empty>
Rule 99    step6 -> <empty>
Rule 100   step7 -> <empty>
Rule 101   addFF -> <empty>
Rule 102   rmFF -> <empty>
Rule 103   pushPoper -> <empty>
Rule 104   empty -> <empty>

Terminals, with rules where they appear

AND                  : 75
ASIGNA               : 49
ATTRIBUTES           : 5
CHAR                 : 23 29
CLASS                : 5
COLON                : 9 33 34
COMMA                : 12 31 56 60 65 66
CTE_C                : 92
CTE_F                : 91
CTE_I                : 14 15 15 90
DIV                  : 88
DO                   : 70 71
DOT                  : 17 51
ELSE                 : 69
EQUALS               : 81
EXTENDS              : 7
FLOAT                : 22 28
FOR                  : 71
FUNC                 : 24 36
GT                   : 7 78
GTE                  : 80
ID                   : 1 5 7 13 14 15 16 17 17 18 19 20 24 33 36 51 51 52
IF                   : 68 69
INT                  : 21 27
LBRACE               : 1 5 24 36 68 69 69 70 71
LBRACK               : 14 15 15 18 19 19
LETRERO              : 64 66
LPAREN               : 1 24 36 51 52 57 58 63 64 68 69 70 89
LT                   : 7 77
LTE                  : 79
MAIN                 : 1
METHODS              : 5
MINUS                : 85
MULT                 : 87
NEQUALS              : 82
OR                   : 73
PLUS                 : 84
PROGRAM              : 1
QUOTE                : 
RBRACE               : 1 5 24 36 68 69 69 70 71
RBRACK               : 14 15 15 18 19 19
READ                 : 58
RETURN               : 57
RPAREN               : 1 24 36 51 52 57 58 63 64 68 69 70 89
SCOLON               : 1 9 34 41 42 43 44 45
THEN                 : 68 69
TO                   : 71
VAR                  : 34
VOID                 : 26
WHILE                : 70
WRITE                : 63 64
error                : 

Nonterminals, with rules where they appear

addFF                : 89
asignStep2           : 49
asignacion           : 42 71
auxFuncion           : 36
auxMain              : 1
cond_f               : 48
cond_w               : 47
condicion            : 46
declarAttributes     : 5 9
declarClases         : 1 5
declarMethods        : 5 24
declarVar            : 1 1 34 36
definFunc            : 1 36
empty                : 6 8 10 25 32 35 37 40 54 67
enviaParam           : 51 52
escritura            : 45
estatutos            : 39
exp                  : 18 19 19 49 55 56 57 63 65 68 69 70 71 73 89
f                    : 86 87 88
gexp                 : 74 75
herencia             : 5
idCall               : 49 59 60 94
idDeclare            : 11 12
initProg             : 1
insertOpRead         : 60
lectura              : 44
lextra               : 63 64 65 66
listaEstatutos       : 1 24 36 39 68 69 69 70 71
listaId              : 58 60
listaIdDeclare       : 9 12 34
listaParam           : 24 31 36
llamada              : 41 93
mexp                 : 76 77 77 78 78 79 79 80 80 81 81 82 82 84 85
param                : 30 31
paramReferencia      : 53 56
popIO                : 59 60
program              : 0
prueba               : 1
pushPoper            : 49 58 73 75 77 78 79 80 81 82 84 85 87 88
returnf              : 43
rmFF                 : 89
step1                : 90 91 92
step3                : 86 87 88
step4                : 83 84 85
step5                : 76 77 78 79 80 81 82
step6                : 74 75
step7                : 72 73
t                    : 83 84 85 87 88
texp                 : 72 73 75
tipo                 : 9 33 34
tipoMethod           : 24 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba
    (3) initProg -> .

    SCOLON          reduce using rule 3 (initProg -> .)

    initProg                       shift and go to state 4

state 4

    (1) program -> PROGRAM ID initProg . SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba

    SCOLON          shift and go to state 5


state 5

    (1) program -> PROGRAM ID initProg SCOLON . declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba
    (5) declarClases -> . CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (6) declarClases -> . empty
    (104) empty -> .

    CLASS           shift and go to state 7
    VAR             reduce using rule 104 (empty -> .)
    VOID            reduce using rule 104 (empty -> .)
    INT             reduce using rule 104 (empty -> .)
    FLOAT           reduce using rule 104 (empty -> .)
    CHAR            reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)

    declarClases                   shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM ID initProg SCOLON declarClases . declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba
    (34) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (35) declarVar -> . empty
    (104) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 104 (empty -> .)
    INT             reduce using rule 104 (empty -> .)
    FLOAT           reduce using rule 104 (empty -> .)
    CHAR            reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)

    declarVar                      shift and go to state 9
    empty                          shift and go to state 11

state 7

    (5) declarClases -> CLASS . ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    ID              shift and go to state 12


state 8

    (6) declarClases -> empty .

    VAR             reduce using rule 6 (declarClases -> empty .)
    VOID            reduce using rule 6 (declarClases -> empty .)
    INT             reduce using rule 6 (declarClases -> empty .)
    FLOAT           reduce using rule 6 (declarClases -> empty .)
    CHAR            reduce using rule 6 (declarClases -> empty .)
    MAIN            reduce using rule 6 (declarClases -> empty .)


state 9

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar . definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba
    (36) definFunc -> . tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc
    (37) definFunc -> . empty
    (26) tipoMethod -> . VOID
    (27) tipoMethod -> . INT
    (28) tipoMethod -> . FLOAT
    (29) tipoMethod -> . CHAR
    (104) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    MAIN            reduce using rule 104 (empty -> .)

    definFunc                      shift and go to state 13
    tipoMethod                     shift and go to state 14
    empty                          shift and go to state 15

state 10

    (34) declarVar -> VAR . tipo COLON listaIdDeclare SCOLON declarVar
    (20) tipo -> . ID
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    tipo                           shift and go to state 20

state 11

    (35) declarVar -> empty .

    VOID            reduce using rule 35 (declarVar -> empty .)
    INT             reduce using rule 35 (declarVar -> empty .)
    FLOAT           reduce using rule 35 (declarVar -> empty .)
    CHAR            reduce using rule 35 (declarVar -> empty .)
    MAIN            reduce using rule 35 (declarVar -> empty .)
    LBRACE          reduce using rule 35 (declarVar -> empty .)


state 12

    (5) declarClases -> CLASS ID . herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (7) herencia -> . LT EXTENDS ID GT
    (8) herencia -> . empty
    (104) empty -> .

    LT              shift and go to state 26
    LBRACE          reduce using rule 104 (empty -> .)

    herencia                       shift and go to state 25
    empty                          shift and go to state 27

state 13

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc . MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba

    MAIN            shift and go to state 28


state 14

    (36) definFunc -> tipoMethod . FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc

    FUNC            shift and go to state 29


state 15

    (37) definFunc -> empty .

    MAIN            reduce using rule 37 (definFunc -> empty .)


state 16

    (26) tipoMethod -> VOID .

    FUNC            reduce using rule 26 (tipoMethod -> VOID .)


state 17

    (27) tipoMethod -> INT .

    FUNC            reduce using rule 27 (tipoMethod -> INT .)


state 18

    (28) tipoMethod -> FLOAT .

    FUNC            reduce using rule 28 (tipoMethod -> FLOAT .)


state 19

    (29) tipoMethod -> CHAR .

    FUNC            reduce using rule 29 (tipoMethod -> CHAR .)


state 20

    (34) declarVar -> VAR tipo . COLON listaIdDeclare SCOLON declarVar

    COLON           shift and go to state 30


state 21

    (20) tipo -> ID .

    COLON           reduce using rule 20 (tipo -> ID .)


state 22

    (21) tipo -> INT .

    COLON           reduce using rule 21 (tipo -> INT .)


state 23

    (22) tipo -> FLOAT .

    COLON           reduce using rule 22 (tipo -> FLOAT .)


state 24

    (23) tipo -> CHAR .

    COLON           reduce using rule 23 (tipo -> CHAR .)


state 25

    (5) declarClases -> CLASS ID herencia . LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    LBRACE          shift and go to state 31


state 26

    (7) herencia -> LT . EXTENDS ID GT

    EXTENDS         shift and go to state 32


state 27

    (8) herencia -> empty .

    LBRACE          reduce using rule 8 (herencia -> empty .)


state 28

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN . auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba
    (4) auxMain -> .

    LPAREN          reduce using rule 4 (auxMain -> .)

    auxMain                        shift and go to state 33

state 29

    (36) definFunc -> tipoMethod FUNC . ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc

    ID              shift and go to state 34


state 30

    (34) declarVar -> VAR tipo COLON . listaIdDeclare SCOLON declarVar
    (11) listaIdDeclare -> . idDeclare
    (12) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (13) idDeclare -> . ID
    (14) idDeclare -> . ID LBRACK CTE_I RBRACK
    (15) idDeclare -> . ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    ID              shift and go to state 37

    listaIdDeclare                 shift and go to state 35
    idDeclare                      shift and go to state 36

state 31

    (5) declarClases -> CLASS ID herencia LBRACE . ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    ATTRIBUTES      shift and go to state 38


state 32

    (7) herencia -> LT EXTENDS . ID GT

    ID              shift and go to state 39


state 33

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain . LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba

    LPAREN          shift and go to state 40


state 34

    (36) definFunc -> tipoMethod FUNC ID . auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc
    (38) auxFuncion -> .

    LPAREN          reduce using rule 38 (auxFuncion -> .)

    auxFuncion                     shift and go to state 41

state 35

    (34) declarVar -> VAR tipo COLON listaIdDeclare . SCOLON declarVar

    SCOLON          shift and go to state 42


state 36

    (11) listaIdDeclare -> idDeclare .
    (12) listaIdDeclare -> idDeclare . COMMA listaIdDeclare

    SCOLON          reduce using rule 11 (listaIdDeclare -> idDeclare .)
    COMMA           shift and go to state 43


state 37

    (13) idDeclare -> ID .
    (14) idDeclare -> ID . LBRACK CTE_I RBRACK
    (15) idDeclare -> ID . LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    COMMA           reduce using rule 13 (idDeclare -> ID .)
    SCOLON          reduce using rule 13 (idDeclare -> ID .)
    LBRACK          shift and go to state 44


state 38

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES . declarAttributes METHODS declarMethods RBRACE declarClases
    (9) declarAttributes -> . tipo COLON listaIdDeclare SCOLON declarAttributes
    (10) declarAttributes -> . empty
    (20) tipo -> . ID
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (104) empty -> .

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    METHODS         reduce using rule 104 (empty -> .)

    declarAttributes               shift and go to state 45
    tipo                           shift and go to state 46
    empty                          shift and go to state 47

state 39

    (7) herencia -> LT EXTENDS ID . GT

    GT              shift and go to state 48


state 40

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN . RPAREN declarVar LBRACE listaEstatutos RBRACE prueba

    RPAREN          shift and go to state 49


state 41

    (36) definFunc -> tipoMethod FUNC ID auxFuncion . LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc

    LPAREN          shift and go to state 50


state 42

    (34) declarVar -> VAR tipo COLON listaIdDeclare SCOLON . declarVar
    (34) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (35) declarVar -> . empty
    (104) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 104 (empty -> .)
    INT             reduce using rule 104 (empty -> .)
    FLOAT           reduce using rule 104 (empty -> .)
    CHAR            reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)
    LBRACE          reduce using rule 104 (empty -> .)

    declarVar                      shift and go to state 51
    empty                          shift and go to state 11

state 43

    (12) listaIdDeclare -> idDeclare COMMA . listaIdDeclare
    (11) listaIdDeclare -> . idDeclare
    (12) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (13) idDeclare -> . ID
    (14) idDeclare -> . ID LBRACK CTE_I RBRACK
    (15) idDeclare -> . ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    ID              shift and go to state 37

    idDeclare                      shift and go to state 36
    listaIdDeclare                 shift and go to state 52

state 44

    (14) idDeclare -> ID LBRACK . CTE_I RBRACK
    (15) idDeclare -> ID LBRACK . CTE_I RBRACK LBRACK CTE_I RBRACK

    CTE_I           shift and go to state 53


state 45

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes . METHODS declarMethods RBRACE declarClases

    METHODS         shift and go to state 54


state 46

    (9) declarAttributes -> tipo . COLON listaIdDeclare SCOLON declarAttributes

    COLON           shift and go to state 55


state 47

    (10) declarAttributes -> empty .

    METHODS         reduce using rule 10 (declarAttributes -> empty .)


state 48

    (7) herencia -> LT EXTENDS ID GT .

    LBRACE          reduce using rule 7 (herencia -> LT EXTENDS ID GT .)


state 49

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN . declarVar LBRACE listaEstatutos RBRACE prueba
    (34) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (35) declarVar -> . empty
    (104) empty -> .

    VAR             shift and go to state 10
    LBRACE          reduce using rule 104 (empty -> .)

    declarVar                      shift and go to state 56
    empty                          shift and go to state 11

state 50

    (36) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN . listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc
    (30) listaParam -> . param
    (31) listaParam -> . param COMMA listaParam
    (32) listaParam -> . empty
    (33) param -> . tipo COLON ID
    (104) empty -> .
    (20) tipo -> . ID
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    RPAREN          reduce using rule 104 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    listaParam                     shift and go to state 57
    param                          shift and go to state 58
    empty                          shift and go to state 59
    tipo                           shift and go to state 60

state 51

    (34) declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .

    VOID            reduce using rule 34 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    INT             reduce using rule 34 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    FLOAT           reduce using rule 34 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    CHAR            reduce using rule 34 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    MAIN            reduce using rule 34 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    LBRACE          reduce using rule 34 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)


state 52

    (12) listaIdDeclare -> idDeclare COMMA listaIdDeclare .

    SCOLON          reduce using rule 12 (listaIdDeclare -> idDeclare COMMA listaIdDeclare .)


state 53

    (14) idDeclare -> ID LBRACK CTE_I . RBRACK
    (15) idDeclare -> ID LBRACK CTE_I . RBRACK LBRACK CTE_I RBRACK

    RBRACK          shift and go to state 61


state 54

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS . declarMethods RBRACE declarClases
    (24) declarMethods -> . tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (25) declarMethods -> . empty
    (26) tipoMethod -> . VOID
    (27) tipoMethod -> . INT
    (28) tipoMethod -> . FLOAT
    (29) tipoMethod -> . CHAR
    (104) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    RBRACE          reduce using rule 104 (empty -> .)

    declarMethods                  shift and go to state 62
    tipoMethod                     shift and go to state 63
    empty                          shift and go to state 64

state 55

    (9) declarAttributes -> tipo COLON . listaIdDeclare SCOLON declarAttributes
    (11) listaIdDeclare -> . idDeclare
    (12) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (13) idDeclare -> . ID
    (14) idDeclare -> . ID LBRACK CTE_I RBRACK
    (15) idDeclare -> . ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    ID              shift and go to state 37

    listaIdDeclare                 shift and go to state 65
    idDeclare                      shift and go to state 36

state 56

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar . LBRACE listaEstatutos RBRACE prueba

    LBRACE          shift and go to state 66


state 57

    (36) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam . RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc

    RPAREN          shift and go to state 67


state 58

    (30) listaParam -> param .
    (31) listaParam -> param . COMMA listaParam

    RPAREN          reduce using rule 30 (listaParam -> param .)
    COMMA           shift and go to state 68


state 59

    (32) listaParam -> empty .

    RPAREN          reduce using rule 32 (listaParam -> empty .)


state 60

    (33) param -> tipo . COLON ID

    COLON           shift and go to state 69


state 61

    (14) idDeclare -> ID LBRACK CTE_I RBRACK .
    (15) idDeclare -> ID LBRACK CTE_I RBRACK . LBRACK CTE_I RBRACK

    COMMA           reduce using rule 14 (idDeclare -> ID LBRACK CTE_I RBRACK .)
    SCOLON          reduce using rule 14 (idDeclare -> ID LBRACK CTE_I RBRACK .)
    LBRACK          shift and go to state 70


state 62

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods . RBRACE declarClases

    RBRACE          shift and go to state 71


state 63

    (24) declarMethods -> tipoMethod . FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    FUNC            shift and go to state 72


state 64

    (25) declarMethods -> empty .

    RBRACE          reduce using rule 25 (declarMethods -> empty .)


state 65

    (9) declarAttributes -> tipo COLON listaIdDeclare . SCOLON declarAttributes

    SCOLON          shift and go to state 73


state 66

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE . listaEstatutos RBRACE prueba
    (39) listaEstatutos -> . estatutos listaEstatutos
    (40) listaEstatutos -> . empty
    (41) estatutos -> . llamada SCOLON
    (42) estatutos -> . asignacion SCOLON
    (43) estatutos -> . returnf SCOLON
    (44) estatutos -> . lectura SCOLON
    (45) estatutos -> . escritura SCOLON
    (46) estatutos -> . condicion
    (47) estatutos -> . cond_w
    (48) estatutos -> . cond_f
    (104) empty -> .
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (49) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (57) returnf -> . RETURN LPAREN exp RPAREN
    (58) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (63) escritura -> . WRITE LPAREN exp lextra RPAREN
    (64) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (70) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (71) cond_f -> . FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 104 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 75
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 67

    (36) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN . declarVar LBRACE listaEstatutos RBRACE definFunc
    (34) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (35) declarVar -> . empty
    (104) empty -> .

    VAR             shift and go to state 10
    LBRACE          reduce using rule 104 (empty -> .)

    declarVar                      shift and go to state 93
    empty                          shift and go to state 11

state 68

    (31) listaParam -> param COMMA . listaParam
    (30) listaParam -> . param
    (31) listaParam -> . param COMMA listaParam
    (32) listaParam -> . empty
    (33) param -> . tipo COLON ID
    (104) empty -> .
    (20) tipo -> . ID
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    RPAREN          reduce using rule 104 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    param                          shift and go to state 58
    listaParam                     shift and go to state 94
    empty                          shift and go to state 59
    tipo                           shift and go to state 60

state 69

    (33) param -> tipo COLON . ID

    ID              shift and go to state 95


state 70

    (15) idDeclare -> ID LBRACK CTE_I RBRACK LBRACK . CTE_I RBRACK

    CTE_I           shift and go to state 96


state 71

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE . declarClases
    (5) declarClases -> . CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (6) declarClases -> . empty
    (104) empty -> .

    CLASS           shift and go to state 7
    VAR             reduce using rule 104 (empty -> .)
    VOID            reduce using rule 104 (empty -> .)
    INT             reduce using rule 104 (empty -> .)
    FLOAT           reduce using rule 104 (empty -> .)
    CHAR            reduce using rule 104 (empty -> .)
    MAIN            reduce using rule 104 (empty -> .)

    declarClases                   shift and go to state 97
    empty                          shift and go to state 8

state 72

    (24) declarMethods -> tipoMethod FUNC . ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    ID              shift and go to state 98


state 73

    (9) declarAttributes -> tipo COLON listaIdDeclare SCOLON . declarAttributes
    (9) declarAttributes -> . tipo COLON listaIdDeclare SCOLON declarAttributes
    (10) declarAttributes -> . empty
    (20) tipo -> . ID
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR
    (104) empty -> .

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    METHODS         reduce using rule 104 (empty -> .)

    tipo                           shift and go to state 46
    declarAttributes               shift and go to state 99
    empty                          shift and go to state 47

state 74

    (51) llamada -> ID . DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> ID . LPAREN enviaParam RPAREN
    (16) idCall -> ID .
    (17) idCall -> ID . DOT ID
    (18) idCall -> ID . LBRACK exp RBRACK
    (19) idCall -> ID . LBRACK exp RBRACK LBRACK exp RBRACK

    DOT             shift and go to state 100
    LPAREN          shift and go to state 101
    ASIGNA          reduce using rule 16 (idCall -> ID .)
    MULT            reduce using rule 16 (idCall -> ID .)
    DIV             reduce using rule 16 (idCall -> ID .)
    PLUS            reduce using rule 16 (idCall -> ID .)
    MINUS           reduce using rule 16 (idCall -> ID .)
    LT              reduce using rule 16 (idCall -> ID .)
    GT              reduce using rule 16 (idCall -> ID .)
    LTE             reduce using rule 16 (idCall -> ID .)
    GTE             reduce using rule 16 (idCall -> ID .)
    EQUALS          reduce using rule 16 (idCall -> ID .)
    NEQUALS         reduce using rule 16 (idCall -> ID .)
    AND             reduce using rule 16 (idCall -> ID .)
    OR              reduce using rule 16 (idCall -> ID .)
    COMMA           reduce using rule 16 (idCall -> ID .)
    RPAREN          reduce using rule 16 (idCall -> ID .)
    RBRACK          reduce using rule 16 (idCall -> ID .)
    SCOLON          reduce using rule 16 (idCall -> ID .)
    TO              reduce using rule 16 (idCall -> ID .)
    DO              reduce using rule 16 (idCall -> ID .)
    LBRACK          shift and go to state 102


state 75

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos . RBRACE prueba

    RBRACE          shift and go to state 103


state 76

    (39) listaEstatutos -> estatutos . listaEstatutos
    (39) listaEstatutos -> . estatutos listaEstatutos
    (40) listaEstatutos -> . empty
    (41) estatutos -> . llamada SCOLON
    (42) estatutos -> . asignacion SCOLON
    (43) estatutos -> . returnf SCOLON
    (44) estatutos -> . lectura SCOLON
    (45) estatutos -> . escritura SCOLON
    (46) estatutos -> . condicion
    (47) estatutos -> . cond_w
    (48) estatutos -> . cond_f
    (104) empty -> .
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (49) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (57) returnf -> . RETURN LPAREN exp RPAREN
    (58) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (63) escritura -> . WRITE LPAREN exp lextra RPAREN
    (64) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (70) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (71) cond_f -> . FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 104 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    estatutos                      shift and go to state 76
    listaEstatutos                 shift and go to state 104
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 77

    (40) listaEstatutos -> empty .

    RBRACE          reduce using rule 40 (listaEstatutos -> empty .)


state 78

    (41) estatutos -> llamada . SCOLON

    SCOLON          shift and go to state 105


state 79

    (42) estatutos -> asignacion . SCOLON

    SCOLON          shift and go to state 106


state 80

    (43) estatutos -> returnf . SCOLON

    SCOLON          shift and go to state 107


state 81

    (44) estatutos -> lectura . SCOLON

    SCOLON          shift and go to state 108


state 82

    (45) estatutos -> escritura . SCOLON

    SCOLON          shift and go to state 109


state 83

    (46) estatutos -> condicion .

    ID              reduce using rule 46 (estatutos -> condicion .)
    RETURN          reduce using rule 46 (estatutos -> condicion .)
    READ            reduce using rule 46 (estatutos -> condicion .)
    WRITE           reduce using rule 46 (estatutos -> condicion .)
    IF              reduce using rule 46 (estatutos -> condicion .)
    WHILE           reduce using rule 46 (estatutos -> condicion .)
    FOR             reduce using rule 46 (estatutos -> condicion .)
    RBRACE          reduce using rule 46 (estatutos -> condicion .)


state 84

    (47) estatutos -> cond_w .

    ID              reduce using rule 47 (estatutos -> cond_w .)
    RETURN          reduce using rule 47 (estatutos -> cond_w .)
    READ            reduce using rule 47 (estatutos -> cond_w .)
    WRITE           reduce using rule 47 (estatutos -> cond_w .)
    IF              reduce using rule 47 (estatutos -> cond_w .)
    WHILE           reduce using rule 47 (estatutos -> cond_w .)
    FOR             reduce using rule 47 (estatutos -> cond_w .)
    RBRACE          reduce using rule 47 (estatutos -> cond_w .)


state 85

    (48) estatutos -> cond_f .

    ID              reduce using rule 48 (estatutos -> cond_f .)
    RETURN          reduce using rule 48 (estatutos -> cond_f .)
    READ            reduce using rule 48 (estatutos -> cond_f .)
    WRITE           reduce using rule 48 (estatutos -> cond_f .)
    IF              reduce using rule 48 (estatutos -> cond_f .)
    WHILE           reduce using rule 48 (estatutos -> cond_f .)
    FOR             reduce using rule 48 (estatutos -> cond_f .)
    RBRACE          reduce using rule 48 (estatutos -> cond_f .)


state 86

    (49) asignacion -> idCall . ASIGNA pushPoper exp asignStep2

    ASIGNA          shift and go to state 110


state 87

    (57) returnf -> RETURN . LPAREN exp RPAREN

    LPAREN          shift and go to state 111


state 88

    (58) lectura -> READ . pushPoper LPAREN listaId RPAREN
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 112

state 89

    (63) escritura -> WRITE . LPAREN exp lextra RPAREN
    (64) escritura -> WRITE . LPAREN LETRERO lextra RPAREN

    LPAREN          shift and go to state 113


state 90

    (68) condicion -> IF . LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> IF . LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE

    LPAREN          shift and go to state 114


state 91

    (70) cond_w -> WHILE . LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE

    LPAREN          shift and go to state 115


state 92

    (71) cond_f -> FOR . asignacion TO exp DO LBRACE listaEstatutos RBRACE
    (49) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    ID              shift and go to state 117

    asignacion                     shift and go to state 116
    idCall                         shift and go to state 86

state 93

    (36) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar . LBRACE listaEstatutos RBRACE definFunc

    LBRACE          shift and go to state 118


state 94

    (31) listaParam -> param COMMA listaParam .

    RPAREN          reduce using rule 31 (listaParam -> param COMMA listaParam .)


state 95

    (33) param -> tipo COLON ID .

    COMMA           reduce using rule 33 (param -> tipo COLON ID .)
    RPAREN          reduce using rule 33 (param -> tipo COLON ID .)


state 96

    (15) idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I . RBRACK

    RBRACK          shift and go to state 119


state 97

    (5) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .

    VAR             reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    VOID            reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    INT             reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    FLOAT           reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    CHAR            reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    MAIN            reduce using rule 5 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)


state 98

    (24) declarMethods -> tipoMethod FUNC ID . LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    LPAREN          shift and go to state 120


state 99

    (9) declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes .

    METHODS         reduce using rule 9 (declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes .)


state 100

    (51) llamada -> ID DOT . ID LPAREN enviaParam RPAREN
    (17) idCall -> ID DOT . ID

    ID              shift and go to state 121


state 101

    (52) llamada -> ID LPAREN . enviaParam RPAREN
    (53) enviaParam -> . paramReferencia
    (54) enviaParam -> . empty
    (55) paramReferencia -> . exp
    (56) paramReferencia -> . exp COMMA paramReferencia
    (104) empty -> .
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RPAREN          reduce using rule 104 (empty -> .)
    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    enviaParam                     shift and go to state 123
    paramReferencia                shift and go to state 124
    empty                          shift and go to state 125
    exp                            shift and go to state 126
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 102

    (18) idCall -> ID LBRACK . exp RBRACK
    (19) idCall -> ID LBRACK . exp RBRACK LBRACK exp RBRACK
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    exp                            shift and go to state 137
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 103

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE . prueba
    (2) prueba -> .

    $end            reduce using rule 2 (prueba -> .)

    prueba                         shift and go to state 138

state 104

    (39) listaEstatutos -> estatutos listaEstatutos .

    RBRACE          reduce using rule 39 (listaEstatutos -> estatutos listaEstatutos .)


state 105

    (41) estatutos -> llamada SCOLON .

    ID              reduce using rule 41 (estatutos -> llamada SCOLON .)
    RETURN          reduce using rule 41 (estatutos -> llamada SCOLON .)
    READ            reduce using rule 41 (estatutos -> llamada SCOLON .)
    WRITE           reduce using rule 41 (estatutos -> llamada SCOLON .)
    IF              reduce using rule 41 (estatutos -> llamada SCOLON .)
    WHILE           reduce using rule 41 (estatutos -> llamada SCOLON .)
    FOR             reduce using rule 41 (estatutos -> llamada SCOLON .)
    RBRACE          reduce using rule 41 (estatutos -> llamada SCOLON .)


state 106

    (42) estatutos -> asignacion SCOLON .

    ID              reduce using rule 42 (estatutos -> asignacion SCOLON .)
    RETURN          reduce using rule 42 (estatutos -> asignacion SCOLON .)
    READ            reduce using rule 42 (estatutos -> asignacion SCOLON .)
    WRITE           reduce using rule 42 (estatutos -> asignacion SCOLON .)
    IF              reduce using rule 42 (estatutos -> asignacion SCOLON .)
    WHILE           reduce using rule 42 (estatutos -> asignacion SCOLON .)
    FOR             reduce using rule 42 (estatutos -> asignacion SCOLON .)
    RBRACE          reduce using rule 42 (estatutos -> asignacion SCOLON .)


state 107

    (43) estatutos -> returnf SCOLON .

    ID              reduce using rule 43 (estatutos -> returnf SCOLON .)
    RETURN          reduce using rule 43 (estatutos -> returnf SCOLON .)
    READ            reduce using rule 43 (estatutos -> returnf SCOLON .)
    WRITE           reduce using rule 43 (estatutos -> returnf SCOLON .)
    IF              reduce using rule 43 (estatutos -> returnf SCOLON .)
    WHILE           reduce using rule 43 (estatutos -> returnf SCOLON .)
    FOR             reduce using rule 43 (estatutos -> returnf SCOLON .)
    RBRACE          reduce using rule 43 (estatutos -> returnf SCOLON .)


state 108

    (44) estatutos -> lectura SCOLON .

    ID              reduce using rule 44 (estatutos -> lectura SCOLON .)
    RETURN          reduce using rule 44 (estatutos -> lectura SCOLON .)
    READ            reduce using rule 44 (estatutos -> lectura SCOLON .)
    WRITE           reduce using rule 44 (estatutos -> lectura SCOLON .)
    IF              reduce using rule 44 (estatutos -> lectura SCOLON .)
    WHILE           reduce using rule 44 (estatutos -> lectura SCOLON .)
    FOR             reduce using rule 44 (estatutos -> lectura SCOLON .)
    RBRACE          reduce using rule 44 (estatutos -> lectura SCOLON .)


state 109

    (45) estatutos -> escritura SCOLON .

    ID              reduce using rule 45 (estatutos -> escritura SCOLON .)
    RETURN          reduce using rule 45 (estatutos -> escritura SCOLON .)
    READ            reduce using rule 45 (estatutos -> escritura SCOLON .)
    WRITE           reduce using rule 45 (estatutos -> escritura SCOLON .)
    IF              reduce using rule 45 (estatutos -> escritura SCOLON .)
    WHILE           reduce using rule 45 (estatutos -> escritura SCOLON .)
    FOR             reduce using rule 45 (estatutos -> escritura SCOLON .)
    RBRACE          reduce using rule 45 (estatutos -> escritura SCOLON .)


state 110

    (49) asignacion -> idCall ASIGNA . pushPoper exp asignStep2
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 139

state 111

    (57) returnf -> RETURN LPAREN . exp RPAREN
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    exp                            shift and go to state 140
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 112

    (58) lectura -> READ pushPoper . LPAREN listaId RPAREN

    LPAREN          shift and go to state 141


state 113

    (63) escritura -> WRITE LPAREN . exp lextra RPAREN
    (64) escritura -> WRITE LPAREN . LETRERO lextra RPAREN
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LETRERO         shift and go to state 143
    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    exp                            shift and go to state 142
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 114

    (68) condicion -> IF LPAREN . exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> IF LPAREN . exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    exp                            shift and go to state 144
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 115

    (70) cond_w -> WHILE LPAREN . exp RPAREN DO LBRACE listaEstatutos RBRACE
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    exp                            shift and go to state 145
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 116

    (71) cond_f -> FOR asignacion . TO exp DO LBRACE listaEstatutos RBRACE

    TO              shift and go to state 146


state 117

    (16) idCall -> ID .
    (17) idCall -> ID . DOT ID
    (18) idCall -> ID . LBRACK exp RBRACK
    (19) idCall -> ID . LBRACK exp RBRACK LBRACK exp RBRACK

    ASIGNA          reduce using rule 16 (idCall -> ID .)
    COMMA           reduce using rule 16 (idCall -> ID .)
    RPAREN          reduce using rule 16 (idCall -> ID .)
    DOT             shift and go to state 147
    LBRACK          shift and go to state 102


state 118

    (36) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE . listaEstatutos RBRACE definFunc
    (39) listaEstatutos -> . estatutos listaEstatutos
    (40) listaEstatutos -> . empty
    (41) estatutos -> . llamada SCOLON
    (42) estatutos -> . asignacion SCOLON
    (43) estatutos -> . returnf SCOLON
    (44) estatutos -> . lectura SCOLON
    (45) estatutos -> . escritura SCOLON
    (46) estatutos -> . condicion
    (47) estatutos -> . cond_w
    (48) estatutos -> . cond_f
    (104) empty -> .
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (49) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (57) returnf -> . RETURN LPAREN exp RPAREN
    (58) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (63) escritura -> . WRITE LPAREN exp lextra RPAREN
    (64) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (70) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (71) cond_f -> . FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 104 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 148
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 119

    (15) idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK .

    COMMA           reduce using rule 15 (idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK .)
    SCOLON          reduce using rule 15 (idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK .)


state 120

    (24) declarMethods -> tipoMethod FUNC ID LPAREN . listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (30) listaParam -> . param
    (31) listaParam -> . param COMMA listaParam
    (32) listaParam -> . empty
    (33) param -> . tipo COLON ID
    (104) empty -> .
    (20) tipo -> . ID
    (21) tipo -> . INT
    (22) tipo -> . FLOAT
    (23) tipo -> . CHAR

    RPAREN          reduce using rule 104 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    listaParam                     shift and go to state 149
    param                          shift and go to state 58
    empty                          shift and go to state 59
    tipo                           shift and go to state 60

state 121

    (51) llamada -> ID DOT ID . LPAREN enviaParam RPAREN
    (17) idCall -> ID DOT ID .

    LPAREN          shift and go to state 150
    ASIGNA          reduce using rule 17 (idCall -> ID DOT ID .)
    MULT            reduce using rule 17 (idCall -> ID DOT ID .)
    DIV             reduce using rule 17 (idCall -> ID DOT ID .)
    PLUS            reduce using rule 17 (idCall -> ID DOT ID .)
    MINUS           reduce using rule 17 (idCall -> ID DOT ID .)
    LT              reduce using rule 17 (idCall -> ID DOT ID .)
    GT              reduce using rule 17 (idCall -> ID DOT ID .)
    LTE             reduce using rule 17 (idCall -> ID DOT ID .)
    GTE             reduce using rule 17 (idCall -> ID DOT ID .)
    EQUALS          reduce using rule 17 (idCall -> ID DOT ID .)
    NEQUALS         reduce using rule 17 (idCall -> ID DOT ID .)
    AND             reduce using rule 17 (idCall -> ID DOT ID .)
    OR              reduce using rule 17 (idCall -> ID DOT ID .)
    COMMA           reduce using rule 17 (idCall -> ID DOT ID .)
    RPAREN          reduce using rule 17 (idCall -> ID DOT ID .)
    RBRACK          reduce using rule 17 (idCall -> ID DOT ID .)
    SCOLON          reduce using rule 17 (idCall -> ID DOT ID .)
    TO              reduce using rule 17 (idCall -> ID DOT ID .)
    DO              reduce using rule 17 (idCall -> ID DOT ID .)


state 122

    (89) f -> LPAREN . addFF exp RPAREN rmFF
    (101) addFF -> .

    LPAREN          reduce using rule 101 (addFF -> .)
    CTE_I           reduce using rule 101 (addFF -> .)
    CTE_F           reduce using rule 101 (addFF -> .)
    CTE_C           reduce using rule 101 (addFF -> .)
    ID              reduce using rule 101 (addFF -> .)

    addFF                          shift and go to state 151

state 123

    (52) llamada -> ID LPAREN enviaParam . RPAREN

    RPAREN          shift and go to state 152


state 124

    (53) enviaParam -> paramReferencia .

    RPAREN          reduce using rule 53 (enviaParam -> paramReferencia .)


state 125

    (54) enviaParam -> empty .

    RPAREN          reduce using rule 54 (enviaParam -> empty .)


state 126

    (55) paramReferencia -> exp .
    (56) paramReferencia -> exp . COMMA paramReferencia

    RPAREN          reduce using rule 55 (paramReferencia -> exp .)
    COMMA           shift and go to state 153


state 127

    (72) exp -> texp . step7
    (73) exp -> texp . step7 OR pushPoper exp
    (100) step7 -> .

    OR              reduce using rule 100 (step7 -> .)
    COMMA           reduce using rule 100 (step7 -> .)
    RPAREN          reduce using rule 100 (step7 -> .)
    RBRACK          reduce using rule 100 (step7 -> .)
    SCOLON          reduce using rule 100 (step7 -> .)
    TO              reduce using rule 100 (step7 -> .)
    DO              reduce using rule 100 (step7 -> .)

    step7                          shift and go to state 154

state 128

    (74) texp -> gexp . step6
    (75) texp -> gexp . step6 AND pushPoper texp
    (99) step6 -> .

    AND             reduce using rule 99 (step6 -> .)
    OR              reduce using rule 99 (step6 -> .)
    COMMA           reduce using rule 99 (step6 -> .)
    RPAREN          reduce using rule 99 (step6 -> .)
    RBRACK          reduce using rule 99 (step6 -> .)
    SCOLON          reduce using rule 99 (step6 -> .)
    TO              reduce using rule 99 (step6 -> .)
    DO              reduce using rule 99 (step6 -> .)

    step6                          shift and go to state 155

state 129

    (76) gexp -> mexp . step5
    (77) gexp -> mexp . step5 LT pushPoper mexp
    (78) gexp -> mexp . step5 GT pushPoper mexp
    (79) gexp -> mexp . step5 LTE pushPoper mexp
    (80) gexp -> mexp . step5 GTE pushPoper mexp
    (81) gexp -> mexp . step5 EQUALS pushPoper mexp
    (82) gexp -> mexp . step5 NEQUALS pushPoper mexp
    (98) step5 -> .

    LT              reduce using rule 98 (step5 -> .)
    GT              reduce using rule 98 (step5 -> .)
    LTE             reduce using rule 98 (step5 -> .)
    GTE             reduce using rule 98 (step5 -> .)
    EQUALS          reduce using rule 98 (step5 -> .)
    NEQUALS         reduce using rule 98 (step5 -> .)
    AND             reduce using rule 98 (step5 -> .)
    OR              reduce using rule 98 (step5 -> .)
    COMMA           reduce using rule 98 (step5 -> .)
    RPAREN          reduce using rule 98 (step5 -> .)
    RBRACK          reduce using rule 98 (step5 -> .)
    SCOLON          reduce using rule 98 (step5 -> .)
    TO              reduce using rule 98 (step5 -> .)
    DO              reduce using rule 98 (step5 -> .)

    step5                          shift and go to state 156

state 130

    (83) mexp -> t . step4
    (84) mexp -> t . step4 PLUS pushPoper mexp
    (85) mexp -> t . step4 MINUS pushPoper mexp
    (97) step4 -> .

    PLUS            reduce using rule 97 (step4 -> .)
    MINUS           reduce using rule 97 (step4 -> .)
    LT              reduce using rule 97 (step4 -> .)
    GT              reduce using rule 97 (step4 -> .)
    LTE             reduce using rule 97 (step4 -> .)
    GTE             reduce using rule 97 (step4 -> .)
    EQUALS          reduce using rule 97 (step4 -> .)
    NEQUALS         reduce using rule 97 (step4 -> .)
    AND             reduce using rule 97 (step4 -> .)
    OR              reduce using rule 97 (step4 -> .)
    COMMA           reduce using rule 97 (step4 -> .)
    RPAREN          reduce using rule 97 (step4 -> .)
    RBRACK          reduce using rule 97 (step4 -> .)
    SCOLON          reduce using rule 97 (step4 -> .)
    TO              reduce using rule 97 (step4 -> .)
    DO              reduce using rule 97 (step4 -> .)

    step4                          shift and go to state 157

state 131

    (86) t -> f . step3
    (87) t -> f . step3 MULT pushPoper t
    (88) t -> f . step3 DIV pushPoper t
    (96) step3 -> .

    MULT            reduce using rule 96 (step3 -> .)
    DIV             reduce using rule 96 (step3 -> .)
    PLUS            reduce using rule 96 (step3 -> .)
    MINUS           reduce using rule 96 (step3 -> .)
    LT              reduce using rule 96 (step3 -> .)
    GT              reduce using rule 96 (step3 -> .)
    LTE             reduce using rule 96 (step3 -> .)
    GTE             reduce using rule 96 (step3 -> .)
    EQUALS          reduce using rule 96 (step3 -> .)
    NEQUALS         reduce using rule 96 (step3 -> .)
    AND             reduce using rule 96 (step3 -> .)
    OR              reduce using rule 96 (step3 -> .)
    COMMA           reduce using rule 96 (step3 -> .)
    RPAREN          reduce using rule 96 (step3 -> .)
    RBRACK          reduce using rule 96 (step3 -> .)
    SCOLON          reduce using rule 96 (step3 -> .)
    TO              reduce using rule 96 (step3 -> .)
    DO              reduce using rule 96 (step3 -> .)

    step3                          shift and go to state 158

state 132

    (90) f -> CTE_I . step1
    (95) step1 -> .

    MULT            reduce using rule 95 (step1 -> .)
    DIV             reduce using rule 95 (step1 -> .)
    PLUS            reduce using rule 95 (step1 -> .)
    MINUS           reduce using rule 95 (step1 -> .)
    LT              reduce using rule 95 (step1 -> .)
    GT              reduce using rule 95 (step1 -> .)
    LTE             reduce using rule 95 (step1 -> .)
    GTE             reduce using rule 95 (step1 -> .)
    EQUALS          reduce using rule 95 (step1 -> .)
    NEQUALS         reduce using rule 95 (step1 -> .)
    AND             reduce using rule 95 (step1 -> .)
    OR              reduce using rule 95 (step1 -> .)
    COMMA           reduce using rule 95 (step1 -> .)
    RPAREN          reduce using rule 95 (step1 -> .)
    RBRACK          reduce using rule 95 (step1 -> .)
    SCOLON          reduce using rule 95 (step1 -> .)
    TO              reduce using rule 95 (step1 -> .)
    DO              reduce using rule 95 (step1 -> .)

    step1                          shift and go to state 159

state 133

    (91) f -> CTE_F . step1
    (95) step1 -> .

    MULT            reduce using rule 95 (step1 -> .)
    DIV             reduce using rule 95 (step1 -> .)
    PLUS            reduce using rule 95 (step1 -> .)
    MINUS           reduce using rule 95 (step1 -> .)
    LT              reduce using rule 95 (step1 -> .)
    GT              reduce using rule 95 (step1 -> .)
    LTE             reduce using rule 95 (step1 -> .)
    GTE             reduce using rule 95 (step1 -> .)
    EQUALS          reduce using rule 95 (step1 -> .)
    NEQUALS         reduce using rule 95 (step1 -> .)
    AND             reduce using rule 95 (step1 -> .)
    OR              reduce using rule 95 (step1 -> .)
    COMMA           reduce using rule 95 (step1 -> .)
    RPAREN          reduce using rule 95 (step1 -> .)
    RBRACK          reduce using rule 95 (step1 -> .)
    SCOLON          reduce using rule 95 (step1 -> .)
    TO              reduce using rule 95 (step1 -> .)
    DO              reduce using rule 95 (step1 -> .)

    step1                          shift and go to state 160

state 134

    (92) f -> CTE_C . step1
    (95) step1 -> .

    MULT            reduce using rule 95 (step1 -> .)
    DIV             reduce using rule 95 (step1 -> .)
    PLUS            reduce using rule 95 (step1 -> .)
    MINUS           reduce using rule 95 (step1 -> .)
    LT              reduce using rule 95 (step1 -> .)
    GT              reduce using rule 95 (step1 -> .)
    LTE             reduce using rule 95 (step1 -> .)
    GTE             reduce using rule 95 (step1 -> .)
    EQUALS          reduce using rule 95 (step1 -> .)
    NEQUALS         reduce using rule 95 (step1 -> .)
    AND             reduce using rule 95 (step1 -> .)
    OR              reduce using rule 95 (step1 -> .)
    COMMA           reduce using rule 95 (step1 -> .)
    RPAREN          reduce using rule 95 (step1 -> .)
    RBRACK          reduce using rule 95 (step1 -> .)
    SCOLON          reduce using rule 95 (step1 -> .)
    TO              reduce using rule 95 (step1 -> .)
    DO              reduce using rule 95 (step1 -> .)

    step1                          shift and go to state 161

state 135

    (93) f -> llamada .

    MULT            reduce using rule 93 (f -> llamada .)
    DIV             reduce using rule 93 (f -> llamada .)
    PLUS            reduce using rule 93 (f -> llamada .)
    MINUS           reduce using rule 93 (f -> llamada .)
    LT              reduce using rule 93 (f -> llamada .)
    GT              reduce using rule 93 (f -> llamada .)
    LTE             reduce using rule 93 (f -> llamada .)
    GTE             reduce using rule 93 (f -> llamada .)
    EQUALS          reduce using rule 93 (f -> llamada .)
    NEQUALS         reduce using rule 93 (f -> llamada .)
    AND             reduce using rule 93 (f -> llamada .)
    OR              reduce using rule 93 (f -> llamada .)
    COMMA           reduce using rule 93 (f -> llamada .)
    RPAREN          reduce using rule 93 (f -> llamada .)
    RBRACK          reduce using rule 93 (f -> llamada .)
    SCOLON          reduce using rule 93 (f -> llamada .)
    TO              reduce using rule 93 (f -> llamada .)
    DO              reduce using rule 93 (f -> llamada .)


state 136

    (94) f -> idCall .

    MULT            reduce using rule 94 (f -> idCall .)
    DIV             reduce using rule 94 (f -> idCall .)
    PLUS            reduce using rule 94 (f -> idCall .)
    MINUS           reduce using rule 94 (f -> idCall .)
    LT              reduce using rule 94 (f -> idCall .)
    GT              reduce using rule 94 (f -> idCall .)
    LTE             reduce using rule 94 (f -> idCall .)
    GTE             reduce using rule 94 (f -> idCall .)
    EQUALS          reduce using rule 94 (f -> idCall .)
    NEQUALS         reduce using rule 94 (f -> idCall .)
    AND             reduce using rule 94 (f -> idCall .)
    OR              reduce using rule 94 (f -> idCall .)
    COMMA           reduce using rule 94 (f -> idCall .)
    RPAREN          reduce using rule 94 (f -> idCall .)
    RBRACK          reduce using rule 94 (f -> idCall .)
    SCOLON          reduce using rule 94 (f -> idCall .)
    TO              reduce using rule 94 (f -> idCall .)
    DO              reduce using rule 94 (f -> idCall .)


state 137

    (18) idCall -> ID LBRACK exp . RBRACK
    (19) idCall -> ID LBRACK exp . RBRACK LBRACK exp RBRACK

    RBRACK          shift and go to state 162


state 138

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba .

    $end            reduce using rule 1 (program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE prueba .)


state 139

    (49) asignacion -> idCall ASIGNA pushPoper . exp asignStep2
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    idCall                         shift and go to state 136
    exp                            shift and go to state 163
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135

state 140

    (57) returnf -> RETURN LPAREN exp . RPAREN

    RPAREN          shift and go to state 164


state 141

    (58) lectura -> READ pushPoper LPAREN . listaId RPAREN
    (59) listaId -> . idCall popIO
    (60) listaId -> . idCall COMMA popIO insertOpRead listaId
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    ID              shift and go to state 117

    listaId                        shift and go to state 165
    idCall                         shift and go to state 166

state 142

    (63) escritura -> WRITE LPAREN exp . lextra RPAREN
    (65) lextra -> . COMMA exp lextra
    (66) lextra -> . COMMA LETRERO lextra
    (67) lextra -> . empty
    (104) empty -> .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 104 (empty -> .)

    lextra                         shift and go to state 167
    empty                          shift and go to state 169

state 143

    (64) escritura -> WRITE LPAREN LETRERO . lextra RPAREN
    (65) lextra -> . COMMA exp lextra
    (66) lextra -> . COMMA LETRERO lextra
    (67) lextra -> . empty
    (104) empty -> .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 104 (empty -> .)

    lextra                         shift and go to state 170
    empty                          shift and go to state 169

state 144

    (68) condicion -> IF LPAREN exp . RPAREN THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> IF LPAREN exp . RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE

    RPAREN          shift and go to state 171


state 145

    (70) cond_w -> WHILE LPAREN exp . RPAREN DO LBRACE listaEstatutos RBRACE

    RPAREN          shift and go to state 172


state 146

    (71) cond_f -> FOR asignacion TO . exp DO LBRACE listaEstatutos RBRACE
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    exp                            shift and go to state 173
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 147

    (17) idCall -> ID DOT . ID

    ID              shift and go to state 174


state 148

    (36) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos . RBRACE definFunc

    RBRACE          shift and go to state 175


state 149

    (24) declarMethods -> tipoMethod FUNC ID LPAREN listaParam . RPAREN LBRACE listaEstatutos RBRACE declarMethods

    RPAREN          shift and go to state 176


state 150

    (51) llamada -> ID DOT ID LPAREN . enviaParam RPAREN
    (53) enviaParam -> . paramReferencia
    (54) enviaParam -> . empty
    (55) paramReferencia -> . exp
    (56) paramReferencia -> . exp COMMA paramReferencia
    (104) empty -> .
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RPAREN          reduce using rule 104 (empty -> .)
    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    enviaParam                     shift and go to state 177
    paramReferencia                shift and go to state 124
    empty                          shift and go to state 125
    exp                            shift and go to state 126
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 151

    (89) f -> LPAREN addFF . exp RPAREN rmFF
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    exp                            shift and go to state 178
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 152

    (52) llamada -> ID LPAREN enviaParam RPAREN .

    SCOLON          reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    MULT            reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    DIV             reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    PLUS            reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    MINUS           reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    LT              reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    GT              reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    LTE             reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    GTE             reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    EQUALS          reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    NEQUALS         reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    AND             reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    OR              reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    COMMA           reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    RPAREN          reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    RBRACK          reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    TO              reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)
    DO              reduce using rule 52 (llamada -> ID LPAREN enviaParam RPAREN .)


state 153

    (56) paramReferencia -> exp COMMA . paramReferencia
    (55) paramReferencia -> . exp
    (56) paramReferencia -> . exp COMMA paramReferencia
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    exp                            shift and go to state 126
    paramReferencia                shift and go to state 179
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 154

    (72) exp -> texp step7 .
    (73) exp -> texp step7 . OR pushPoper exp

    COMMA           reduce using rule 72 (exp -> texp step7 .)
    RPAREN          reduce using rule 72 (exp -> texp step7 .)
    RBRACK          reduce using rule 72 (exp -> texp step7 .)
    SCOLON          reduce using rule 72 (exp -> texp step7 .)
    TO              reduce using rule 72 (exp -> texp step7 .)
    DO              reduce using rule 72 (exp -> texp step7 .)
    OR              shift and go to state 180


state 155

    (74) texp -> gexp step6 .
    (75) texp -> gexp step6 . AND pushPoper texp

    OR              reduce using rule 74 (texp -> gexp step6 .)
    COMMA           reduce using rule 74 (texp -> gexp step6 .)
    RPAREN          reduce using rule 74 (texp -> gexp step6 .)
    RBRACK          reduce using rule 74 (texp -> gexp step6 .)
    SCOLON          reduce using rule 74 (texp -> gexp step6 .)
    TO              reduce using rule 74 (texp -> gexp step6 .)
    DO              reduce using rule 74 (texp -> gexp step6 .)
    AND             shift and go to state 181


state 156

    (76) gexp -> mexp step5 .
    (77) gexp -> mexp step5 . LT pushPoper mexp
    (78) gexp -> mexp step5 . GT pushPoper mexp
    (79) gexp -> mexp step5 . LTE pushPoper mexp
    (80) gexp -> mexp step5 . GTE pushPoper mexp
    (81) gexp -> mexp step5 . EQUALS pushPoper mexp
    (82) gexp -> mexp step5 . NEQUALS pushPoper mexp

    AND             reduce using rule 76 (gexp -> mexp step5 .)
    OR              reduce using rule 76 (gexp -> mexp step5 .)
    COMMA           reduce using rule 76 (gexp -> mexp step5 .)
    RPAREN          reduce using rule 76 (gexp -> mexp step5 .)
    RBRACK          reduce using rule 76 (gexp -> mexp step5 .)
    SCOLON          reduce using rule 76 (gexp -> mexp step5 .)
    TO              reduce using rule 76 (gexp -> mexp step5 .)
    DO              reduce using rule 76 (gexp -> mexp step5 .)
    LT              shift and go to state 182
    GT              shift and go to state 183
    LTE             shift and go to state 184
    GTE             shift and go to state 185
    EQUALS          shift and go to state 186
    NEQUALS         shift and go to state 187


state 157

    (83) mexp -> t step4 .
    (84) mexp -> t step4 . PLUS pushPoper mexp
    (85) mexp -> t step4 . MINUS pushPoper mexp

    LT              reduce using rule 83 (mexp -> t step4 .)
    GT              reduce using rule 83 (mexp -> t step4 .)
    LTE             reduce using rule 83 (mexp -> t step4 .)
    GTE             reduce using rule 83 (mexp -> t step4 .)
    EQUALS          reduce using rule 83 (mexp -> t step4 .)
    NEQUALS         reduce using rule 83 (mexp -> t step4 .)
    AND             reduce using rule 83 (mexp -> t step4 .)
    OR              reduce using rule 83 (mexp -> t step4 .)
    COMMA           reduce using rule 83 (mexp -> t step4 .)
    RPAREN          reduce using rule 83 (mexp -> t step4 .)
    RBRACK          reduce using rule 83 (mexp -> t step4 .)
    SCOLON          reduce using rule 83 (mexp -> t step4 .)
    TO              reduce using rule 83 (mexp -> t step4 .)
    DO              reduce using rule 83 (mexp -> t step4 .)
    PLUS            shift and go to state 188
    MINUS           shift and go to state 189


state 158

    (86) t -> f step3 .
    (87) t -> f step3 . MULT pushPoper t
    (88) t -> f step3 . DIV pushPoper t

    PLUS            reduce using rule 86 (t -> f step3 .)
    MINUS           reduce using rule 86 (t -> f step3 .)
    LT              reduce using rule 86 (t -> f step3 .)
    GT              reduce using rule 86 (t -> f step3 .)
    LTE             reduce using rule 86 (t -> f step3 .)
    GTE             reduce using rule 86 (t -> f step3 .)
    EQUALS          reduce using rule 86 (t -> f step3 .)
    NEQUALS         reduce using rule 86 (t -> f step3 .)
    AND             reduce using rule 86 (t -> f step3 .)
    OR              reduce using rule 86 (t -> f step3 .)
    COMMA           reduce using rule 86 (t -> f step3 .)
    RPAREN          reduce using rule 86 (t -> f step3 .)
    RBRACK          reduce using rule 86 (t -> f step3 .)
    SCOLON          reduce using rule 86 (t -> f step3 .)
    TO              reduce using rule 86 (t -> f step3 .)
    DO              reduce using rule 86 (t -> f step3 .)
    MULT            shift and go to state 190
    DIV             shift and go to state 191


state 159

    (90) f -> CTE_I step1 .

    MULT            reduce using rule 90 (f -> CTE_I step1 .)
    DIV             reduce using rule 90 (f -> CTE_I step1 .)
    PLUS            reduce using rule 90 (f -> CTE_I step1 .)
    MINUS           reduce using rule 90 (f -> CTE_I step1 .)
    LT              reduce using rule 90 (f -> CTE_I step1 .)
    GT              reduce using rule 90 (f -> CTE_I step1 .)
    LTE             reduce using rule 90 (f -> CTE_I step1 .)
    GTE             reduce using rule 90 (f -> CTE_I step1 .)
    EQUALS          reduce using rule 90 (f -> CTE_I step1 .)
    NEQUALS         reduce using rule 90 (f -> CTE_I step1 .)
    AND             reduce using rule 90 (f -> CTE_I step1 .)
    OR              reduce using rule 90 (f -> CTE_I step1 .)
    COMMA           reduce using rule 90 (f -> CTE_I step1 .)
    RPAREN          reduce using rule 90 (f -> CTE_I step1 .)
    RBRACK          reduce using rule 90 (f -> CTE_I step1 .)
    SCOLON          reduce using rule 90 (f -> CTE_I step1 .)
    TO              reduce using rule 90 (f -> CTE_I step1 .)
    DO              reduce using rule 90 (f -> CTE_I step1 .)


state 160

    (91) f -> CTE_F step1 .

    MULT            reduce using rule 91 (f -> CTE_F step1 .)
    DIV             reduce using rule 91 (f -> CTE_F step1 .)
    PLUS            reduce using rule 91 (f -> CTE_F step1 .)
    MINUS           reduce using rule 91 (f -> CTE_F step1 .)
    LT              reduce using rule 91 (f -> CTE_F step1 .)
    GT              reduce using rule 91 (f -> CTE_F step1 .)
    LTE             reduce using rule 91 (f -> CTE_F step1 .)
    GTE             reduce using rule 91 (f -> CTE_F step1 .)
    EQUALS          reduce using rule 91 (f -> CTE_F step1 .)
    NEQUALS         reduce using rule 91 (f -> CTE_F step1 .)
    AND             reduce using rule 91 (f -> CTE_F step1 .)
    OR              reduce using rule 91 (f -> CTE_F step1 .)
    COMMA           reduce using rule 91 (f -> CTE_F step1 .)
    RPAREN          reduce using rule 91 (f -> CTE_F step1 .)
    RBRACK          reduce using rule 91 (f -> CTE_F step1 .)
    SCOLON          reduce using rule 91 (f -> CTE_F step1 .)
    TO              reduce using rule 91 (f -> CTE_F step1 .)
    DO              reduce using rule 91 (f -> CTE_F step1 .)


state 161

    (92) f -> CTE_C step1 .

    MULT            reduce using rule 92 (f -> CTE_C step1 .)
    DIV             reduce using rule 92 (f -> CTE_C step1 .)
    PLUS            reduce using rule 92 (f -> CTE_C step1 .)
    MINUS           reduce using rule 92 (f -> CTE_C step1 .)
    LT              reduce using rule 92 (f -> CTE_C step1 .)
    GT              reduce using rule 92 (f -> CTE_C step1 .)
    LTE             reduce using rule 92 (f -> CTE_C step1 .)
    GTE             reduce using rule 92 (f -> CTE_C step1 .)
    EQUALS          reduce using rule 92 (f -> CTE_C step1 .)
    NEQUALS         reduce using rule 92 (f -> CTE_C step1 .)
    AND             reduce using rule 92 (f -> CTE_C step1 .)
    OR              reduce using rule 92 (f -> CTE_C step1 .)
    COMMA           reduce using rule 92 (f -> CTE_C step1 .)
    RPAREN          reduce using rule 92 (f -> CTE_C step1 .)
    RBRACK          reduce using rule 92 (f -> CTE_C step1 .)
    SCOLON          reduce using rule 92 (f -> CTE_C step1 .)
    TO              reduce using rule 92 (f -> CTE_C step1 .)
    DO              reduce using rule 92 (f -> CTE_C step1 .)


state 162

    (18) idCall -> ID LBRACK exp RBRACK .
    (19) idCall -> ID LBRACK exp RBRACK . LBRACK exp RBRACK

    ASIGNA          reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    MULT            reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    DIV             reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    PLUS            reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    MINUS           reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    LT              reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    GT              reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    LTE             reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    GTE             reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    EQUALS          reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    NEQUALS         reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    AND             reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    OR              reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    COMMA           reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    RPAREN          reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    RBRACK          reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    SCOLON          reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    TO              reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    DO              reduce using rule 18 (idCall -> ID LBRACK exp RBRACK .)
    LBRACK          shift and go to state 192


state 163

    (49) asignacion -> idCall ASIGNA pushPoper exp . asignStep2
    (50) asignStep2 -> .

    SCOLON          reduce using rule 50 (asignStep2 -> .)
    TO              reduce using rule 50 (asignStep2 -> .)

    asignStep2                     shift and go to state 193

state 164

    (57) returnf -> RETURN LPAREN exp RPAREN .

    SCOLON          reduce using rule 57 (returnf -> RETURN LPAREN exp RPAREN .)


state 165

    (58) lectura -> READ pushPoper LPAREN listaId . RPAREN

    RPAREN          shift and go to state 194


state 166

    (59) listaId -> idCall . popIO
    (60) listaId -> idCall . COMMA popIO insertOpRead listaId
    (62) popIO -> .

    COMMA           shift and go to state 196
    RPAREN          reduce using rule 62 (popIO -> .)

    popIO                          shift and go to state 195

state 167

    (63) escritura -> WRITE LPAREN exp lextra . RPAREN

    RPAREN          shift and go to state 197


state 168

    (65) lextra -> COMMA . exp lextra
    (66) lextra -> COMMA . LETRERO lextra
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LETRERO         shift and go to state 199
    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    exp                            shift and go to state 198
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 169

    (67) lextra -> empty .

    RPAREN          reduce using rule 67 (lextra -> empty .)


state 170

    (64) escritura -> WRITE LPAREN LETRERO lextra . RPAREN

    RPAREN          shift and go to state 200


state 171

    (68) condicion -> IF LPAREN exp RPAREN . THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> IF LPAREN exp RPAREN . THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE

    THEN            shift and go to state 201


state 172

    (70) cond_w -> WHILE LPAREN exp RPAREN . DO LBRACE listaEstatutos RBRACE

    DO              shift and go to state 202


state 173

    (71) cond_f -> FOR asignacion TO exp . DO LBRACE listaEstatutos RBRACE

    DO              shift and go to state 203


state 174

    (17) idCall -> ID DOT ID .

    ASIGNA          reduce using rule 17 (idCall -> ID DOT ID .)
    COMMA           reduce using rule 17 (idCall -> ID DOT ID .)
    RPAREN          reduce using rule 17 (idCall -> ID DOT ID .)


state 175

    (36) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE . definFunc
    (36) definFunc -> . tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc
    (37) definFunc -> . empty
    (26) tipoMethod -> . VOID
    (27) tipoMethod -> . INT
    (28) tipoMethod -> . FLOAT
    (29) tipoMethod -> . CHAR
    (104) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    MAIN            reduce using rule 104 (empty -> .)

    tipoMethod                     shift and go to state 14
    definFunc                      shift and go to state 204
    empty                          shift and go to state 15

state 176

    (24) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN . LBRACE listaEstatutos RBRACE declarMethods

    LBRACE          shift and go to state 205


state 177

    (51) llamada -> ID DOT ID LPAREN enviaParam . RPAREN

    RPAREN          shift and go to state 206


state 178

    (89) f -> LPAREN addFF exp . RPAREN rmFF

    RPAREN          shift and go to state 207


state 179

    (56) paramReferencia -> exp COMMA paramReferencia .

    RPAREN          reduce using rule 56 (paramReferencia -> exp COMMA paramReferencia .)


state 180

    (73) exp -> texp step7 OR . pushPoper exp
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 208

state 181

    (75) texp -> gexp step6 AND . pushPoper texp
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 209

state 182

    (77) gexp -> mexp step5 LT . pushPoper mexp
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 210

state 183

    (78) gexp -> mexp step5 GT . pushPoper mexp
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 211

state 184

    (79) gexp -> mexp step5 LTE . pushPoper mexp
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 212

state 185

    (80) gexp -> mexp step5 GTE . pushPoper mexp
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 213

state 186

    (81) gexp -> mexp step5 EQUALS . pushPoper mexp
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 214

state 187

    (82) gexp -> mexp step5 NEQUALS . pushPoper mexp
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 215

state 188

    (84) mexp -> t step4 PLUS . pushPoper mexp
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 216

state 189

    (85) mexp -> t step4 MINUS . pushPoper mexp
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 217

state 190

    (87) t -> f step3 MULT . pushPoper t
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 218

state 191

    (88) t -> f step3 DIV . pushPoper t
    (103) pushPoper -> .

    LPAREN          reduce using rule 103 (pushPoper -> .)
    CTE_I           reduce using rule 103 (pushPoper -> .)
    CTE_F           reduce using rule 103 (pushPoper -> .)
    CTE_C           reduce using rule 103 (pushPoper -> .)
    ID              reduce using rule 103 (pushPoper -> .)

    pushPoper                      shift and go to state 219

state 192

    (19) idCall -> ID LBRACK exp RBRACK LBRACK . exp RBRACK
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    exp                            shift and go to state 220
    texp                           shift and go to state 127
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 193

    (49) asignacion -> idCall ASIGNA pushPoper exp asignStep2 .

    SCOLON          reduce using rule 49 (asignacion -> idCall ASIGNA pushPoper exp asignStep2 .)
    TO              reduce using rule 49 (asignacion -> idCall ASIGNA pushPoper exp asignStep2 .)


state 194

    (58) lectura -> READ pushPoper LPAREN listaId RPAREN .

    SCOLON          reduce using rule 58 (lectura -> READ pushPoper LPAREN listaId RPAREN .)


state 195

    (59) listaId -> idCall popIO .

    RPAREN          reduce using rule 59 (listaId -> idCall popIO .)


state 196

    (60) listaId -> idCall COMMA . popIO insertOpRead listaId
    (62) popIO -> .

    ID              reduce using rule 62 (popIO -> .)

    popIO                          shift and go to state 221

state 197

    (63) escritura -> WRITE LPAREN exp lextra RPAREN .

    SCOLON          reduce using rule 63 (escritura -> WRITE LPAREN exp lextra RPAREN .)


state 198

    (65) lextra -> COMMA exp . lextra
    (65) lextra -> . COMMA exp lextra
    (66) lextra -> . COMMA LETRERO lextra
    (67) lextra -> . empty
    (104) empty -> .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 104 (empty -> .)

    lextra                         shift and go to state 222
    empty                          shift and go to state 169

state 199

    (66) lextra -> COMMA LETRERO . lextra
    (65) lextra -> . COMMA exp lextra
    (66) lextra -> . COMMA LETRERO lextra
    (67) lextra -> . empty
    (104) empty -> .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 104 (empty -> .)

    lextra                         shift and go to state 223
    empty                          shift and go to state 169

state 200

    (64) escritura -> WRITE LPAREN LETRERO lextra RPAREN .

    SCOLON          reduce using rule 64 (escritura -> WRITE LPAREN LETRERO lextra RPAREN .)


state 201

    (68) condicion -> IF LPAREN exp RPAREN THEN . LBRACE listaEstatutos RBRACE
    (69) condicion -> IF LPAREN exp RPAREN THEN . LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 224


state 202

    (70) cond_w -> WHILE LPAREN exp RPAREN DO . LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 225


state 203

    (71) cond_f -> FOR asignacion TO exp DO . LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 226


state 204

    (36) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc .

    MAIN            reduce using rule 36 (definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc .)


state 205

    (24) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE . listaEstatutos RBRACE declarMethods
    (39) listaEstatutos -> . estatutos listaEstatutos
    (40) listaEstatutos -> . empty
    (41) estatutos -> . llamada SCOLON
    (42) estatutos -> . asignacion SCOLON
    (43) estatutos -> . returnf SCOLON
    (44) estatutos -> . lectura SCOLON
    (45) estatutos -> . escritura SCOLON
    (46) estatutos -> . condicion
    (47) estatutos -> . cond_w
    (48) estatutos -> . cond_f
    (104) empty -> .
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (49) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (57) returnf -> . RETURN LPAREN exp RPAREN
    (58) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (63) escritura -> . WRITE LPAREN exp lextra RPAREN
    (64) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (70) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (71) cond_f -> . FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 104 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 227
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 206

    (51) llamada -> ID DOT ID LPAREN enviaParam RPAREN .

    SCOLON          reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    MULT            reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    DIV             reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    PLUS            reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    MINUS           reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    LT              reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    GT              reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    LTE             reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    GTE             reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    EQUALS          reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    NEQUALS         reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    AND             reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    OR              reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    COMMA           reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    RPAREN          reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    RBRACK          reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    TO              reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    DO              reduce using rule 51 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)


state 207

    (89) f -> LPAREN addFF exp RPAREN . rmFF
    (102) rmFF -> .

    MULT            reduce using rule 102 (rmFF -> .)
    DIV             reduce using rule 102 (rmFF -> .)
    PLUS            reduce using rule 102 (rmFF -> .)
    MINUS           reduce using rule 102 (rmFF -> .)
    LT              reduce using rule 102 (rmFF -> .)
    GT              reduce using rule 102 (rmFF -> .)
    LTE             reduce using rule 102 (rmFF -> .)
    GTE             reduce using rule 102 (rmFF -> .)
    EQUALS          reduce using rule 102 (rmFF -> .)
    NEQUALS         reduce using rule 102 (rmFF -> .)
    AND             reduce using rule 102 (rmFF -> .)
    OR              reduce using rule 102 (rmFF -> .)
    COMMA           reduce using rule 102 (rmFF -> .)
    RPAREN          reduce using rule 102 (rmFF -> .)
    RBRACK          reduce using rule 102 (rmFF -> .)
    SCOLON          reduce using rule 102 (rmFF -> .)
    TO              reduce using rule 102 (rmFF -> .)
    DO              reduce using rule 102 (rmFF -> .)

    rmFF                           shift and go to state 228

state 208

    (73) exp -> texp step7 OR pushPoper . exp
    (72) exp -> . texp step7
    (73) exp -> . texp step7 OR pushPoper exp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    texp                           shift and go to state 127
    exp                            shift and go to state 229
    gexp                           shift and go to state 128
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 209

    (75) texp -> gexp step6 AND pushPoper . texp
    (74) texp -> . gexp step6
    (75) texp -> . gexp step6 AND pushPoper texp
    (76) gexp -> . mexp step5
    (77) gexp -> . mexp step5 LT pushPoper mexp
    (78) gexp -> . mexp step5 GT pushPoper mexp
    (79) gexp -> . mexp step5 LTE pushPoper mexp
    (80) gexp -> . mexp step5 GTE pushPoper mexp
    (81) gexp -> . mexp step5 EQUALS pushPoper mexp
    (82) gexp -> . mexp step5 NEQUALS pushPoper mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    gexp                           shift and go to state 128
    texp                           shift and go to state 230
    mexp                           shift and go to state 129
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 210

    (77) gexp -> mexp step5 LT pushPoper . mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    mexp                           shift and go to state 231
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 211

    (78) gexp -> mexp step5 GT pushPoper . mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    mexp                           shift and go to state 232
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 212

    (79) gexp -> mexp step5 LTE pushPoper . mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    mexp                           shift and go to state 233
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 213

    (80) gexp -> mexp step5 GTE pushPoper . mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    mexp                           shift and go to state 234
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 214

    (81) gexp -> mexp step5 EQUALS pushPoper . mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    mexp                           shift and go to state 235
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 215

    (82) gexp -> mexp step5 NEQUALS pushPoper . mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    mexp                           shift and go to state 236
    t                              shift and go to state 130
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 216

    (84) mexp -> t step4 PLUS pushPoper . mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    t                              shift and go to state 130
    mexp                           shift and go to state 237
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 217

    (85) mexp -> t step4 MINUS pushPoper . mexp
    (83) mexp -> . t step4
    (84) mexp -> . t step4 PLUS pushPoper mexp
    (85) mexp -> . t step4 MINUS pushPoper mexp
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    t                              shift and go to state 130
    mexp                           shift and go to state 238
    f                              shift and go to state 131
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 218

    (87) t -> f step3 MULT pushPoper . t
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    f                              shift and go to state 131
    t                              shift and go to state 239
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 219

    (88) t -> f step3 DIV pushPoper . t
    (86) t -> . f step3
    (87) t -> . f step3 MULT pushPoper t
    (88) t -> . f step3 DIV pushPoper t
    (89) f -> . LPAREN addFF exp RPAREN rmFF
    (90) f -> . CTE_I step1
    (91) f -> . CTE_F step1
    (92) f -> . CTE_C step1
    (93) f -> . llamada
    (94) f -> . idCall
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 122
    CTE_I           shift and go to state 132
    CTE_F           shift and go to state 133
    CTE_C           shift and go to state 134
    ID              shift and go to state 74

    f                              shift and go to state 131
    t                              shift and go to state 240
    llamada                        shift and go to state 135
    idCall                         shift and go to state 136

state 220

    (19) idCall -> ID LBRACK exp RBRACK LBRACK exp . RBRACK

    RBRACK          shift and go to state 241


state 221

    (60) listaId -> idCall COMMA popIO . insertOpRead listaId
    (61) insertOpRead -> .

    ID              reduce using rule 61 (insertOpRead -> .)

    insertOpRead                   shift and go to state 242

state 222

    (65) lextra -> COMMA exp lextra .

    RPAREN          reduce using rule 65 (lextra -> COMMA exp lextra .)


state 223

    (66) lextra -> COMMA LETRERO lextra .

    RPAREN          reduce using rule 66 (lextra -> COMMA LETRERO lextra .)


state 224

    (68) condicion -> IF LPAREN exp RPAREN THEN LBRACE . listaEstatutos RBRACE
    (69) condicion -> IF LPAREN exp RPAREN THEN LBRACE . listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (39) listaEstatutos -> . estatutos listaEstatutos
    (40) listaEstatutos -> . empty
    (41) estatutos -> . llamada SCOLON
    (42) estatutos -> . asignacion SCOLON
    (43) estatutos -> . returnf SCOLON
    (44) estatutos -> . lectura SCOLON
    (45) estatutos -> . escritura SCOLON
    (46) estatutos -> . condicion
    (47) estatutos -> . cond_w
    (48) estatutos -> . cond_f
    (104) empty -> .
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (49) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (57) returnf -> . RETURN LPAREN exp RPAREN
    (58) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (63) escritura -> . WRITE LPAREN exp lextra RPAREN
    (64) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (70) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (71) cond_f -> . FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 104 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 243
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 225

    (70) cond_w -> WHILE LPAREN exp RPAREN DO LBRACE . listaEstatutos RBRACE
    (39) listaEstatutos -> . estatutos listaEstatutos
    (40) listaEstatutos -> . empty
    (41) estatutos -> . llamada SCOLON
    (42) estatutos -> . asignacion SCOLON
    (43) estatutos -> . returnf SCOLON
    (44) estatutos -> . lectura SCOLON
    (45) estatutos -> . escritura SCOLON
    (46) estatutos -> . condicion
    (47) estatutos -> . cond_w
    (48) estatutos -> . cond_f
    (104) empty -> .
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (49) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (57) returnf -> . RETURN LPAREN exp RPAREN
    (58) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (63) escritura -> . WRITE LPAREN exp lextra RPAREN
    (64) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (70) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (71) cond_f -> . FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 104 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 244
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 226

    (71) cond_f -> FOR asignacion TO exp DO LBRACE . listaEstatutos RBRACE
    (39) listaEstatutos -> . estatutos listaEstatutos
    (40) listaEstatutos -> . empty
    (41) estatutos -> . llamada SCOLON
    (42) estatutos -> . asignacion SCOLON
    (43) estatutos -> . returnf SCOLON
    (44) estatutos -> . lectura SCOLON
    (45) estatutos -> . escritura SCOLON
    (46) estatutos -> . condicion
    (47) estatutos -> . cond_w
    (48) estatutos -> . cond_f
    (104) empty -> .
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (49) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (57) returnf -> . RETURN LPAREN exp RPAREN
    (58) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (63) escritura -> . WRITE LPAREN exp lextra RPAREN
    (64) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (70) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (71) cond_f -> . FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 104 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    asignacion                     shift and go to state 79
    listaEstatutos                 shift and go to state 245
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 227

    (24) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos . RBRACE declarMethods

    RBRACE          shift and go to state 246


state 228

    (89) f -> LPAREN addFF exp RPAREN rmFF .

    MULT            reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    DIV             reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    PLUS            reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    MINUS           reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    LT              reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    GT              reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    LTE             reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    GTE             reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    EQUALS          reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    NEQUALS         reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    AND             reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    OR              reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    COMMA           reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    RPAREN          reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    RBRACK          reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    SCOLON          reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    TO              reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)
    DO              reduce using rule 89 (f -> LPAREN addFF exp RPAREN rmFF .)


state 229

    (73) exp -> texp step7 OR pushPoper exp .

    COMMA           reduce using rule 73 (exp -> texp step7 OR pushPoper exp .)
    RPAREN          reduce using rule 73 (exp -> texp step7 OR pushPoper exp .)
    RBRACK          reduce using rule 73 (exp -> texp step7 OR pushPoper exp .)
    SCOLON          reduce using rule 73 (exp -> texp step7 OR pushPoper exp .)
    TO              reduce using rule 73 (exp -> texp step7 OR pushPoper exp .)
    DO              reduce using rule 73 (exp -> texp step7 OR pushPoper exp .)


state 230

    (75) texp -> gexp step6 AND pushPoper texp .

    OR              reduce using rule 75 (texp -> gexp step6 AND pushPoper texp .)
    COMMA           reduce using rule 75 (texp -> gexp step6 AND pushPoper texp .)
    RPAREN          reduce using rule 75 (texp -> gexp step6 AND pushPoper texp .)
    RBRACK          reduce using rule 75 (texp -> gexp step6 AND pushPoper texp .)
    SCOLON          reduce using rule 75 (texp -> gexp step6 AND pushPoper texp .)
    TO              reduce using rule 75 (texp -> gexp step6 AND pushPoper texp .)
    DO              reduce using rule 75 (texp -> gexp step6 AND pushPoper texp .)


state 231

    (77) gexp -> mexp step5 LT pushPoper mexp .

    AND             reduce using rule 77 (gexp -> mexp step5 LT pushPoper mexp .)
    OR              reduce using rule 77 (gexp -> mexp step5 LT pushPoper mexp .)
    COMMA           reduce using rule 77 (gexp -> mexp step5 LT pushPoper mexp .)
    RPAREN          reduce using rule 77 (gexp -> mexp step5 LT pushPoper mexp .)
    RBRACK          reduce using rule 77 (gexp -> mexp step5 LT pushPoper mexp .)
    SCOLON          reduce using rule 77 (gexp -> mexp step5 LT pushPoper mexp .)
    TO              reduce using rule 77 (gexp -> mexp step5 LT pushPoper mexp .)
    DO              reduce using rule 77 (gexp -> mexp step5 LT pushPoper mexp .)


state 232

    (78) gexp -> mexp step5 GT pushPoper mexp .

    AND             reduce using rule 78 (gexp -> mexp step5 GT pushPoper mexp .)
    OR              reduce using rule 78 (gexp -> mexp step5 GT pushPoper mexp .)
    COMMA           reduce using rule 78 (gexp -> mexp step5 GT pushPoper mexp .)
    RPAREN          reduce using rule 78 (gexp -> mexp step5 GT pushPoper mexp .)
    RBRACK          reduce using rule 78 (gexp -> mexp step5 GT pushPoper mexp .)
    SCOLON          reduce using rule 78 (gexp -> mexp step5 GT pushPoper mexp .)
    TO              reduce using rule 78 (gexp -> mexp step5 GT pushPoper mexp .)
    DO              reduce using rule 78 (gexp -> mexp step5 GT pushPoper mexp .)


state 233

    (79) gexp -> mexp step5 LTE pushPoper mexp .

    AND             reduce using rule 79 (gexp -> mexp step5 LTE pushPoper mexp .)
    OR              reduce using rule 79 (gexp -> mexp step5 LTE pushPoper mexp .)
    COMMA           reduce using rule 79 (gexp -> mexp step5 LTE pushPoper mexp .)
    RPAREN          reduce using rule 79 (gexp -> mexp step5 LTE pushPoper mexp .)
    RBRACK          reduce using rule 79 (gexp -> mexp step5 LTE pushPoper mexp .)
    SCOLON          reduce using rule 79 (gexp -> mexp step5 LTE pushPoper mexp .)
    TO              reduce using rule 79 (gexp -> mexp step5 LTE pushPoper mexp .)
    DO              reduce using rule 79 (gexp -> mexp step5 LTE pushPoper mexp .)


state 234

    (80) gexp -> mexp step5 GTE pushPoper mexp .

    AND             reduce using rule 80 (gexp -> mexp step5 GTE pushPoper mexp .)
    OR              reduce using rule 80 (gexp -> mexp step5 GTE pushPoper mexp .)
    COMMA           reduce using rule 80 (gexp -> mexp step5 GTE pushPoper mexp .)
    RPAREN          reduce using rule 80 (gexp -> mexp step5 GTE pushPoper mexp .)
    RBRACK          reduce using rule 80 (gexp -> mexp step5 GTE pushPoper mexp .)
    SCOLON          reduce using rule 80 (gexp -> mexp step5 GTE pushPoper mexp .)
    TO              reduce using rule 80 (gexp -> mexp step5 GTE pushPoper mexp .)
    DO              reduce using rule 80 (gexp -> mexp step5 GTE pushPoper mexp .)


state 235

    (81) gexp -> mexp step5 EQUALS pushPoper mexp .

    AND             reduce using rule 81 (gexp -> mexp step5 EQUALS pushPoper mexp .)
    OR              reduce using rule 81 (gexp -> mexp step5 EQUALS pushPoper mexp .)
    COMMA           reduce using rule 81 (gexp -> mexp step5 EQUALS pushPoper mexp .)
    RPAREN          reduce using rule 81 (gexp -> mexp step5 EQUALS pushPoper mexp .)
    RBRACK          reduce using rule 81 (gexp -> mexp step5 EQUALS pushPoper mexp .)
    SCOLON          reduce using rule 81 (gexp -> mexp step5 EQUALS pushPoper mexp .)
    TO              reduce using rule 81 (gexp -> mexp step5 EQUALS pushPoper mexp .)
    DO              reduce using rule 81 (gexp -> mexp step5 EQUALS pushPoper mexp .)


state 236

    (82) gexp -> mexp step5 NEQUALS pushPoper mexp .

    AND             reduce using rule 82 (gexp -> mexp step5 NEQUALS pushPoper mexp .)
    OR              reduce using rule 82 (gexp -> mexp step5 NEQUALS pushPoper mexp .)
    COMMA           reduce using rule 82 (gexp -> mexp step5 NEQUALS pushPoper mexp .)
    RPAREN          reduce using rule 82 (gexp -> mexp step5 NEQUALS pushPoper mexp .)
    RBRACK          reduce using rule 82 (gexp -> mexp step5 NEQUALS pushPoper mexp .)
    SCOLON          reduce using rule 82 (gexp -> mexp step5 NEQUALS pushPoper mexp .)
    TO              reduce using rule 82 (gexp -> mexp step5 NEQUALS pushPoper mexp .)
    DO              reduce using rule 82 (gexp -> mexp step5 NEQUALS pushPoper mexp .)


state 237

    (84) mexp -> t step4 PLUS pushPoper mexp .

    LT              reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    GT              reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    LTE             reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    GTE             reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    EQUALS          reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    NEQUALS         reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    AND             reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    OR              reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    COMMA           reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    RPAREN          reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    RBRACK          reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    SCOLON          reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    TO              reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)
    DO              reduce using rule 84 (mexp -> t step4 PLUS pushPoper mexp .)


state 238

    (85) mexp -> t step4 MINUS pushPoper mexp .

    LT              reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    GT              reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    LTE             reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    GTE             reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    EQUALS          reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    NEQUALS         reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    AND             reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    OR              reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    COMMA           reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    RPAREN          reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    RBRACK          reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    SCOLON          reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    TO              reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)
    DO              reduce using rule 85 (mexp -> t step4 MINUS pushPoper mexp .)


state 239

    (87) t -> f step3 MULT pushPoper t .

    PLUS            reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    MINUS           reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    LT              reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    GT              reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    LTE             reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    GTE             reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    EQUALS          reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    NEQUALS         reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    AND             reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    OR              reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    COMMA           reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    RPAREN          reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    RBRACK          reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    SCOLON          reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    TO              reduce using rule 87 (t -> f step3 MULT pushPoper t .)
    DO              reduce using rule 87 (t -> f step3 MULT pushPoper t .)


state 240

    (88) t -> f step3 DIV pushPoper t .

    PLUS            reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    MINUS           reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    LT              reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    GT              reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    LTE             reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    GTE             reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    EQUALS          reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    NEQUALS         reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    AND             reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    OR              reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    COMMA           reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    RPAREN          reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    RBRACK          reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    SCOLON          reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    TO              reduce using rule 88 (t -> f step3 DIV pushPoper t .)
    DO              reduce using rule 88 (t -> f step3 DIV pushPoper t .)


state 241

    (19) idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .

    ASIGNA          reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    MULT            reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    DIV             reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    PLUS            reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    MINUS           reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    LT              reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    GT              reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    LTE             reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    GTE             reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    EQUALS          reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    NEQUALS         reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    AND             reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    OR              reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    COMMA           reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    RPAREN          reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    RBRACK          reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    SCOLON          reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    TO              reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    DO              reduce using rule 19 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)


state 242

    (60) listaId -> idCall COMMA popIO insertOpRead . listaId
    (59) listaId -> . idCall popIO
    (60) listaId -> . idCall COMMA popIO insertOpRead listaId
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    ID              shift and go to state 117

    idCall                         shift and go to state 166
    listaId                        shift and go to state 247

state 243

    (68) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos . RBRACE
    (69) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos . RBRACE ELSE LBRACE listaEstatutos RBRACE

    RBRACE          shift and go to state 248


state 244

    (70) cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos . RBRACE

    RBRACE          shift and go to state 249


state 245

    (71) cond_f -> FOR asignacion TO exp DO LBRACE listaEstatutos . RBRACE

    RBRACE          shift and go to state 250


state 246

    (24) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE . declarMethods
    (24) declarMethods -> . tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (25) declarMethods -> . empty
    (26) tipoMethod -> . VOID
    (27) tipoMethod -> . INT
    (28) tipoMethod -> . FLOAT
    (29) tipoMethod -> . CHAR
    (104) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    RBRACE          reduce using rule 104 (empty -> .)

    tipoMethod                     shift and go to state 63
    declarMethods                  shift and go to state 251
    empty                          shift and go to state 64

state 247

    (60) listaId -> idCall COMMA popIO insertOpRead listaId .

    RPAREN          reduce using rule 60 (listaId -> idCall COMMA popIO insertOpRead listaId .)


state 248

    (68) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .
    (69) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE . ELSE LBRACE listaEstatutos RBRACE

    ID              reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 68 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE .)
    ELSE            shift and go to state 252


state 249

    (70) cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .

    ID              reduce using rule 70 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 70 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 70 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 70 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 70 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 70 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 70 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 70 (cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE .)


state 250

    (71) cond_f -> FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE .

    ID              reduce using rule 71 (cond_f -> FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 71 (cond_f -> FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 71 (cond_f -> FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 71 (cond_f -> FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 71 (cond_f -> FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 71 (cond_f -> FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 71 (cond_f -> FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 71 (cond_f -> FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE .)


state 251

    (24) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods .

    RBRACE          reduce using rule 24 (declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods .)


state 252

    (69) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE . LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 253


state 253

    (69) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE . listaEstatutos RBRACE
    (39) listaEstatutos -> . estatutos listaEstatutos
    (40) listaEstatutos -> . empty
    (41) estatutos -> . llamada SCOLON
    (42) estatutos -> . asignacion SCOLON
    (43) estatutos -> . returnf SCOLON
    (44) estatutos -> . lectura SCOLON
    (45) estatutos -> . escritura SCOLON
    (46) estatutos -> . condicion
    (47) estatutos -> . cond_w
    (48) estatutos -> . cond_f
    (104) empty -> .
    (51) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (52) llamada -> . ID LPAREN enviaParam RPAREN
    (49) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (57) returnf -> . RETURN LPAREN exp RPAREN
    (58) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (63) escritura -> . WRITE LPAREN exp lextra RPAREN
    (64) escritura -> . WRITE LPAREN LETRERO lextra RPAREN
    (68) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE
    (69) condicion -> . IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE
    (70) cond_w -> . WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE
    (71) cond_f -> . FOR asignacion TO exp DO LBRACE listaEstatutos RBRACE
    (16) idCall -> . ID
    (17) idCall -> . ID DOT ID
    (18) idCall -> . ID LBRACK exp RBRACK
    (19) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 104 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 254
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 254

    (69) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos . RBRACE

    RBRACE          shift and go to state 255


state 255

    (69) condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .

    ID              reduce using rule 69 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 69 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 69 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 69 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 69 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 69 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 69 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 69 (condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE .)

