Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    QUOTE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
Rule 2     prueba -> <empty>
Rule 3     initProg -> <empty>
Rule 4     auxMain -> <empty>
Rule 5     endProg -> <empty>
Rule 6     declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
Rule 7     declarClases -> empty
Rule 8     herencia -> LT EXTENDS ID GT
Rule 9     herencia -> empty
Rule 10    declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes
Rule 11    declarAttributes -> empty
Rule 12    listaIdDeclare -> idDeclare
Rule 13    listaIdDeclare -> idDeclare COMMA listaIdDeclare
Rule 14    idDeclare -> ID
Rule 15    idDeclare -> ID LBRACK CTE_I RBRACK
Rule 16    idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK
Rule 17    idCall -> ID
Rule 18    idCall -> ID DOT ID
Rule 19    idCall -> ID LBRACK exp RBRACK
Rule 20    idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK
Rule 21    tipo -> ID
Rule 22    tipo -> INT
Rule 23    tipo -> FLOAT
Rule 24    tipo -> CHAR
Rule 25    declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
Rule 26    declarMethods -> empty
Rule 27    tipoMethod -> VOID
Rule 28    tipoMethod -> INT
Rule 29    tipoMethod -> FLOAT
Rule 30    tipoMethod -> CHAR
Rule 31    listaParam -> param
Rule 32    listaParam -> param COMMA listaParam
Rule 33    listaParam -> empty
Rule 34    param -> tipo COLON ID
Rule 35    declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar
Rule 36    declarVar -> empty
Rule 37    definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
Rule 38    definFunc -> empty
Rule 39    auxFuncion -> <empty>
Rule 40    setDI -> <empty>
Rule 41    endF -> <empty>
Rule 42    listaEstatutos -> estatutos listaEstatutos
Rule 43    listaEstatutos -> empty
Rule 44    estatutos -> llamada SCOLON
Rule 45    estatutos -> asignacion SCOLON
Rule 46    estatutos -> returnf SCOLON
Rule 47    estatutos -> lectura SCOLON
Rule 48    estatutos -> escritura SCOLON
Rule 49    estatutos -> condicion
Rule 50    estatutos -> cond_w
Rule 51    estatutos -> cond_f
Rule 52    asignacion -> idCall ASIGNA pushPoper exp asignStep2
Rule 53    asignStep2 -> <empty>
Rule 54    llamada -> ID DOT ID LPAREN enviaParam RPAREN
Rule 55    llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN
Rule 56    enviaParam -> paramReferencia
Rule 57    enviaParam -> empty
Rule 58    paramReferencia -> exp paramType
Rule 59    paramReferencia -> exp paramType COMMA paramCount paramReferencia
Rule 60    verExist -> <empty>
Rule 61    paramType -> <empty>
Rule 62    paramCount -> <empty>
Rule 63    coherenceGo -> <empty>
Rule 64    returnf -> RETURN pushPoper LPAREN exp RPAREN popReturn
Rule 65    popReturn -> <empty>
Rule 66    lectura -> READ pushPoper LPAREN listaId RPAREN
Rule 67    listaId -> idCall popIO
Rule 68    listaId -> idCall COMMA popIO insertOpRead listaId
Rule 69    insertOpRead -> <empty>
Rule 70    popIO -> <empty>
Rule 71    escritura -> WRITE pushPoper LPAREN exp popIO lextra RPAREN
Rule 72    escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
Rule 73    lextra -> COMMA insertOpWrite exp popIO lextra
Rule 74    lextra -> COMMA insertOpWrite LETRERO letreroPush popIO lextra
Rule 75    lextra -> empty
Rule 76    insertOpWrite -> <empty>
Rule 77    letreroPush -> <empty>
Rule 78    condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
Rule 79    condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
Rule 80    cond1 -> <empty>
Rule 81    cond3 -> <empty>
Rule 82    cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
Rule 83    step1While -> <empty>
Rule 84    step2While -> <empty>
Rule 85    step3While -> <empty>
Rule 86    cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
Rule 87    step1For -> <empty>
Rule 88    exp -> texp step7
Rule 89    exp -> texp step7 OR pushPoper exp
Rule 90    texp -> gexp step6
Rule 91    texp -> gexp step6 AND pushPoper texp
Rule 92    gexp -> mexp step5
Rule 93    gexp -> mexp step5 LT pushPoper gexp
Rule 94    gexp -> mexp step5 GT pushPoper gexp
Rule 95    gexp -> mexp step5 LTE pushPoper gexp
Rule 96    gexp -> mexp step5 GTE pushPoper gexp
Rule 97    gexp -> mexp step5 EQUALS pushPoper gexp
Rule 98    gexp -> mexp step5 NEQUALS pushPoper gexp
Rule 99    mexp -> t step4
Rule 100   mexp -> t step4 PLUS pushPoper mexp
Rule 101   mexp -> t step4 MINUS pushPoper mexp
Rule 102   t -> f step3
Rule 103   t -> f step3 MULT pushPoper t
Rule 104   t -> f step3 DIV pushPoper t
Rule 105   f -> LPAREN addFF exp RPAREN rmFF
Rule 106   f -> CTE_I step1
Rule 107   f -> CTE_F step1
Rule 108   f -> CTE_C step1
Rule 109   f -> llamada
Rule 110   f -> idCall
Rule 111   step1 -> <empty>
Rule 112   step3 -> <empty>
Rule 113   step4 -> <empty>
Rule 114   step5 -> <empty>
Rule 115   step6 -> <empty>
Rule 116   step7 -> <empty>
Rule 117   addFF -> <empty>
Rule 118   rmFF -> <empty>
Rule 119   pushPoper -> <empty>
Rule 120   empty -> <empty>

Terminals, with rules where they appear

AND                  : 91
ASIGNA               : 52
ATTRIBUTES           : 6
CHAR                 : 24 30
CLASS                : 6
COLON                : 10 34 35
COMMA                : 13 32 59 68 73 74
CTE_C                : 108
CTE_F                : 107
CTE_I                : 15 16 16 106
DIV                  : 104
DO                   : 82 86
DOT                  : 18 54
ELSE                 : 79
EQUALS               : 97
EXTENDS              : 8
FLOAT                : 23 29
FOR                  : 86
FUNC                 : 25 37
GT                   : 8 94
GTE                  : 96
ID                   : 1 6 8 14 15 16 17 18 18 19 20 21 25 34 37 54 54 55
IF                   : 78 79
INT                  : 22 28
LBRACE               : 1 6 25 37 78 79 79 82 86
LBRACK               : 15 16 16 19 20 20
LETRERO              : 72 74
LPAREN               : 1 25 37 54 55 64 66 71 72 78 79 82 105
LT                   : 8 93
LTE                  : 95
MAIN                 : 1
METHODS              : 6
MINUS                : 101
MULT                 : 103
NEQUALS              : 98
OR                   : 89
PLUS                 : 100
PROGRAM              : 1
QUOTE                : 
RBRACE               : 1 6 25 37 78 79 79 82 86
RBRACK               : 15 16 16 19 20 20
READ                 : 66
RETURN               : 64
RPAREN               : 1 25 37 54 55 64 66 71 72 78 79 82 105
SCOLON               : 1 10 35 44 45 46 47 48
THEN                 : 78 79
TO                   : 86
VAR                  : 35
VOID                 : 27
WHILE                : 82
WRITE                : 71 72
error                : 

Nonterminals, with rules where they appear

addFF                : 105
asignStep2           : 52
asignacion           : 45 86
auxFuncion           : 37
auxMain              : 1
coherenceGo          : 55
cond1                : 78 79
cond3                : 79
cond_f               : 51
cond_w               : 50
condicion            : 49
declarAttributes     : 6 10
declarClases         : 1 6
declarMethods        : 6 25
declarVar            : 1 1 35 37
definFunc            : 1 37
empty                : 7 9 11 26 33 36 38 43 57 75
endF                 : 37
endProg              : 1
enviaParam           : 54 55
escritura            : 48
estatutos            : 42
exp                  : 19 20 20 52 58 59 64 71 73 78 79 82 86 89 105
f                    : 102 103 104
gexp                 : 90 91 93 94 95 96 97 98
herencia             : 6
idCall               : 52 67 68 110
idDeclare            : 12 13
initProg             : 1
insertOpRead         : 68
insertOpWrite        : 73 74
lectura              : 47
letreroPush          : 72 74
lextra               : 71 72 73 74
listaEstatutos       : 1 25 37 42 78 79 79 82 86
listaId              : 66 68
listaIdDeclare       : 10 13 35
listaParam           : 25 32 37
llamada              : 44 109
mexp                 : 92 93 94 95 96 97 98 100 101
param                : 31 32
paramCount           : 59
paramReferencia      : 56 59
paramType            : 58 59
popIO                : 67 68 71 72 73 74
popReturn            : 64
program              : 0
prueba               : 1
pushPoper            : 52 64 66 71 72 89 91 93 94 95 96 97 98 100 101 103 104
returnf              : 46
rmFF                 : 105
setDI                : 37
step1                : 106 107 108
step1For             : 86
step1While           : 82 86
step2While           : 82 86
step3                : 102 103 104
step3While           : 82 86
step4                : 99 100 101
step5                : 92 93 94 95 96 97 98
step6                : 90 91
step7                : 88 89
t                    : 99 100 101 103 104
texp                 : 88 89 91
tipo                 : 10 34 35
tipoMethod           : 25 37
verExist             : 55

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (3) initProg -> .

    SCOLON          reduce using rule 3 (initProg -> .)

    initProg                       shift and go to state 4

state 4

    (1) program -> PROGRAM ID initProg . SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    SCOLON          shift and go to state 5


state 5

    (1) program -> PROGRAM ID initProg SCOLON . declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (6) declarClases -> . CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (7) declarClases -> . empty
    (120) empty -> .

    CLASS           shift and go to state 7
    VAR             reduce using rule 120 (empty -> .)
    VOID            reduce using rule 120 (empty -> .)
    INT             reduce using rule 120 (empty -> .)
    FLOAT           reduce using rule 120 (empty -> .)
    CHAR            reduce using rule 120 (empty -> .)
    MAIN            reduce using rule 120 (empty -> .)

    declarClases                   shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM ID initProg SCOLON declarClases . declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (35) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (36) declarVar -> . empty
    (120) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 120 (empty -> .)
    INT             reduce using rule 120 (empty -> .)
    FLOAT           reduce using rule 120 (empty -> .)
    CHAR            reduce using rule 120 (empty -> .)
    MAIN            reduce using rule 120 (empty -> .)

    declarVar                      shift and go to state 9
    empty                          shift and go to state 11

state 7

    (6) declarClases -> CLASS . ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    ID              shift and go to state 12


state 8

    (7) declarClases -> empty .

    VAR             reduce using rule 7 (declarClases -> empty .)
    VOID            reduce using rule 7 (declarClases -> empty .)
    INT             reduce using rule 7 (declarClases -> empty .)
    FLOAT           reduce using rule 7 (declarClases -> empty .)
    CHAR            reduce using rule 7 (declarClases -> empty .)
    MAIN            reduce using rule 7 (declarClases -> empty .)


state 9

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar . definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (37) definFunc -> . tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (38) definFunc -> . empty
    (27) tipoMethod -> . VOID
    (28) tipoMethod -> . INT
    (29) tipoMethod -> . FLOAT
    (30) tipoMethod -> . CHAR
    (120) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    MAIN            reduce using rule 120 (empty -> .)

    definFunc                      shift and go to state 13
    tipoMethod                     shift and go to state 14
    empty                          shift and go to state 15

state 10

    (35) declarVar -> VAR . tipo COLON listaIdDeclare SCOLON declarVar
    (21) tipo -> . ID
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    tipo                           shift and go to state 20

state 11

    (36) declarVar -> empty .

    VOID            reduce using rule 36 (declarVar -> empty .)
    INT             reduce using rule 36 (declarVar -> empty .)
    FLOAT           reduce using rule 36 (declarVar -> empty .)
    CHAR            reduce using rule 36 (declarVar -> empty .)
    MAIN            reduce using rule 36 (declarVar -> empty .)
    LBRACE          reduce using rule 36 (declarVar -> empty .)


state 12

    (6) declarClases -> CLASS ID . herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (8) herencia -> . LT EXTENDS ID GT
    (9) herencia -> . empty
    (120) empty -> .

    LT              shift and go to state 26
    LBRACE          reduce using rule 120 (empty -> .)

    herencia                       shift and go to state 25
    empty                          shift and go to state 27

state 13

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc . MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    MAIN            shift and go to state 28


state 14

    (37) definFunc -> tipoMethod . FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    FUNC            shift and go to state 29


state 15

    (38) definFunc -> empty .

    MAIN            reduce using rule 38 (definFunc -> empty .)


state 16

    (27) tipoMethod -> VOID .

    FUNC            reduce using rule 27 (tipoMethod -> VOID .)


state 17

    (28) tipoMethod -> INT .

    FUNC            reduce using rule 28 (tipoMethod -> INT .)


state 18

    (29) tipoMethod -> FLOAT .

    FUNC            reduce using rule 29 (tipoMethod -> FLOAT .)


state 19

    (30) tipoMethod -> CHAR .

    FUNC            reduce using rule 30 (tipoMethod -> CHAR .)


state 20

    (35) declarVar -> VAR tipo . COLON listaIdDeclare SCOLON declarVar

    COLON           shift and go to state 30


state 21

    (21) tipo -> ID .

    COLON           reduce using rule 21 (tipo -> ID .)


state 22

    (22) tipo -> INT .

    COLON           reduce using rule 22 (tipo -> INT .)


state 23

    (23) tipo -> FLOAT .

    COLON           reduce using rule 23 (tipo -> FLOAT .)


state 24

    (24) tipo -> CHAR .

    COLON           reduce using rule 24 (tipo -> CHAR .)


state 25

    (6) declarClases -> CLASS ID herencia . LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    LBRACE          shift and go to state 31


state 26

    (8) herencia -> LT . EXTENDS ID GT

    EXTENDS         shift and go to state 32


state 27

    (9) herencia -> empty .

    LBRACE          reduce using rule 9 (herencia -> empty .)


state 28

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN . auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (4) auxMain -> .

    LPAREN          reduce using rule 4 (auxMain -> .)

    auxMain                        shift and go to state 33

state 29

    (37) definFunc -> tipoMethod FUNC . ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    ID              shift and go to state 34


state 30

    (35) declarVar -> VAR tipo COLON . listaIdDeclare SCOLON declarVar
    (12) listaIdDeclare -> . idDeclare
    (13) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (14) idDeclare -> . ID
    (15) idDeclare -> . ID LBRACK CTE_I RBRACK
    (16) idDeclare -> . ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    ID              shift and go to state 37

    listaIdDeclare                 shift and go to state 35
    idDeclare                      shift and go to state 36

state 31

    (6) declarClases -> CLASS ID herencia LBRACE . ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    ATTRIBUTES      shift and go to state 38


state 32

    (8) herencia -> LT EXTENDS . ID GT

    ID              shift and go to state 39


state 33

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain . LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    LPAREN          shift and go to state 40


state 34

    (37) definFunc -> tipoMethod FUNC ID . auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (39) auxFuncion -> .

    LPAREN          reduce using rule 39 (auxFuncion -> .)

    auxFuncion                     shift and go to state 41

state 35

    (35) declarVar -> VAR tipo COLON listaIdDeclare . SCOLON declarVar

    SCOLON          shift and go to state 42


state 36

    (12) listaIdDeclare -> idDeclare .
    (13) listaIdDeclare -> idDeclare . COMMA listaIdDeclare

    SCOLON          reduce using rule 12 (listaIdDeclare -> idDeclare .)
    COMMA           shift and go to state 43


state 37

    (14) idDeclare -> ID .
    (15) idDeclare -> ID . LBRACK CTE_I RBRACK
    (16) idDeclare -> ID . LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    COMMA           reduce using rule 14 (idDeclare -> ID .)
    SCOLON          reduce using rule 14 (idDeclare -> ID .)
    LBRACK          shift and go to state 44


state 38

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES . declarAttributes METHODS declarMethods RBRACE declarClases
    (10) declarAttributes -> . tipo COLON listaIdDeclare SCOLON declarAttributes
    (11) declarAttributes -> . empty
    (21) tipo -> . ID
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (120) empty -> .

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    METHODS         reduce using rule 120 (empty -> .)

    declarAttributes               shift and go to state 45
    tipo                           shift and go to state 46
    empty                          shift and go to state 47

state 39

    (8) herencia -> LT EXTENDS ID . GT

    GT              shift and go to state 48


state 40

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN . RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    RPAREN          shift and go to state 49


state 41

    (37) definFunc -> tipoMethod FUNC ID auxFuncion . LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    LPAREN          shift and go to state 50


state 42

    (35) declarVar -> VAR tipo COLON listaIdDeclare SCOLON . declarVar
    (35) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (36) declarVar -> . empty
    (120) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 120 (empty -> .)
    INT             reduce using rule 120 (empty -> .)
    FLOAT           reduce using rule 120 (empty -> .)
    CHAR            reduce using rule 120 (empty -> .)
    MAIN            reduce using rule 120 (empty -> .)
    LBRACE          reduce using rule 120 (empty -> .)

    declarVar                      shift and go to state 51
    empty                          shift and go to state 11

state 43

    (13) listaIdDeclare -> idDeclare COMMA . listaIdDeclare
    (12) listaIdDeclare -> . idDeclare
    (13) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (14) idDeclare -> . ID
    (15) idDeclare -> . ID LBRACK CTE_I RBRACK
    (16) idDeclare -> . ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    ID              shift and go to state 37

    idDeclare                      shift and go to state 36
    listaIdDeclare                 shift and go to state 52

state 44

    (15) idDeclare -> ID LBRACK . CTE_I RBRACK
    (16) idDeclare -> ID LBRACK . CTE_I RBRACK LBRACK CTE_I RBRACK

    CTE_I           shift and go to state 53


state 45

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes . METHODS declarMethods RBRACE declarClases

    METHODS         shift and go to state 54


state 46

    (10) declarAttributes -> tipo . COLON listaIdDeclare SCOLON declarAttributes

    COLON           shift and go to state 55


state 47

    (11) declarAttributes -> empty .

    METHODS         reduce using rule 11 (declarAttributes -> empty .)


state 48

    (8) herencia -> LT EXTENDS ID GT .

    LBRACE          reduce using rule 8 (herencia -> LT EXTENDS ID GT .)


state 49

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN . declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (35) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (36) declarVar -> . empty
    (120) empty -> .

    VAR             shift and go to state 10
    LBRACE          reduce using rule 120 (empty -> .)

    declarVar                      shift and go to state 56
    empty                          shift and go to state 11

state 50

    (37) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN . listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (31) listaParam -> . param
    (32) listaParam -> . param COMMA listaParam
    (33) listaParam -> . empty
    (34) param -> . tipo COLON ID
    (120) empty -> .
    (21) tipo -> . ID
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR

    RPAREN          reduce using rule 120 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    listaParam                     shift and go to state 57
    param                          shift and go to state 58
    empty                          shift and go to state 59
    tipo                           shift and go to state 60

state 51

    (35) declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .

    VOID            reduce using rule 35 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    INT             reduce using rule 35 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    FLOAT           reduce using rule 35 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    CHAR            reduce using rule 35 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    MAIN            reduce using rule 35 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    LBRACE          reduce using rule 35 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)


state 52

    (13) listaIdDeclare -> idDeclare COMMA listaIdDeclare .

    SCOLON          reduce using rule 13 (listaIdDeclare -> idDeclare COMMA listaIdDeclare .)


state 53

    (15) idDeclare -> ID LBRACK CTE_I . RBRACK
    (16) idDeclare -> ID LBRACK CTE_I . RBRACK LBRACK CTE_I RBRACK

    RBRACK          shift and go to state 61


state 54

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS . declarMethods RBRACE declarClases
    (25) declarMethods -> . tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (26) declarMethods -> . empty
    (27) tipoMethod -> . VOID
    (28) tipoMethod -> . INT
    (29) tipoMethod -> . FLOAT
    (30) tipoMethod -> . CHAR
    (120) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    RBRACE          reduce using rule 120 (empty -> .)

    declarMethods                  shift and go to state 62
    tipoMethod                     shift and go to state 63
    empty                          shift and go to state 64

state 55

    (10) declarAttributes -> tipo COLON . listaIdDeclare SCOLON declarAttributes
    (12) listaIdDeclare -> . idDeclare
    (13) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (14) idDeclare -> . ID
    (15) idDeclare -> . ID LBRACK CTE_I RBRACK
    (16) idDeclare -> . ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK

    ID              shift and go to state 37

    listaIdDeclare                 shift and go to state 65
    idDeclare                      shift and go to state 36

state 56

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar . LBRACE listaEstatutos RBRACE endProg prueba

    LBRACE          shift and go to state 66


state 57

    (37) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam . RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    RPAREN          shift and go to state 67


state 58

    (31) listaParam -> param .
    (32) listaParam -> param . COMMA listaParam

    RPAREN          reduce using rule 31 (listaParam -> param .)
    COMMA           shift and go to state 68


state 59

    (33) listaParam -> empty .

    RPAREN          reduce using rule 33 (listaParam -> empty .)


state 60

    (34) param -> tipo . COLON ID

    COLON           shift and go to state 69


state 61

    (15) idDeclare -> ID LBRACK CTE_I RBRACK .
    (16) idDeclare -> ID LBRACK CTE_I RBRACK . LBRACK CTE_I RBRACK

    COMMA           reduce using rule 15 (idDeclare -> ID LBRACK CTE_I RBRACK .)
    SCOLON          reduce using rule 15 (idDeclare -> ID LBRACK CTE_I RBRACK .)
    LBRACK          shift and go to state 70


state 62

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods . RBRACE declarClases

    RBRACE          shift and go to state 71


state 63

    (25) declarMethods -> tipoMethod . FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    FUNC            shift and go to state 72


state 64

    (26) declarMethods -> empty .

    RBRACE          reduce using rule 26 (declarMethods -> empty .)


state 65

    (10) declarAttributes -> tipo COLON listaIdDeclare . SCOLON declarAttributes

    SCOLON          shift and go to state 73


state 66

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE . listaEstatutos RBRACE endProg prueba
    (42) listaEstatutos -> . estatutos listaEstatutos
    (43) listaEstatutos -> . empty
    (44) estatutos -> . llamada SCOLON
    (45) estatutos -> . asignacion SCOLON
    (46) estatutos -> . returnf SCOLON
    (47) estatutos -> . lectura SCOLON
    (48) estatutos -> . escritura SCOLON
    (49) estatutos -> . condicion
    (50) estatutos -> . cond_w
    (51) estatutos -> . cond_f
    (120) empty -> .
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (52) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (64) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (66) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (71) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (72) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (78) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (82) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (86) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 120 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 75
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 67

    (37) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN . declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (35) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (36) declarVar -> . empty
    (120) empty -> .

    VAR             shift and go to state 10
    LBRACE          reduce using rule 120 (empty -> .)

    declarVar                      shift and go to state 93
    empty                          shift and go to state 11

state 68

    (32) listaParam -> param COMMA . listaParam
    (31) listaParam -> . param
    (32) listaParam -> . param COMMA listaParam
    (33) listaParam -> . empty
    (34) param -> . tipo COLON ID
    (120) empty -> .
    (21) tipo -> . ID
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR

    RPAREN          reduce using rule 120 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    param                          shift and go to state 58
    listaParam                     shift and go to state 94
    empty                          shift and go to state 59
    tipo                           shift and go to state 60

state 69

    (34) param -> tipo COLON . ID

    ID              shift and go to state 95


state 70

    (16) idDeclare -> ID LBRACK CTE_I RBRACK LBRACK . CTE_I RBRACK

    CTE_I           shift and go to state 96


state 71

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE . declarClases
    (6) declarClases -> . CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (7) declarClases -> . empty
    (120) empty -> .

    CLASS           shift and go to state 7
    VAR             reduce using rule 120 (empty -> .)
    VOID            reduce using rule 120 (empty -> .)
    INT             reduce using rule 120 (empty -> .)
    FLOAT           reduce using rule 120 (empty -> .)
    CHAR            reduce using rule 120 (empty -> .)
    MAIN            reduce using rule 120 (empty -> .)

    declarClases                   shift and go to state 97
    empty                          shift and go to state 8

state 72

    (25) declarMethods -> tipoMethod FUNC . ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    ID              shift and go to state 98


state 73

    (10) declarAttributes -> tipo COLON listaIdDeclare SCOLON . declarAttributes
    (10) declarAttributes -> . tipo COLON listaIdDeclare SCOLON declarAttributes
    (11) declarAttributes -> . empty
    (21) tipo -> . ID
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR
    (120) empty -> .

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    METHODS         reduce using rule 120 (empty -> .)

    tipo                           shift and go to state 46
    declarAttributes               shift and go to state 99
    empty                          shift and go to state 47

state 74

    (54) llamada -> ID . DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> ID . verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> ID .
    (18) idCall -> ID . DOT ID
    (19) idCall -> ID . LBRACK exp RBRACK
    (20) idCall -> ID . LBRACK exp RBRACK LBRACK exp RBRACK
    (60) verExist -> .

    DOT             shift and go to state 100
    ASIGNA          reduce using rule 17 (idCall -> ID .)
    MULT            reduce using rule 17 (idCall -> ID .)
    DIV             reduce using rule 17 (idCall -> ID .)
    PLUS            reduce using rule 17 (idCall -> ID .)
    MINUS           reduce using rule 17 (idCall -> ID .)
    LT              reduce using rule 17 (idCall -> ID .)
    GT              reduce using rule 17 (idCall -> ID .)
    LTE             reduce using rule 17 (idCall -> ID .)
    GTE             reduce using rule 17 (idCall -> ID .)
    EQUALS          reduce using rule 17 (idCall -> ID .)
    NEQUALS         reduce using rule 17 (idCall -> ID .)
    AND             reduce using rule 17 (idCall -> ID .)
    OR              reduce using rule 17 (idCall -> ID .)
    RBRACK          reduce using rule 17 (idCall -> ID .)
    RPAREN          reduce using rule 17 (idCall -> ID .)
    COMMA           reduce using rule 17 (idCall -> ID .)
    SCOLON          reduce using rule 17 (idCall -> ID .)
    TO              reduce using rule 17 (idCall -> ID .)
    DO              reduce using rule 17 (idCall -> ID .)
    LBRACK          shift and go to state 102
    LPAREN          reduce using rule 60 (verExist -> .)

    verExist                       shift and go to state 101

state 75

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos . RBRACE endProg prueba

    RBRACE          shift and go to state 103


state 76

    (42) listaEstatutos -> estatutos . listaEstatutos
    (42) listaEstatutos -> . estatutos listaEstatutos
    (43) listaEstatutos -> . empty
    (44) estatutos -> . llamada SCOLON
    (45) estatutos -> . asignacion SCOLON
    (46) estatutos -> . returnf SCOLON
    (47) estatutos -> . lectura SCOLON
    (48) estatutos -> . escritura SCOLON
    (49) estatutos -> . condicion
    (50) estatutos -> . cond_w
    (51) estatutos -> . cond_f
    (120) empty -> .
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (52) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (64) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (66) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (71) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (72) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (78) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (82) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (86) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 120 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    estatutos                      shift and go to state 76
    listaEstatutos                 shift and go to state 104
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 77

    (43) listaEstatutos -> empty .

    RBRACE          reduce using rule 43 (listaEstatutos -> empty .)


state 78

    (44) estatutos -> llamada . SCOLON

    SCOLON          shift and go to state 105


state 79

    (45) estatutos -> asignacion . SCOLON

    SCOLON          shift and go to state 106


state 80

    (46) estatutos -> returnf . SCOLON

    SCOLON          shift and go to state 107


state 81

    (47) estatutos -> lectura . SCOLON

    SCOLON          shift and go to state 108


state 82

    (48) estatutos -> escritura . SCOLON

    SCOLON          shift and go to state 109


state 83

    (49) estatutos -> condicion .

    ID              reduce using rule 49 (estatutos -> condicion .)
    RETURN          reduce using rule 49 (estatutos -> condicion .)
    READ            reduce using rule 49 (estatutos -> condicion .)
    WRITE           reduce using rule 49 (estatutos -> condicion .)
    IF              reduce using rule 49 (estatutos -> condicion .)
    WHILE           reduce using rule 49 (estatutos -> condicion .)
    FOR             reduce using rule 49 (estatutos -> condicion .)
    RBRACE          reduce using rule 49 (estatutos -> condicion .)


state 84

    (50) estatutos -> cond_w .

    ID              reduce using rule 50 (estatutos -> cond_w .)
    RETURN          reduce using rule 50 (estatutos -> cond_w .)
    READ            reduce using rule 50 (estatutos -> cond_w .)
    WRITE           reduce using rule 50 (estatutos -> cond_w .)
    IF              reduce using rule 50 (estatutos -> cond_w .)
    WHILE           reduce using rule 50 (estatutos -> cond_w .)
    FOR             reduce using rule 50 (estatutos -> cond_w .)
    RBRACE          reduce using rule 50 (estatutos -> cond_w .)


state 85

    (51) estatutos -> cond_f .

    ID              reduce using rule 51 (estatutos -> cond_f .)
    RETURN          reduce using rule 51 (estatutos -> cond_f .)
    READ            reduce using rule 51 (estatutos -> cond_f .)
    WRITE           reduce using rule 51 (estatutos -> cond_f .)
    IF              reduce using rule 51 (estatutos -> cond_f .)
    WHILE           reduce using rule 51 (estatutos -> cond_f .)
    FOR             reduce using rule 51 (estatutos -> cond_f .)
    RBRACE          reduce using rule 51 (estatutos -> cond_f .)


state 86

    (52) asignacion -> idCall . ASIGNA pushPoper exp asignStep2

    ASIGNA          shift and go to state 110


state 87

    (64) returnf -> RETURN . pushPoper LPAREN exp RPAREN popReturn
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 111

state 88

    (66) lectura -> READ . pushPoper LPAREN listaId RPAREN
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 112

state 89

    (71) escritura -> WRITE . pushPoper LPAREN exp popIO lextra RPAREN
    (72) escritura -> WRITE . pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 113

state 90

    (78) condicion -> IF . LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> IF . LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    LPAREN          shift and go to state 114


state 91

    (82) cond_w -> WHILE . step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (83) step1While -> .

    LPAREN          reduce using rule 83 (step1While -> .)

    step1While                     shift and go to state 115

state 92

    (86) cond_f -> FOR . asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (52) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    ID              shift and go to state 117

    asignacion                     shift and go to state 116
    idCall                         shift and go to state 86

state 93

    (37) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar . setDI LBRACE listaEstatutos RBRACE endF definFunc
    (40) setDI -> .

    LBRACE          reduce using rule 40 (setDI -> .)

    setDI                          shift and go to state 118

state 94

    (32) listaParam -> param COMMA listaParam .

    RPAREN          reduce using rule 32 (listaParam -> param COMMA listaParam .)


state 95

    (34) param -> tipo COLON ID .

    COMMA           reduce using rule 34 (param -> tipo COLON ID .)
    RPAREN          reduce using rule 34 (param -> tipo COLON ID .)


state 96

    (16) idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I . RBRACK

    RBRACK          shift and go to state 119


state 97

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .

    VAR             reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    VOID            reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    INT             reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    FLOAT           reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    CHAR            reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    MAIN            reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)


state 98

    (25) declarMethods -> tipoMethod FUNC ID . LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    LPAREN          shift and go to state 120


state 99

    (10) declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes .

    METHODS         reduce using rule 10 (declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes .)


state 100

    (54) llamada -> ID DOT . ID LPAREN enviaParam RPAREN
    (18) idCall -> ID DOT . ID

    ID              shift and go to state 121


state 101

    (55) llamada -> ID verExist . LPAREN enviaParam coherenceGo RPAREN

    LPAREN          shift and go to state 122


state 102

    (19) idCall -> ID LBRACK . exp RBRACK
    (20) idCall -> ID LBRACK . exp RBRACK LBRACK exp RBRACK
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    exp                            shift and go to state 123
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 103

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE . endProg prueba
    (5) endProg -> .

    $end            reduce using rule 5 (endProg -> .)

    endProg                        shift and go to state 135

state 104

    (42) listaEstatutos -> estatutos listaEstatutos .

    RBRACE          reduce using rule 42 (listaEstatutos -> estatutos listaEstatutos .)


state 105

    (44) estatutos -> llamada SCOLON .

    ID              reduce using rule 44 (estatutos -> llamada SCOLON .)
    RETURN          reduce using rule 44 (estatutos -> llamada SCOLON .)
    READ            reduce using rule 44 (estatutos -> llamada SCOLON .)
    WRITE           reduce using rule 44 (estatutos -> llamada SCOLON .)
    IF              reduce using rule 44 (estatutos -> llamada SCOLON .)
    WHILE           reduce using rule 44 (estatutos -> llamada SCOLON .)
    FOR             reduce using rule 44 (estatutos -> llamada SCOLON .)
    RBRACE          reduce using rule 44 (estatutos -> llamada SCOLON .)


state 106

    (45) estatutos -> asignacion SCOLON .

    ID              reduce using rule 45 (estatutos -> asignacion SCOLON .)
    RETURN          reduce using rule 45 (estatutos -> asignacion SCOLON .)
    READ            reduce using rule 45 (estatutos -> asignacion SCOLON .)
    WRITE           reduce using rule 45 (estatutos -> asignacion SCOLON .)
    IF              reduce using rule 45 (estatutos -> asignacion SCOLON .)
    WHILE           reduce using rule 45 (estatutos -> asignacion SCOLON .)
    FOR             reduce using rule 45 (estatutos -> asignacion SCOLON .)
    RBRACE          reduce using rule 45 (estatutos -> asignacion SCOLON .)


state 107

    (46) estatutos -> returnf SCOLON .

    ID              reduce using rule 46 (estatutos -> returnf SCOLON .)
    RETURN          reduce using rule 46 (estatutos -> returnf SCOLON .)
    READ            reduce using rule 46 (estatutos -> returnf SCOLON .)
    WRITE           reduce using rule 46 (estatutos -> returnf SCOLON .)
    IF              reduce using rule 46 (estatutos -> returnf SCOLON .)
    WHILE           reduce using rule 46 (estatutos -> returnf SCOLON .)
    FOR             reduce using rule 46 (estatutos -> returnf SCOLON .)
    RBRACE          reduce using rule 46 (estatutos -> returnf SCOLON .)


state 108

    (47) estatutos -> lectura SCOLON .

    ID              reduce using rule 47 (estatutos -> lectura SCOLON .)
    RETURN          reduce using rule 47 (estatutos -> lectura SCOLON .)
    READ            reduce using rule 47 (estatutos -> lectura SCOLON .)
    WRITE           reduce using rule 47 (estatutos -> lectura SCOLON .)
    IF              reduce using rule 47 (estatutos -> lectura SCOLON .)
    WHILE           reduce using rule 47 (estatutos -> lectura SCOLON .)
    FOR             reduce using rule 47 (estatutos -> lectura SCOLON .)
    RBRACE          reduce using rule 47 (estatutos -> lectura SCOLON .)


state 109

    (48) estatutos -> escritura SCOLON .

    ID              reduce using rule 48 (estatutos -> escritura SCOLON .)
    RETURN          reduce using rule 48 (estatutos -> escritura SCOLON .)
    READ            reduce using rule 48 (estatutos -> escritura SCOLON .)
    WRITE           reduce using rule 48 (estatutos -> escritura SCOLON .)
    IF              reduce using rule 48 (estatutos -> escritura SCOLON .)
    WHILE           reduce using rule 48 (estatutos -> escritura SCOLON .)
    FOR             reduce using rule 48 (estatutos -> escritura SCOLON .)
    RBRACE          reduce using rule 48 (estatutos -> escritura SCOLON .)


state 110

    (52) asignacion -> idCall ASIGNA . pushPoper exp asignStep2
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 136

state 111

    (64) returnf -> RETURN pushPoper . LPAREN exp RPAREN popReturn

    LPAREN          shift and go to state 137


state 112

    (66) lectura -> READ pushPoper . LPAREN listaId RPAREN

    LPAREN          shift and go to state 138


state 113

    (71) escritura -> WRITE pushPoper . LPAREN exp popIO lextra RPAREN
    (72) escritura -> WRITE pushPoper . LPAREN LETRERO letreroPush popIO lextra RPAREN

    LPAREN          shift and go to state 139


state 114

    (78) condicion -> IF LPAREN . exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> IF LPAREN . exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    exp                            shift and go to state 140
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 115

    (82) cond_w -> WHILE step1While . LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While

    LPAREN          shift and go to state 141


state 116

    (86) cond_f -> FOR asignacion . TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While

    TO              shift and go to state 142


state 117

    (17) idCall -> ID .
    (18) idCall -> ID . DOT ID
    (19) idCall -> ID . LBRACK exp RBRACK
    (20) idCall -> ID . LBRACK exp RBRACK LBRACK exp RBRACK

    ASIGNA          reduce using rule 17 (idCall -> ID .)
    COMMA           reduce using rule 17 (idCall -> ID .)
    RPAREN          reduce using rule 17 (idCall -> ID .)
    DOT             shift and go to state 143
    LBRACK          shift and go to state 102


state 118

    (37) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI . LBRACE listaEstatutos RBRACE endF definFunc

    LBRACE          shift and go to state 144


state 119

    (16) idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK .

    COMMA           reduce using rule 16 (idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK .)
    SCOLON          reduce using rule 16 (idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK .)


state 120

    (25) declarMethods -> tipoMethod FUNC ID LPAREN . listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (31) listaParam -> . param
    (32) listaParam -> . param COMMA listaParam
    (33) listaParam -> . empty
    (34) param -> . tipo COLON ID
    (120) empty -> .
    (21) tipo -> . ID
    (22) tipo -> . INT
    (23) tipo -> . FLOAT
    (24) tipo -> . CHAR

    RPAREN          reduce using rule 120 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    listaParam                     shift and go to state 145
    param                          shift and go to state 58
    empty                          shift and go to state 59
    tipo                           shift and go to state 60

state 121

    (54) llamada -> ID DOT ID . LPAREN enviaParam RPAREN
    (18) idCall -> ID DOT ID .

    LPAREN          shift and go to state 146
    ASIGNA          reduce using rule 18 (idCall -> ID DOT ID .)
    MULT            reduce using rule 18 (idCall -> ID DOT ID .)
    DIV             reduce using rule 18 (idCall -> ID DOT ID .)
    PLUS            reduce using rule 18 (idCall -> ID DOT ID .)
    MINUS           reduce using rule 18 (idCall -> ID DOT ID .)
    LT              reduce using rule 18 (idCall -> ID DOT ID .)
    GT              reduce using rule 18 (idCall -> ID DOT ID .)
    LTE             reduce using rule 18 (idCall -> ID DOT ID .)
    GTE             reduce using rule 18 (idCall -> ID DOT ID .)
    EQUALS          reduce using rule 18 (idCall -> ID DOT ID .)
    NEQUALS         reduce using rule 18 (idCall -> ID DOT ID .)
    AND             reduce using rule 18 (idCall -> ID DOT ID .)
    OR              reduce using rule 18 (idCall -> ID DOT ID .)
    RBRACK          reduce using rule 18 (idCall -> ID DOT ID .)
    RPAREN          reduce using rule 18 (idCall -> ID DOT ID .)
    COMMA           reduce using rule 18 (idCall -> ID DOT ID .)
    SCOLON          reduce using rule 18 (idCall -> ID DOT ID .)
    TO              reduce using rule 18 (idCall -> ID DOT ID .)
    DO              reduce using rule 18 (idCall -> ID DOT ID .)


state 122

    (55) llamada -> ID verExist LPAREN . enviaParam coherenceGo RPAREN
    (56) enviaParam -> . paramReferencia
    (57) enviaParam -> . empty
    (58) paramReferencia -> . exp paramType
    (59) paramReferencia -> . exp paramType COMMA paramCount paramReferencia
    (120) empty -> .
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RPAREN          reduce using rule 120 (empty -> .)
    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    enviaParam                     shift and go to state 147
    paramReferencia                shift and go to state 148
    empty                          shift and go to state 149
    exp                            shift and go to state 150
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 123

    (19) idCall -> ID LBRACK exp . RBRACK
    (20) idCall -> ID LBRACK exp . RBRACK LBRACK exp RBRACK

    RBRACK          shift and go to state 151


state 124

    (88) exp -> texp . step7
    (89) exp -> texp . step7 OR pushPoper exp
    (116) step7 -> .

    OR              reduce using rule 116 (step7 -> .)
    RBRACK          reduce using rule 116 (step7 -> .)
    RPAREN          reduce using rule 116 (step7 -> .)
    COMMA           reduce using rule 116 (step7 -> .)
    SCOLON          reduce using rule 116 (step7 -> .)
    TO              reduce using rule 116 (step7 -> .)
    DO              reduce using rule 116 (step7 -> .)

    step7                          shift and go to state 152

state 125

    (90) texp -> gexp . step6
    (91) texp -> gexp . step6 AND pushPoper texp
    (115) step6 -> .

    AND             reduce using rule 115 (step6 -> .)
    OR              reduce using rule 115 (step6 -> .)
    RBRACK          reduce using rule 115 (step6 -> .)
    RPAREN          reduce using rule 115 (step6 -> .)
    COMMA           reduce using rule 115 (step6 -> .)
    SCOLON          reduce using rule 115 (step6 -> .)
    TO              reduce using rule 115 (step6 -> .)
    DO              reduce using rule 115 (step6 -> .)

    step6                          shift and go to state 153

state 126

    (92) gexp -> mexp . step5
    (93) gexp -> mexp . step5 LT pushPoper gexp
    (94) gexp -> mexp . step5 GT pushPoper gexp
    (95) gexp -> mexp . step5 LTE pushPoper gexp
    (96) gexp -> mexp . step5 GTE pushPoper gexp
    (97) gexp -> mexp . step5 EQUALS pushPoper gexp
    (98) gexp -> mexp . step5 NEQUALS pushPoper gexp
    (114) step5 -> .

    LT              reduce using rule 114 (step5 -> .)
    GT              reduce using rule 114 (step5 -> .)
    LTE             reduce using rule 114 (step5 -> .)
    GTE             reduce using rule 114 (step5 -> .)
    EQUALS          reduce using rule 114 (step5 -> .)
    NEQUALS         reduce using rule 114 (step5 -> .)
    AND             reduce using rule 114 (step5 -> .)
    OR              reduce using rule 114 (step5 -> .)
    RBRACK          reduce using rule 114 (step5 -> .)
    RPAREN          reduce using rule 114 (step5 -> .)
    COMMA           reduce using rule 114 (step5 -> .)
    SCOLON          reduce using rule 114 (step5 -> .)
    TO              reduce using rule 114 (step5 -> .)
    DO              reduce using rule 114 (step5 -> .)

    step5                          shift and go to state 154

state 127

    (99) mexp -> t . step4
    (100) mexp -> t . step4 PLUS pushPoper mexp
    (101) mexp -> t . step4 MINUS pushPoper mexp
    (113) step4 -> .

    PLUS            reduce using rule 113 (step4 -> .)
    MINUS           reduce using rule 113 (step4 -> .)
    LT              reduce using rule 113 (step4 -> .)
    GT              reduce using rule 113 (step4 -> .)
    LTE             reduce using rule 113 (step4 -> .)
    GTE             reduce using rule 113 (step4 -> .)
    EQUALS          reduce using rule 113 (step4 -> .)
    NEQUALS         reduce using rule 113 (step4 -> .)
    AND             reduce using rule 113 (step4 -> .)
    OR              reduce using rule 113 (step4 -> .)
    RBRACK          reduce using rule 113 (step4 -> .)
    RPAREN          reduce using rule 113 (step4 -> .)
    COMMA           reduce using rule 113 (step4 -> .)
    SCOLON          reduce using rule 113 (step4 -> .)
    TO              reduce using rule 113 (step4 -> .)
    DO              reduce using rule 113 (step4 -> .)

    step4                          shift and go to state 155

state 128

    (102) t -> f . step3
    (103) t -> f . step3 MULT pushPoper t
    (104) t -> f . step3 DIV pushPoper t
    (112) step3 -> .

    MULT            reduce using rule 112 (step3 -> .)
    DIV             reduce using rule 112 (step3 -> .)
    PLUS            reduce using rule 112 (step3 -> .)
    MINUS           reduce using rule 112 (step3 -> .)
    LT              reduce using rule 112 (step3 -> .)
    GT              reduce using rule 112 (step3 -> .)
    LTE             reduce using rule 112 (step3 -> .)
    GTE             reduce using rule 112 (step3 -> .)
    EQUALS          reduce using rule 112 (step3 -> .)
    NEQUALS         reduce using rule 112 (step3 -> .)
    AND             reduce using rule 112 (step3 -> .)
    OR              reduce using rule 112 (step3 -> .)
    RBRACK          reduce using rule 112 (step3 -> .)
    RPAREN          reduce using rule 112 (step3 -> .)
    COMMA           reduce using rule 112 (step3 -> .)
    SCOLON          reduce using rule 112 (step3 -> .)
    TO              reduce using rule 112 (step3 -> .)
    DO              reduce using rule 112 (step3 -> .)

    step3                          shift and go to state 156

state 129

    (105) f -> LPAREN . addFF exp RPAREN rmFF
    (117) addFF -> .

    LPAREN          reduce using rule 117 (addFF -> .)
    CTE_I           reduce using rule 117 (addFF -> .)
    CTE_F           reduce using rule 117 (addFF -> .)
    CTE_C           reduce using rule 117 (addFF -> .)
    ID              reduce using rule 117 (addFF -> .)

    addFF                          shift and go to state 157

state 130

    (106) f -> CTE_I . step1
    (111) step1 -> .

    MULT            reduce using rule 111 (step1 -> .)
    DIV             reduce using rule 111 (step1 -> .)
    PLUS            reduce using rule 111 (step1 -> .)
    MINUS           reduce using rule 111 (step1 -> .)
    LT              reduce using rule 111 (step1 -> .)
    GT              reduce using rule 111 (step1 -> .)
    LTE             reduce using rule 111 (step1 -> .)
    GTE             reduce using rule 111 (step1 -> .)
    EQUALS          reduce using rule 111 (step1 -> .)
    NEQUALS         reduce using rule 111 (step1 -> .)
    AND             reduce using rule 111 (step1 -> .)
    OR              reduce using rule 111 (step1 -> .)
    RBRACK          reduce using rule 111 (step1 -> .)
    RPAREN          reduce using rule 111 (step1 -> .)
    COMMA           reduce using rule 111 (step1 -> .)
    SCOLON          reduce using rule 111 (step1 -> .)
    TO              reduce using rule 111 (step1 -> .)
    DO              reduce using rule 111 (step1 -> .)

    step1                          shift and go to state 158

state 131

    (107) f -> CTE_F . step1
    (111) step1 -> .

    MULT            reduce using rule 111 (step1 -> .)
    DIV             reduce using rule 111 (step1 -> .)
    PLUS            reduce using rule 111 (step1 -> .)
    MINUS           reduce using rule 111 (step1 -> .)
    LT              reduce using rule 111 (step1 -> .)
    GT              reduce using rule 111 (step1 -> .)
    LTE             reduce using rule 111 (step1 -> .)
    GTE             reduce using rule 111 (step1 -> .)
    EQUALS          reduce using rule 111 (step1 -> .)
    NEQUALS         reduce using rule 111 (step1 -> .)
    AND             reduce using rule 111 (step1 -> .)
    OR              reduce using rule 111 (step1 -> .)
    RBRACK          reduce using rule 111 (step1 -> .)
    RPAREN          reduce using rule 111 (step1 -> .)
    COMMA           reduce using rule 111 (step1 -> .)
    SCOLON          reduce using rule 111 (step1 -> .)
    TO              reduce using rule 111 (step1 -> .)
    DO              reduce using rule 111 (step1 -> .)

    step1                          shift and go to state 159

state 132

    (108) f -> CTE_C . step1
    (111) step1 -> .

    MULT            reduce using rule 111 (step1 -> .)
    DIV             reduce using rule 111 (step1 -> .)
    PLUS            reduce using rule 111 (step1 -> .)
    MINUS           reduce using rule 111 (step1 -> .)
    LT              reduce using rule 111 (step1 -> .)
    GT              reduce using rule 111 (step1 -> .)
    LTE             reduce using rule 111 (step1 -> .)
    GTE             reduce using rule 111 (step1 -> .)
    EQUALS          reduce using rule 111 (step1 -> .)
    NEQUALS         reduce using rule 111 (step1 -> .)
    AND             reduce using rule 111 (step1 -> .)
    OR              reduce using rule 111 (step1 -> .)
    RBRACK          reduce using rule 111 (step1 -> .)
    RPAREN          reduce using rule 111 (step1 -> .)
    COMMA           reduce using rule 111 (step1 -> .)
    SCOLON          reduce using rule 111 (step1 -> .)
    TO              reduce using rule 111 (step1 -> .)
    DO              reduce using rule 111 (step1 -> .)

    step1                          shift and go to state 160

state 133

    (109) f -> llamada .

    MULT            reduce using rule 109 (f -> llamada .)
    DIV             reduce using rule 109 (f -> llamada .)
    PLUS            reduce using rule 109 (f -> llamada .)
    MINUS           reduce using rule 109 (f -> llamada .)
    LT              reduce using rule 109 (f -> llamada .)
    GT              reduce using rule 109 (f -> llamada .)
    LTE             reduce using rule 109 (f -> llamada .)
    GTE             reduce using rule 109 (f -> llamada .)
    EQUALS          reduce using rule 109 (f -> llamada .)
    NEQUALS         reduce using rule 109 (f -> llamada .)
    AND             reduce using rule 109 (f -> llamada .)
    OR              reduce using rule 109 (f -> llamada .)
    RBRACK          reduce using rule 109 (f -> llamada .)
    RPAREN          reduce using rule 109 (f -> llamada .)
    COMMA           reduce using rule 109 (f -> llamada .)
    SCOLON          reduce using rule 109 (f -> llamada .)
    TO              reduce using rule 109 (f -> llamada .)
    DO              reduce using rule 109 (f -> llamada .)


state 134

    (110) f -> idCall .

    MULT            reduce using rule 110 (f -> idCall .)
    DIV             reduce using rule 110 (f -> idCall .)
    PLUS            reduce using rule 110 (f -> idCall .)
    MINUS           reduce using rule 110 (f -> idCall .)
    LT              reduce using rule 110 (f -> idCall .)
    GT              reduce using rule 110 (f -> idCall .)
    LTE             reduce using rule 110 (f -> idCall .)
    GTE             reduce using rule 110 (f -> idCall .)
    EQUALS          reduce using rule 110 (f -> idCall .)
    NEQUALS         reduce using rule 110 (f -> idCall .)
    AND             reduce using rule 110 (f -> idCall .)
    OR              reduce using rule 110 (f -> idCall .)
    RBRACK          reduce using rule 110 (f -> idCall .)
    RPAREN          reduce using rule 110 (f -> idCall .)
    COMMA           reduce using rule 110 (f -> idCall .)
    SCOLON          reduce using rule 110 (f -> idCall .)
    TO              reduce using rule 110 (f -> idCall .)
    DO              reduce using rule 110 (f -> idCall .)


state 135

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg . prueba
    (2) prueba -> .

    $end            reduce using rule 2 (prueba -> .)

    prueba                         shift and go to state 161

state 136

    (52) asignacion -> idCall ASIGNA pushPoper . exp asignStep2
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    idCall                         shift and go to state 134
    exp                            shift and go to state 162
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133

state 137

    (64) returnf -> RETURN pushPoper LPAREN . exp RPAREN popReturn
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    exp                            shift and go to state 163
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 138

    (66) lectura -> READ pushPoper LPAREN . listaId RPAREN
    (67) listaId -> . idCall popIO
    (68) listaId -> . idCall COMMA popIO insertOpRead listaId
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    ID              shift and go to state 117

    listaId                        shift and go to state 164
    idCall                         shift and go to state 165

state 139

    (71) escritura -> WRITE pushPoper LPAREN . exp popIO lextra RPAREN
    (72) escritura -> WRITE pushPoper LPAREN . LETRERO letreroPush popIO lextra RPAREN
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LETRERO         shift and go to state 167
    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    exp                            shift and go to state 166
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 140

    (78) condicion -> IF LPAREN exp . RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> IF LPAREN exp . RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    RPAREN          shift and go to state 168


state 141

    (82) cond_w -> WHILE step1While LPAREN . exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    exp                            shift and go to state 169
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 142

    (86) cond_f -> FOR asignacion TO . exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    exp                            shift and go to state 170
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 143

    (18) idCall -> ID DOT . ID

    ID              shift and go to state 171


state 144

    (37) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE . listaEstatutos RBRACE endF definFunc
    (42) listaEstatutos -> . estatutos listaEstatutos
    (43) listaEstatutos -> . empty
    (44) estatutos -> . llamada SCOLON
    (45) estatutos -> . asignacion SCOLON
    (46) estatutos -> . returnf SCOLON
    (47) estatutos -> . lectura SCOLON
    (48) estatutos -> . escritura SCOLON
    (49) estatutos -> . condicion
    (50) estatutos -> . cond_w
    (51) estatutos -> . cond_f
    (120) empty -> .
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (52) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (64) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (66) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (71) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (72) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (78) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (82) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (86) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 120 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 172
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 145

    (25) declarMethods -> tipoMethod FUNC ID LPAREN listaParam . RPAREN LBRACE listaEstatutos RBRACE declarMethods

    RPAREN          shift and go to state 173


state 146

    (54) llamada -> ID DOT ID LPAREN . enviaParam RPAREN
    (56) enviaParam -> . paramReferencia
    (57) enviaParam -> . empty
    (58) paramReferencia -> . exp paramType
    (59) paramReferencia -> . exp paramType COMMA paramCount paramReferencia
    (120) empty -> .
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RPAREN          reduce using rule 120 (empty -> .)
    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    enviaParam                     shift and go to state 174
    paramReferencia                shift and go to state 148
    empty                          shift and go to state 149
    exp                            shift and go to state 150
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 147

    (55) llamada -> ID verExist LPAREN enviaParam . coherenceGo RPAREN
    (63) coherenceGo -> .

    RPAREN          reduce using rule 63 (coherenceGo -> .)

    coherenceGo                    shift and go to state 175

state 148

    (56) enviaParam -> paramReferencia .

    RPAREN          reduce using rule 56 (enviaParam -> paramReferencia .)


state 149

    (57) enviaParam -> empty .

    RPAREN          reduce using rule 57 (enviaParam -> empty .)


state 150

    (58) paramReferencia -> exp . paramType
    (59) paramReferencia -> exp . paramType COMMA paramCount paramReferencia
    (61) paramType -> .

    COMMA           reduce using rule 61 (paramType -> .)
    RPAREN          reduce using rule 61 (paramType -> .)

    paramType                      shift and go to state 176

state 151

    (19) idCall -> ID LBRACK exp RBRACK .
    (20) idCall -> ID LBRACK exp RBRACK . LBRACK exp RBRACK

    ASIGNA          reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    MULT            reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    DIV             reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    PLUS            reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    MINUS           reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    LT              reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    GT              reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    LTE             reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    GTE             reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    EQUALS          reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    NEQUALS         reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    AND             reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    OR              reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    RBRACK          reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    RPAREN          reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    COMMA           reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    SCOLON          reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    TO              reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    DO              reduce using rule 19 (idCall -> ID LBRACK exp RBRACK .)
    LBRACK          shift and go to state 177


state 152

    (88) exp -> texp step7 .
    (89) exp -> texp step7 . OR pushPoper exp

    RBRACK          reduce using rule 88 (exp -> texp step7 .)
    RPAREN          reduce using rule 88 (exp -> texp step7 .)
    COMMA           reduce using rule 88 (exp -> texp step7 .)
    SCOLON          reduce using rule 88 (exp -> texp step7 .)
    TO              reduce using rule 88 (exp -> texp step7 .)
    DO              reduce using rule 88 (exp -> texp step7 .)
    OR              shift and go to state 178


state 153

    (90) texp -> gexp step6 .
    (91) texp -> gexp step6 . AND pushPoper texp

    OR              reduce using rule 90 (texp -> gexp step6 .)
    RBRACK          reduce using rule 90 (texp -> gexp step6 .)
    RPAREN          reduce using rule 90 (texp -> gexp step6 .)
    COMMA           reduce using rule 90 (texp -> gexp step6 .)
    SCOLON          reduce using rule 90 (texp -> gexp step6 .)
    TO              reduce using rule 90 (texp -> gexp step6 .)
    DO              reduce using rule 90 (texp -> gexp step6 .)
    AND             shift and go to state 179


state 154

    (92) gexp -> mexp step5 .
    (93) gexp -> mexp step5 . LT pushPoper gexp
    (94) gexp -> mexp step5 . GT pushPoper gexp
    (95) gexp -> mexp step5 . LTE pushPoper gexp
    (96) gexp -> mexp step5 . GTE pushPoper gexp
    (97) gexp -> mexp step5 . EQUALS pushPoper gexp
    (98) gexp -> mexp step5 . NEQUALS pushPoper gexp

    AND             reduce using rule 92 (gexp -> mexp step5 .)
    OR              reduce using rule 92 (gexp -> mexp step5 .)
    RBRACK          reduce using rule 92 (gexp -> mexp step5 .)
    RPAREN          reduce using rule 92 (gexp -> mexp step5 .)
    COMMA           reduce using rule 92 (gexp -> mexp step5 .)
    SCOLON          reduce using rule 92 (gexp -> mexp step5 .)
    TO              reduce using rule 92 (gexp -> mexp step5 .)
    DO              reduce using rule 92 (gexp -> mexp step5 .)
    LT              shift and go to state 180
    GT              shift and go to state 181
    LTE             shift and go to state 182
    GTE             shift and go to state 183
    EQUALS          shift and go to state 184
    NEQUALS         shift and go to state 185


state 155

    (99) mexp -> t step4 .
    (100) mexp -> t step4 . PLUS pushPoper mexp
    (101) mexp -> t step4 . MINUS pushPoper mexp

    LT              reduce using rule 99 (mexp -> t step4 .)
    GT              reduce using rule 99 (mexp -> t step4 .)
    LTE             reduce using rule 99 (mexp -> t step4 .)
    GTE             reduce using rule 99 (mexp -> t step4 .)
    EQUALS          reduce using rule 99 (mexp -> t step4 .)
    NEQUALS         reduce using rule 99 (mexp -> t step4 .)
    AND             reduce using rule 99 (mexp -> t step4 .)
    OR              reduce using rule 99 (mexp -> t step4 .)
    RBRACK          reduce using rule 99 (mexp -> t step4 .)
    RPAREN          reduce using rule 99 (mexp -> t step4 .)
    COMMA           reduce using rule 99 (mexp -> t step4 .)
    SCOLON          reduce using rule 99 (mexp -> t step4 .)
    TO              reduce using rule 99 (mexp -> t step4 .)
    DO              reduce using rule 99 (mexp -> t step4 .)
    PLUS            shift and go to state 186
    MINUS           shift and go to state 187


state 156

    (102) t -> f step3 .
    (103) t -> f step3 . MULT pushPoper t
    (104) t -> f step3 . DIV pushPoper t

    PLUS            reduce using rule 102 (t -> f step3 .)
    MINUS           reduce using rule 102 (t -> f step3 .)
    LT              reduce using rule 102 (t -> f step3 .)
    GT              reduce using rule 102 (t -> f step3 .)
    LTE             reduce using rule 102 (t -> f step3 .)
    GTE             reduce using rule 102 (t -> f step3 .)
    EQUALS          reduce using rule 102 (t -> f step3 .)
    NEQUALS         reduce using rule 102 (t -> f step3 .)
    AND             reduce using rule 102 (t -> f step3 .)
    OR              reduce using rule 102 (t -> f step3 .)
    RBRACK          reduce using rule 102 (t -> f step3 .)
    RPAREN          reduce using rule 102 (t -> f step3 .)
    COMMA           reduce using rule 102 (t -> f step3 .)
    SCOLON          reduce using rule 102 (t -> f step3 .)
    TO              reduce using rule 102 (t -> f step3 .)
    DO              reduce using rule 102 (t -> f step3 .)
    MULT            shift and go to state 188
    DIV             shift and go to state 189


state 157

    (105) f -> LPAREN addFF . exp RPAREN rmFF
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    exp                            shift and go to state 190
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 158

    (106) f -> CTE_I step1 .

    MULT            reduce using rule 106 (f -> CTE_I step1 .)
    DIV             reduce using rule 106 (f -> CTE_I step1 .)
    PLUS            reduce using rule 106 (f -> CTE_I step1 .)
    MINUS           reduce using rule 106 (f -> CTE_I step1 .)
    LT              reduce using rule 106 (f -> CTE_I step1 .)
    GT              reduce using rule 106 (f -> CTE_I step1 .)
    LTE             reduce using rule 106 (f -> CTE_I step1 .)
    GTE             reduce using rule 106 (f -> CTE_I step1 .)
    EQUALS          reduce using rule 106 (f -> CTE_I step1 .)
    NEQUALS         reduce using rule 106 (f -> CTE_I step1 .)
    AND             reduce using rule 106 (f -> CTE_I step1 .)
    OR              reduce using rule 106 (f -> CTE_I step1 .)
    RBRACK          reduce using rule 106 (f -> CTE_I step1 .)
    RPAREN          reduce using rule 106 (f -> CTE_I step1 .)
    COMMA           reduce using rule 106 (f -> CTE_I step1 .)
    SCOLON          reduce using rule 106 (f -> CTE_I step1 .)
    TO              reduce using rule 106 (f -> CTE_I step1 .)
    DO              reduce using rule 106 (f -> CTE_I step1 .)


state 159

    (107) f -> CTE_F step1 .

    MULT            reduce using rule 107 (f -> CTE_F step1 .)
    DIV             reduce using rule 107 (f -> CTE_F step1 .)
    PLUS            reduce using rule 107 (f -> CTE_F step1 .)
    MINUS           reduce using rule 107 (f -> CTE_F step1 .)
    LT              reduce using rule 107 (f -> CTE_F step1 .)
    GT              reduce using rule 107 (f -> CTE_F step1 .)
    LTE             reduce using rule 107 (f -> CTE_F step1 .)
    GTE             reduce using rule 107 (f -> CTE_F step1 .)
    EQUALS          reduce using rule 107 (f -> CTE_F step1 .)
    NEQUALS         reduce using rule 107 (f -> CTE_F step1 .)
    AND             reduce using rule 107 (f -> CTE_F step1 .)
    OR              reduce using rule 107 (f -> CTE_F step1 .)
    RBRACK          reduce using rule 107 (f -> CTE_F step1 .)
    RPAREN          reduce using rule 107 (f -> CTE_F step1 .)
    COMMA           reduce using rule 107 (f -> CTE_F step1 .)
    SCOLON          reduce using rule 107 (f -> CTE_F step1 .)
    TO              reduce using rule 107 (f -> CTE_F step1 .)
    DO              reduce using rule 107 (f -> CTE_F step1 .)


state 160

    (108) f -> CTE_C step1 .

    MULT            reduce using rule 108 (f -> CTE_C step1 .)
    DIV             reduce using rule 108 (f -> CTE_C step1 .)
    PLUS            reduce using rule 108 (f -> CTE_C step1 .)
    MINUS           reduce using rule 108 (f -> CTE_C step1 .)
    LT              reduce using rule 108 (f -> CTE_C step1 .)
    GT              reduce using rule 108 (f -> CTE_C step1 .)
    LTE             reduce using rule 108 (f -> CTE_C step1 .)
    GTE             reduce using rule 108 (f -> CTE_C step1 .)
    EQUALS          reduce using rule 108 (f -> CTE_C step1 .)
    NEQUALS         reduce using rule 108 (f -> CTE_C step1 .)
    AND             reduce using rule 108 (f -> CTE_C step1 .)
    OR              reduce using rule 108 (f -> CTE_C step1 .)
    RBRACK          reduce using rule 108 (f -> CTE_C step1 .)
    RPAREN          reduce using rule 108 (f -> CTE_C step1 .)
    COMMA           reduce using rule 108 (f -> CTE_C step1 .)
    SCOLON          reduce using rule 108 (f -> CTE_C step1 .)
    TO              reduce using rule 108 (f -> CTE_C step1 .)
    DO              reduce using rule 108 (f -> CTE_C step1 .)


state 161

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba .

    $end            reduce using rule 1 (program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba .)


state 162

    (52) asignacion -> idCall ASIGNA pushPoper exp . asignStep2
    (53) asignStep2 -> .

    SCOLON          reduce using rule 53 (asignStep2 -> .)
    TO              reduce using rule 53 (asignStep2 -> .)

    asignStep2                     shift and go to state 191

state 163

    (64) returnf -> RETURN pushPoper LPAREN exp . RPAREN popReturn

    RPAREN          shift and go to state 192


state 164

    (66) lectura -> READ pushPoper LPAREN listaId . RPAREN

    RPAREN          shift and go to state 193


state 165

    (67) listaId -> idCall . popIO
    (68) listaId -> idCall . COMMA popIO insertOpRead listaId
    (70) popIO -> .

    COMMA           shift and go to state 195
    RPAREN          reduce using rule 70 (popIO -> .)

    popIO                          shift and go to state 194

state 166

    (71) escritura -> WRITE pushPoper LPAREN exp . popIO lextra RPAREN
    (70) popIO -> .

    COMMA           reduce using rule 70 (popIO -> .)
    RPAREN          reduce using rule 70 (popIO -> .)

    popIO                          shift and go to state 196

state 167

    (72) escritura -> WRITE pushPoper LPAREN LETRERO . letreroPush popIO lextra RPAREN
    (77) letreroPush -> .

    COMMA           reduce using rule 77 (letreroPush -> .)
    RPAREN          reduce using rule 77 (letreroPush -> .)

    letreroPush                    shift and go to state 197

state 168

    (78) condicion -> IF LPAREN exp RPAREN . cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> IF LPAREN exp RPAREN . cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (80) cond1 -> .

    THEN            reduce using rule 80 (cond1 -> .)

    cond1                          shift and go to state 198

state 169

    (82) cond_w -> WHILE step1While LPAREN exp . RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While

    RPAREN          shift and go to state 199


state 170

    (86) cond_f -> FOR asignacion TO exp . step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (83) step1While -> .

    DO              reduce using rule 83 (step1While -> .)

    step1While                     shift and go to state 200

state 171

    (18) idCall -> ID DOT ID .

    ASIGNA          reduce using rule 18 (idCall -> ID DOT ID .)
    COMMA           reduce using rule 18 (idCall -> ID DOT ID .)
    RPAREN          reduce using rule 18 (idCall -> ID DOT ID .)


state 172

    (37) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos . RBRACE endF definFunc

    RBRACE          shift and go to state 201


state 173

    (25) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN . LBRACE listaEstatutos RBRACE declarMethods

    LBRACE          shift and go to state 202


state 174

    (54) llamada -> ID DOT ID LPAREN enviaParam . RPAREN

    RPAREN          shift and go to state 203


state 175

    (55) llamada -> ID verExist LPAREN enviaParam coherenceGo . RPAREN

    RPAREN          shift and go to state 204


state 176

    (58) paramReferencia -> exp paramType .
    (59) paramReferencia -> exp paramType . COMMA paramCount paramReferencia

    RPAREN          reduce using rule 58 (paramReferencia -> exp paramType .)
    COMMA           shift and go to state 205


state 177

    (20) idCall -> ID LBRACK exp RBRACK LBRACK . exp RBRACK
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    exp                            shift and go to state 206
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 178

    (89) exp -> texp step7 OR . pushPoper exp
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 207

state 179

    (91) texp -> gexp step6 AND . pushPoper texp
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 208

state 180

    (93) gexp -> mexp step5 LT . pushPoper gexp
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 209

state 181

    (94) gexp -> mexp step5 GT . pushPoper gexp
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 210

state 182

    (95) gexp -> mexp step5 LTE . pushPoper gexp
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 211

state 183

    (96) gexp -> mexp step5 GTE . pushPoper gexp
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 212

state 184

    (97) gexp -> mexp step5 EQUALS . pushPoper gexp
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 213

state 185

    (98) gexp -> mexp step5 NEQUALS . pushPoper gexp
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 214

state 186

    (100) mexp -> t step4 PLUS . pushPoper mexp
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 215

state 187

    (101) mexp -> t step4 MINUS . pushPoper mexp
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 216

state 188

    (103) t -> f step3 MULT . pushPoper t
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 217

state 189

    (104) t -> f step3 DIV . pushPoper t
    (119) pushPoper -> .

    LPAREN          reduce using rule 119 (pushPoper -> .)
    CTE_I           reduce using rule 119 (pushPoper -> .)
    CTE_F           reduce using rule 119 (pushPoper -> .)
    CTE_C           reduce using rule 119 (pushPoper -> .)
    ID              reduce using rule 119 (pushPoper -> .)

    pushPoper                      shift and go to state 218

state 190

    (105) f -> LPAREN addFF exp . RPAREN rmFF

    RPAREN          shift and go to state 219


state 191

    (52) asignacion -> idCall ASIGNA pushPoper exp asignStep2 .

    SCOLON          reduce using rule 52 (asignacion -> idCall ASIGNA pushPoper exp asignStep2 .)
    TO              reduce using rule 52 (asignacion -> idCall ASIGNA pushPoper exp asignStep2 .)


state 192

    (64) returnf -> RETURN pushPoper LPAREN exp RPAREN . popReturn
    (65) popReturn -> .

    SCOLON          reduce using rule 65 (popReturn -> .)

    popReturn                      shift and go to state 220

state 193

    (66) lectura -> READ pushPoper LPAREN listaId RPAREN .

    SCOLON          reduce using rule 66 (lectura -> READ pushPoper LPAREN listaId RPAREN .)


state 194

    (67) listaId -> idCall popIO .

    RPAREN          reduce using rule 67 (listaId -> idCall popIO .)


state 195

    (68) listaId -> idCall COMMA . popIO insertOpRead listaId
    (70) popIO -> .

    ID              reduce using rule 70 (popIO -> .)

    popIO                          shift and go to state 221

state 196

    (71) escritura -> WRITE pushPoper LPAREN exp popIO . lextra RPAREN
    (73) lextra -> . COMMA insertOpWrite exp popIO lextra
    (74) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (75) lextra -> . empty
    (120) empty -> .

    COMMA           shift and go to state 223
    RPAREN          reduce using rule 120 (empty -> .)

    lextra                         shift and go to state 222
    empty                          shift and go to state 224

state 197

    (72) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush . popIO lextra RPAREN
    (70) popIO -> .

    COMMA           reduce using rule 70 (popIO -> .)
    RPAREN          reduce using rule 70 (popIO -> .)

    popIO                          shift and go to state 225

state 198

    (78) condicion -> IF LPAREN exp RPAREN cond1 . THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> IF LPAREN exp RPAREN cond1 . THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    THEN            shift and go to state 226


state 199

    (82) cond_w -> WHILE step1While LPAREN exp RPAREN . step2While DO LBRACE listaEstatutos RBRACE step3While
    (84) step2While -> .

    DO              reduce using rule 84 (step2While -> .)

    step2While                     shift and go to state 227

state 200

    (86) cond_f -> FOR asignacion TO exp step1While . step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (87) step1For -> .

    DO              reduce using rule 87 (step1For -> .)

    step1For                       shift and go to state 228

state 201

    (37) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE . endF definFunc
    (41) endF -> .

    VOID            reduce using rule 41 (endF -> .)
    INT             reduce using rule 41 (endF -> .)
    FLOAT           reduce using rule 41 (endF -> .)
    CHAR            reduce using rule 41 (endF -> .)
    MAIN            reduce using rule 41 (endF -> .)

    endF                           shift and go to state 229

state 202

    (25) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE . listaEstatutos RBRACE declarMethods
    (42) listaEstatutos -> . estatutos listaEstatutos
    (43) listaEstatutos -> . empty
    (44) estatutos -> . llamada SCOLON
    (45) estatutos -> . asignacion SCOLON
    (46) estatutos -> . returnf SCOLON
    (47) estatutos -> . lectura SCOLON
    (48) estatutos -> . escritura SCOLON
    (49) estatutos -> . condicion
    (50) estatutos -> . cond_w
    (51) estatutos -> . cond_f
    (120) empty -> .
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (52) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (64) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (66) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (71) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (72) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (78) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (82) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (86) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 120 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 230
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 203

    (54) llamada -> ID DOT ID LPAREN enviaParam RPAREN .

    SCOLON          reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    MULT            reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    DIV             reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    PLUS            reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    MINUS           reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    LT              reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    GT              reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    LTE             reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    GTE             reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    EQUALS          reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    NEQUALS         reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    AND             reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    OR              reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    RBRACK          reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    RPAREN          reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    COMMA           reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    TO              reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    DO              reduce using rule 54 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)


state 204

    (55) llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .

    SCOLON          reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    MULT            reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    DIV             reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    PLUS            reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    MINUS           reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    LT              reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    GT              reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    LTE             reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    GTE             reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    EQUALS          reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    NEQUALS         reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    AND             reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    OR              reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    RBRACK          reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    RPAREN          reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    COMMA           reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    TO              reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    DO              reduce using rule 55 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)


state 205

    (59) paramReferencia -> exp paramType COMMA . paramCount paramReferencia
    (62) paramCount -> .

    LPAREN          reduce using rule 62 (paramCount -> .)
    CTE_I           reduce using rule 62 (paramCount -> .)
    CTE_F           reduce using rule 62 (paramCount -> .)
    CTE_C           reduce using rule 62 (paramCount -> .)
    ID              reduce using rule 62 (paramCount -> .)

    paramCount                     shift and go to state 231

state 206

    (20) idCall -> ID LBRACK exp RBRACK LBRACK exp . RBRACK

    RBRACK          shift and go to state 232


state 207

    (89) exp -> texp step7 OR pushPoper . exp
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    texp                           shift and go to state 124
    exp                            shift and go to state 233
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 208

    (91) texp -> gexp step6 AND pushPoper . texp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    gexp                           shift and go to state 125
    texp                           shift and go to state 234
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 209

    (93) gexp -> mexp step5 LT pushPoper . gexp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    mexp                           shift and go to state 126
    gexp                           shift and go to state 235
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 210

    (94) gexp -> mexp step5 GT pushPoper . gexp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    mexp                           shift and go to state 126
    gexp                           shift and go to state 236
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 211

    (95) gexp -> mexp step5 LTE pushPoper . gexp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    mexp                           shift and go to state 126
    gexp                           shift and go to state 237
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 212

    (96) gexp -> mexp step5 GTE pushPoper . gexp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    mexp                           shift and go to state 126
    gexp                           shift and go to state 238
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 213

    (97) gexp -> mexp step5 EQUALS pushPoper . gexp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    mexp                           shift and go to state 126
    gexp                           shift and go to state 239
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 214

    (98) gexp -> mexp step5 NEQUALS pushPoper . gexp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    mexp                           shift and go to state 126
    gexp                           shift and go to state 240
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 215

    (100) mexp -> t step4 PLUS pushPoper . mexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    t                              shift and go to state 127
    mexp                           shift and go to state 241
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 216

    (101) mexp -> t step4 MINUS pushPoper . mexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    t                              shift and go to state 127
    mexp                           shift and go to state 242
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 217

    (103) t -> f step3 MULT pushPoper . t
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    f                              shift and go to state 128
    t                              shift and go to state 243
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 218

    (104) t -> f step3 DIV pushPoper . t
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    f                              shift and go to state 128
    t                              shift and go to state 244
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 219

    (105) f -> LPAREN addFF exp RPAREN . rmFF
    (118) rmFF -> .

    MULT            reduce using rule 118 (rmFF -> .)
    DIV             reduce using rule 118 (rmFF -> .)
    PLUS            reduce using rule 118 (rmFF -> .)
    MINUS           reduce using rule 118 (rmFF -> .)
    LT              reduce using rule 118 (rmFF -> .)
    GT              reduce using rule 118 (rmFF -> .)
    LTE             reduce using rule 118 (rmFF -> .)
    GTE             reduce using rule 118 (rmFF -> .)
    EQUALS          reduce using rule 118 (rmFF -> .)
    NEQUALS         reduce using rule 118 (rmFF -> .)
    AND             reduce using rule 118 (rmFF -> .)
    OR              reduce using rule 118 (rmFF -> .)
    RBRACK          reduce using rule 118 (rmFF -> .)
    RPAREN          reduce using rule 118 (rmFF -> .)
    COMMA           reduce using rule 118 (rmFF -> .)
    SCOLON          reduce using rule 118 (rmFF -> .)
    TO              reduce using rule 118 (rmFF -> .)
    DO              reduce using rule 118 (rmFF -> .)

    rmFF                           shift and go to state 245

state 220

    (64) returnf -> RETURN pushPoper LPAREN exp RPAREN popReturn .

    SCOLON          reduce using rule 64 (returnf -> RETURN pushPoper LPAREN exp RPAREN popReturn .)


state 221

    (68) listaId -> idCall COMMA popIO . insertOpRead listaId
    (69) insertOpRead -> .

    ID              reduce using rule 69 (insertOpRead -> .)

    insertOpRead                   shift and go to state 246

state 222

    (71) escritura -> WRITE pushPoper LPAREN exp popIO lextra . RPAREN

    RPAREN          shift and go to state 247


state 223

    (73) lextra -> COMMA . insertOpWrite exp popIO lextra
    (74) lextra -> COMMA . insertOpWrite LETRERO letreroPush popIO lextra
    (76) insertOpWrite -> .

    LETRERO         reduce using rule 76 (insertOpWrite -> .)
    LPAREN          reduce using rule 76 (insertOpWrite -> .)
    CTE_I           reduce using rule 76 (insertOpWrite -> .)
    CTE_F           reduce using rule 76 (insertOpWrite -> .)
    CTE_C           reduce using rule 76 (insertOpWrite -> .)
    ID              reduce using rule 76 (insertOpWrite -> .)

    insertOpWrite                  shift and go to state 248

state 224

    (75) lextra -> empty .

    RPAREN          reduce using rule 75 (lextra -> empty .)


state 225

    (72) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO . lextra RPAREN
    (73) lextra -> . COMMA insertOpWrite exp popIO lextra
    (74) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (75) lextra -> . empty
    (120) empty -> .

    COMMA           shift and go to state 223
    RPAREN          reduce using rule 120 (empty -> .)

    lextra                         shift and go to state 249
    empty                          shift and go to state 224

state 226

    (78) condicion -> IF LPAREN exp RPAREN cond1 THEN . LBRACE listaEstatutos RBRACE
    (79) condicion -> IF LPAREN exp RPAREN cond1 THEN . LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 250


state 227

    (82) cond_w -> WHILE step1While LPAREN exp RPAREN step2While . DO LBRACE listaEstatutos RBRACE step3While

    DO              shift and go to state 251


state 228

    (86) cond_f -> FOR asignacion TO exp step1While step1For . step2While DO LBRACE listaEstatutos RBRACE step3While
    (84) step2While -> .

    DO              reduce using rule 84 (step2While -> .)

    step2While                     shift and go to state 252

state 229

    (37) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF . definFunc
    (37) definFunc -> . tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (38) definFunc -> . empty
    (27) tipoMethod -> . VOID
    (28) tipoMethod -> . INT
    (29) tipoMethod -> . FLOAT
    (30) tipoMethod -> . CHAR
    (120) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    MAIN            reduce using rule 120 (empty -> .)

    tipoMethod                     shift and go to state 14
    definFunc                      shift and go to state 253
    empty                          shift and go to state 15

state 230

    (25) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos . RBRACE declarMethods

    RBRACE          shift and go to state 254


state 231

    (59) paramReferencia -> exp paramType COMMA paramCount . paramReferencia
    (58) paramReferencia -> . exp paramType
    (59) paramReferencia -> . exp paramType COMMA paramCount paramReferencia
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    exp                            shift and go to state 150
    paramReferencia                shift and go to state 255
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 232

    (20) idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .

    ASIGNA          reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    MULT            reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    DIV             reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    PLUS            reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    MINUS           reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    LT              reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    GT              reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    LTE             reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    GTE             reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    EQUALS          reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    NEQUALS         reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    AND             reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    OR              reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    RBRACK          reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    RPAREN          reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    COMMA           reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    SCOLON          reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    TO              reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)
    DO              reduce using rule 20 (idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK .)


state 233

    (89) exp -> texp step7 OR pushPoper exp .

    RBRACK          reduce using rule 89 (exp -> texp step7 OR pushPoper exp .)
    RPAREN          reduce using rule 89 (exp -> texp step7 OR pushPoper exp .)
    COMMA           reduce using rule 89 (exp -> texp step7 OR pushPoper exp .)
    SCOLON          reduce using rule 89 (exp -> texp step7 OR pushPoper exp .)
    TO              reduce using rule 89 (exp -> texp step7 OR pushPoper exp .)
    DO              reduce using rule 89 (exp -> texp step7 OR pushPoper exp .)


state 234

    (91) texp -> gexp step6 AND pushPoper texp .

    OR              reduce using rule 91 (texp -> gexp step6 AND pushPoper texp .)
    RBRACK          reduce using rule 91 (texp -> gexp step6 AND pushPoper texp .)
    RPAREN          reduce using rule 91 (texp -> gexp step6 AND pushPoper texp .)
    COMMA           reduce using rule 91 (texp -> gexp step6 AND pushPoper texp .)
    SCOLON          reduce using rule 91 (texp -> gexp step6 AND pushPoper texp .)
    TO              reduce using rule 91 (texp -> gexp step6 AND pushPoper texp .)
    DO              reduce using rule 91 (texp -> gexp step6 AND pushPoper texp .)


state 235

    (93) gexp -> mexp step5 LT pushPoper gexp .

    AND             reduce using rule 93 (gexp -> mexp step5 LT pushPoper gexp .)
    OR              reduce using rule 93 (gexp -> mexp step5 LT pushPoper gexp .)
    RBRACK          reduce using rule 93 (gexp -> mexp step5 LT pushPoper gexp .)
    RPAREN          reduce using rule 93 (gexp -> mexp step5 LT pushPoper gexp .)
    COMMA           reduce using rule 93 (gexp -> mexp step5 LT pushPoper gexp .)
    SCOLON          reduce using rule 93 (gexp -> mexp step5 LT pushPoper gexp .)
    TO              reduce using rule 93 (gexp -> mexp step5 LT pushPoper gexp .)
    DO              reduce using rule 93 (gexp -> mexp step5 LT pushPoper gexp .)


state 236

    (94) gexp -> mexp step5 GT pushPoper gexp .

    AND             reduce using rule 94 (gexp -> mexp step5 GT pushPoper gexp .)
    OR              reduce using rule 94 (gexp -> mexp step5 GT pushPoper gexp .)
    RBRACK          reduce using rule 94 (gexp -> mexp step5 GT pushPoper gexp .)
    RPAREN          reduce using rule 94 (gexp -> mexp step5 GT pushPoper gexp .)
    COMMA           reduce using rule 94 (gexp -> mexp step5 GT pushPoper gexp .)
    SCOLON          reduce using rule 94 (gexp -> mexp step5 GT pushPoper gexp .)
    TO              reduce using rule 94 (gexp -> mexp step5 GT pushPoper gexp .)
    DO              reduce using rule 94 (gexp -> mexp step5 GT pushPoper gexp .)


state 237

    (95) gexp -> mexp step5 LTE pushPoper gexp .

    AND             reduce using rule 95 (gexp -> mexp step5 LTE pushPoper gexp .)
    OR              reduce using rule 95 (gexp -> mexp step5 LTE pushPoper gexp .)
    RBRACK          reduce using rule 95 (gexp -> mexp step5 LTE pushPoper gexp .)
    RPAREN          reduce using rule 95 (gexp -> mexp step5 LTE pushPoper gexp .)
    COMMA           reduce using rule 95 (gexp -> mexp step5 LTE pushPoper gexp .)
    SCOLON          reduce using rule 95 (gexp -> mexp step5 LTE pushPoper gexp .)
    TO              reduce using rule 95 (gexp -> mexp step5 LTE pushPoper gexp .)
    DO              reduce using rule 95 (gexp -> mexp step5 LTE pushPoper gexp .)


state 238

    (96) gexp -> mexp step5 GTE pushPoper gexp .

    AND             reduce using rule 96 (gexp -> mexp step5 GTE pushPoper gexp .)
    OR              reduce using rule 96 (gexp -> mexp step5 GTE pushPoper gexp .)
    RBRACK          reduce using rule 96 (gexp -> mexp step5 GTE pushPoper gexp .)
    RPAREN          reduce using rule 96 (gexp -> mexp step5 GTE pushPoper gexp .)
    COMMA           reduce using rule 96 (gexp -> mexp step5 GTE pushPoper gexp .)
    SCOLON          reduce using rule 96 (gexp -> mexp step5 GTE pushPoper gexp .)
    TO              reduce using rule 96 (gexp -> mexp step5 GTE pushPoper gexp .)
    DO              reduce using rule 96 (gexp -> mexp step5 GTE pushPoper gexp .)


state 239

    (97) gexp -> mexp step5 EQUALS pushPoper gexp .

    AND             reduce using rule 97 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    OR              reduce using rule 97 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    RBRACK          reduce using rule 97 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    RPAREN          reduce using rule 97 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    COMMA           reduce using rule 97 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    SCOLON          reduce using rule 97 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    TO              reduce using rule 97 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    DO              reduce using rule 97 (gexp -> mexp step5 EQUALS pushPoper gexp .)


state 240

    (98) gexp -> mexp step5 NEQUALS pushPoper gexp .

    AND             reduce using rule 98 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    OR              reduce using rule 98 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    RBRACK          reduce using rule 98 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    RPAREN          reduce using rule 98 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    COMMA           reduce using rule 98 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    SCOLON          reduce using rule 98 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    TO              reduce using rule 98 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    DO              reduce using rule 98 (gexp -> mexp step5 NEQUALS pushPoper gexp .)


state 241

    (100) mexp -> t step4 PLUS pushPoper mexp .

    LT              reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    GT              reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    LTE             reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    GTE             reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    EQUALS          reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    NEQUALS         reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    AND             reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    OR              reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    RBRACK          reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    RPAREN          reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    COMMA           reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    SCOLON          reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    TO              reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)
    DO              reduce using rule 100 (mexp -> t step4 PLUS pushPoper mexp .)


state 242

    (101) mexp -> t step4 MINUS pushPoper mexp .

    LT              reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    GT              reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    LTE             reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    GTE             reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    EQUALS          reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    NEQUALS         reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    AND             reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    OR              reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    RBRACK          reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    RPAREN          reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    COMMA           reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    SCOLON          reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    TO              reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)
    DO              reduce using rule 101 (mexp -> t step4 MINUS pushPoper mexp .)


state 243

    (103) t -> f step3 MULT pushPoper t .

    PLUS            reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    MINUS           reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    LT              reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    GT              reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    LTE             reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    GTE             reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    EQUALS          reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    NEQUALS         reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    AND             reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    OR              reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    RBRACK          reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    RPAREN          reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    COMMA           reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    SCOLON          reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    TO              reduce using rule 103 (t -> f step3 MULT pushPoper t .)
    DO              reduce using rule 103 (t -> f step3 MULT pushPoper t .)


state 244

    (104) t -> f step3 DIV pushPoper t .

    PLUS            reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    MINUS           reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    LT              reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    GT              reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    LTE             reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    GTE             reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    EQUALS          reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    NEQUALS         reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    AND             reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    OR              reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    RBRACK          reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    RPAREN          reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    COMMA           reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    SCOLON          reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    TO              reduce using rule 104 (t -> f step3 DIV pushPoper t .)
    DO              reduce using rule 104 (t -> f step3 DIV pushPoper t .)


state 245

    (105) f -> LPAREN addFF exp RPAREN rmFF .

    MULT            reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    DIV             reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    PLUS            reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    MINUS           reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    LT              reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    GT              reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    LTE             reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    GTE             reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    EQUALS          reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    NEQUALS         reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    AND             reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    OR              reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    RBRACK          reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    RPAREN          reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    COMMA           reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    SCOLON          reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    TO              reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)
    DO              reduce using rule 105 (f -> LPAREN addFF exp RPAREN rmFF .)


state 246

    (68) listaId -> idCall COMMA popIO insertOpRead . listaId
    (67) listaId -> . idCall popIO
    (68) listaId -> . idCall COMMA popIO insertOpRead listaId
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    ID              shift and go to state 117

    idCall                         shift and go to state 165
    listaId                        shift and go to state 256

state 247

    (71) escritura -> WRITE pushPoper LPAREN exp popIO lextra RPAREN .

    SCOLON          reduce using rule 71 (escritura -> WRITE pushPoper LPAREN exp popIO lextra RPAREN .)


state 248

    (73) lextra -> COMMA insertOpWrite . exp popIO lextra
    (74) lextra -> COMMA insertOpWrite . LETRERO letreroPush popIO lextra
    (88) exp -> . texp step7
    (89) exp -> . texp step7 OR pushPoper exp
    (90) texp -> . gexp step6
    (91) texp -> . gexp step6 AND pushPoper texp
    (92) gexp -> . mexp step5
    (93) gexp -> . mexp step5 LT pushPoper gexp
    (94) gexp -> . mexp step5 GT pushPoper gexp
    (95) gexp -> . mexp step5 LTE pushPoper gexp
    (96) gexp -> . mexp step5 GTE pushPoper gexp
    (97) gexp -> . mexp step5 EQUALS pushPoper gexp
    (98) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (99) mexp -> . t step4
    (100) mexp -> . t step4 PLUS pushPoper mexp
    (101) mexp -> . t step4 MINUS pushPoper mexp
    (102) t -> . f step3
    (103) t -> . f step3 MULT pushPoper t
    (104) t -> . f step3 DIV pushPoper t
    (105) f -> . LPAREN addFF exp RPAREN rmFF
    (106) f -> . CTE_I step1
    (107) f -> . CTE_F step1
    (108) f -> . CTE_C step1
    (109) f -> . llamada
    (110) f -> . idCall
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    LETRERO         shift and go to state 258
    LPAREN          shift and go to state 129
    CTE_I           shift and go to state 130
    CTE_F           shift and go to state 131
    CTE_C           shift and go to state 132
    ID              shift and go to state 74

    exp                            shift and go to state 257
    texp                           shift and go to state 124
    gexp                           shift and go to state 125
    mexp                           shift and go to state 126
    t                              shift and go to state 127
    f                              shift and go to state 128
    llamada                        shift and go to state 133
    idCall                         shift and go to state 134

state 249

    (72) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra . RPAREN

    RPAREN          shift and go to state 259


state 250

    (78) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE . listaEstatutos RBRACE
    (79) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE . listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (42) listaEstatutos -> . estatutos listaEstatutos
    (43) listaEstatutos -> . empty
    (44) estatutos -> . llamada SCOLON
    (45) estatutos -> . asignacion SCOLON
    (46) estatutos -> . returnf SCOLON
    (47) estatutos -> . lectura SCOLON
    (48) estatutos -> . escritura SCOLON
    (49) estatutos -> . condicion
    (50) estatutos -> . cond_w
    (51) estatutos -> . cond_f
    (120) empty -> .
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (52) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (64) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (66) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (71) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (72) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (78) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (82) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (86) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 120 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 260
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 251

    (82) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO . LBRACE listaEstatutos RBRACE step3While

    LBRACE          shift and go to state 261


state 252

    (86) cond_f -> FOR asignacion TO exp step1While step1For step2While . DO LBRACE listaEstatutos RBRACE step3While

    DO              shift and go to state 262


state 253

    (37) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc .

    MAIN            reduce using rule 37 (definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc .)


state 254

    (25) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE . declarMethods
    (25) declarMethods -> . tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (26) declarMethods -> . empty
    (27) tipoMethod -> . VOID
    (28) tipoMethod -> . INT
    (29) tipoMethod -> . FLOAT
    (30) tipoMethod -> . CHAR
    (120) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    RBRACE          reduce using rule 120 (empty -> .)

    tipoMethod                     shift and go to state 63
    declarMethods                  shift and go to state 263
    empty                          shift and go to state 64

state 255

    (59) paramReferencia -> exp paramType COMMA paramCount paramReferencia .

    RPAREN          reduce using rule 59 (paramReferencia -> exp paramType COMMA paramCount paramReferencia .)


state 256

    (68) listaId -> idCall COMMA popIO insertOpRead listaId .

    RPAREN          reduce using rule 68 (listaId -> idCall COMMA popIO insertOpRead listaId .)


state 257

    (73) lextra -> COMMA insertOpWrite exp . popIO lextra
    (70) popIO -> .

    COMMA           reduce using rule 70 (popIO -> .)
    RPAREN          reduce using rule 70 (popIO -> .)

    popIO                          shift and go to state 264

state 258

    (74) lextra -> COMMA insertOpWrite LETRERO . letreroPush popIO lextra
    (77) letreroPush -> .

    COMMA           reduce using rule 77 (letreroPush -> .)
    RPAREN          reduce using rule 77 (letreroPush -> .)

    letreroPush                    shift and go to state 265

state 259

    (72) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN .

    SCOLON          reduce using rule 72 (escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN .)


state 260

    (78) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos . RBRACE
    (79) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos . RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    RBRACE          shift and go to state 266


state 261

    (82) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE . listaEstatutos RBRACE step3While
    (42) listaEstatutos -> . estatutos listaEstatutos
    (43) listaEstatutos -> . empty
    (44) estatutos -> . llamada SCOLON
    (45) estatutos -> . asignacion SCOLON
    (46) estatutos -> . returnf SCOLON
    (47) estatutos -> . lectura SCOLON
    (48) estatutos -> . escritura SCOLON
    (49) estatutos -> . condicion
    (50) estatutos -> . cond_w
    (51) estatutos -> . cond_f
    (120) empty -> .
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (52) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (64) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (66) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (71) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (72) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (78) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (82) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (86) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 120 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 267
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 262

    (86) cond_f -> FOR asignacion TO exp step1While step1For step2While DO . LBRACE listaEstatutos RBRACE step3While

    LBRACE          shift and go to state 268


state 263

    (25) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods .

    RBRACE          reduce using rule 25 (declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods .)


state 264

    (73) lextra -> COMMA insertOpWrite exp popIO . lextra
    (73) lextra -> . COMMA insertOpWrite exp popIO lextra
    (74) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (75) lextra -> . empty
    (120) empty -> .

    COMMA           shift and go to state 223
    RPAREN          reduce using rule 120 (empty -> .)

    lextra                         shift and go to state 269
    empty                          shift and go to state 224

state 265

    (74) lextra -> COMMA insertOpWrite LETRERO letreroPush . popIO lextra
    (70) popIO -> .

    COMMA           reduce using rule 70 (popIO -> .)
    RPAREN          reduce using rule 70 (popIO -> .)

    popIO                          shift and go to state 270

state 266

    (78) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .
    (79) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE . ELSE cond3 LBRACE listaEstatutos RBRACE

    ID              reduce using rule 78 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 78 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 78 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 78 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 78 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 78 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 78 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 78 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    ELSE            shift and go to state 271


state 267

    (82) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos . RBRACE step3While

    RBRACE          shift and go to state 272


state 268

    (86) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE . listaEstatutos RBRACE step3While
    (42) listaEstatutos -> . estatutos listaEstatutos
    (43) listaEstatutos -> . empty
    (44) estatutos -> . llamada SCOLON
    (45) estatutos -> . asignacion SCOLON
    (46) estatutos -> . returnf SCOLON
    (47) estatutos -> . lectura SCOLON
    (48) estatutos -> . escritura SCOLON
    (49) estatutos -> . condicion
    (50) estatutos -> . cond_w
    (51) estatutos -> . cond_f
    (120) empty -> .
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (52) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (64) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (66) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (71) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (72) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (78) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (82) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (86) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 120 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    asignacion                     shift and go to state 79
    listaEstatutos                 shift and go to state 273
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 269

    (73) lextra -> COMMA insertOpWrite exp popIO lextra .

    RPAREN          reduce using rule 73 (lextra -> COMMA insertOpWrite exp popIO lextra .)


state 270

    (74) lextra -> COMMA insertOpWrite LETRERO letreroPush popIO . lextra
    (73) lextra -> . COMMA insertOpWrite exp popIO lextra
    (74) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (75) lextra -> . empty
    (120) empty -> .

    COMMA           shift and go to state 223
    RPAREN          reduce using rule 120 (empty -> .)

    lextra                         shift and go to state 274
    empty                          shift and go to state 224

state 271

    (79) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE . cond3 LBRACE listaEstatutos RBRACE
    (81) cond3 -> .

    LBRACE          reduce using rule 81 (cond3 -> .)

    cond3                          shift and go to state 275

state 272

    (82) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE . step3While
    (85) step3While -> .

    ID              reduce using rule 85 (step3While -> .)
    RETURN          reduce using rule 85 (step3While -> .)
    READ            reduce using rule 85 (step3While -> .)
    WRITE           reduce using rule 85 (step3While -> .)
    IF              reduce using rule 85 (step3While -> .)
    WHILE           reduce using rule 85 (step3While -> .)
    FOR             reduce using rule 85 (step3While -> .)
    RBRACE          reduce using rule 85 (step3While -> .)

    step3While                     shift and go to state 276

state 273

    (86) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos . RBRACE step3While

    RBRACE          shift and go to state 277


state 274

    (74) lextra -> COMMA insertOpWrite LETRERO letreroPush popIO lextra .

    RPAREN          reduce using rule 74 (lextra -> COMMA insertOpWrite LETRERO letreroPush popIO lextra .)


state 275

    (79) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 . LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 278


state 276

    (82) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .

    ID              reduce using rule 82 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RETURN          reduce using rule 82 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    READ            reduce using rule 82 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WRITE           reduce using rule 82 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    IF              reduce using rule 82 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WHILE           reduce using rule 82 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    FOR             reduce using rule 82 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RBRACE          reduce using rule 82 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)


state 277

    (86) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE . step3While
    (85) step3While -> .

    ID              reduce using rule 85 (step3While -> .)
    RETURN          reduce using rule 85 (step3While -> .)
    READ            reduce using rule 85 (step3While -> .)
    WRITE           reduce using rule 85 (step3While -> .)
    IF              reduce using rule 85 (step3While -> .)
    WHILE           reduce using rule 85 (step3While -> .)
    FOR             reduce using rule 85 (step3While -> .)
    RBRACE          reduce using rule 85 (step3While -> .)

    step3While                     shift and go to state 279

state 278

    (79) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE . listaEstatutos RBRACE
    (42) listaEstatutos -> . estatutos listaEstatutos
    (43) listaEstatutos -> . empty
    (44) estatutos -> . llamada SCOLON
    (45) estatutos -> . asignacion SCOLON
    (46) estatutos -> . returnf SCOLON
    (47) estatutos -> . lectura SCOLON
    (48) estatutos -> . escritura SCOLON
    (49) estatutos -> . condicion
    (50) estatutos -> . cond_w
    (51) estatutos -> . cond_f
    (120) empty -> .
    (54) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (55) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (52) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (64) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (66) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (71) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (72) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (78) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (79) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (82) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (86) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (17) idCall -> . ID
    (18) idCall -> . ID DOT ID
    (19) idCall -> . ID LBRACK exp RBRACK
    (20) idCall -> . ID LBRACK exp RBRACK LBRACK exp RBRACK

    RBRACE          reduce using rule 120 (empty -> .)
    ID              shift and go to state 74
    RETURN          shift and go to state 87
    READ            shift and go to state 88
    WRITE           shift and go to state 89
    IF              shift and go to state 90
    WHILE           shift and go to state 91
    FOR             shift and go to state 92

    listaEstatutos                 shift and go to state 280
    estatutos                      shift and go to state 76
    empty                          shift and go to state 77
    llamada                        shift and go to state 78
    asignacion                     shift and go to state 79
    returnf                        shift and go to state 80
    lectura                        shift and go to state 81
    escritura                      shift and go to state 82
    condicion                      shift and go to state 83
    cond_w                         shift and go to state 84
    cond_f                         shift and go to state 85
    idCall                         shift and go to state 86

state 279

    (86) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .

    ID              reduce using rule 86 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RETURN          reduce using rule 86 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    READ            reduce using rule 86 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WRITE           reduce using rule 86 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    IF              reduce using rule 86 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WHILE           reduce using rule 86 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    FOR             reduce using rule 86 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RBRACE          reduce using rule 86 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)


state 280

    (79) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos . RBRACE

    RBRACE          shift and go to state 281


state 281

    (79) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .

    ID              reduce using rule 79 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 79 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 79 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 79 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 79 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 79 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 79 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 79 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)

