Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    QUOTE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
Rule 2     prueba -> <empty>
Rule 3     initProg -> <empty>
Rule 4     auxMain -> <empty>
Rule 5     endProg -> <empty>
Rule 6     declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
Rule 7     declarClases -> empty
Rule 8     herencia -> LT EXTENDS ID GT
Rule 9     herencia -> empty
Rule 10    declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes
Rule 11    declarAttributes -> empty
Rule 12    listaIdDeclare -> idDeclare
Rule 13    listaIdDeclare -> idDeclare COMMA listaIdDeclare
Rule 14    idDeclare -> ID auxDeclare auxDeclare2
Rule 15    idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK auxCTE
Rule 16    idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK LBRACK CTE_I auxCTE2 RBRACK
Rule 17    auxDeclare -> <empty>
Rule 18    auxDeclare2 -> <empty>
Rule 19    auxCTE -> <empty>
Rule 20    auxCTE2 -> <empty>
Rule 21    idCall -> ID idCallaux
Rule 22    idCall -> ID idCallaux DOT ID
Rule 23    idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
Rule 24    idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF
Rule 25    idCallaux -> <empty>
Rule 26    idCallaux2 -> <empty>
Rule 27    idCallaux3 -> <empty>
Rule 28    tipo -> ID
Rule 29    tipo -> INT
Rule 30    tipo -> FLOAT
Rule 31    tipo -> CHAR
Rule 32    declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
Rule 33    declarMethods -> empty
Rule 34    tipoMethod -> VOID
Rule 35    tipoMethod -> INT
Rule 36    tipoMethod -> FLOAT
Rule 37    tipoMethod -> CHAR
Rule 38    listaParam -> param
Rule 39    listaParam -> param COMMA listaParam
Rule 40    listaParam -> empty
Rule 41    param -> tipo COLON ID
Rule 42    declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar
Rule 43    declarVar -> empty
Rule 44    definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
Rule 45    definFunc -> empty
Rule 46    auxFuncion -> <empty>
Rule 47    setDI -> <empty>
Rule 48    endF -> <empty>
Rule 49    listaEstatutos -> estatutos listaEstatutos
Rule 50    listaEstatutos -> empty
Rule 51    estatutos -> llamada SCOLON
Rule 52    estatutos -> asignacion SCOLON
Rule 53    estatutos -> returnf SCOLON
Rule 54    estatutos -> lectura SCOLON
Rule 55    estatutos -> escritura SCOLON
Rule 56    estatutos -> condicion
Rule 57    estatutos -> cond_w
Rule 58    estatutos -> cond_f
Rule 59    asignacion -> idCall ASIGNA pushPoper exp asignStep2
Rule 60    asignStep2 -> <empty>
Rule 61    llamada -> ID DOT ID LPAREN enviaParam RPAREN
Rule 62    llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN
Rule 63    enviaParam -> paramReferencia
Rule 64    enviaParam -> empty
Rule 65    paramReferencia -> exp paramType
Rule 66    paramReferencia -> exp paramType COMMA paramCount paramReferencia
Rule 67    verExist -> <empty>
Rule 68    paramType -> <empty>
Rule 69    paramCount -> <empty>
Rule 70    coherenceGo -> <empty>
Rule 71    returnf -> RETURN pushPoper LPAREN exp RPAREN popReturn
Rule 72    popReturn -> <empty>
Rule 73    lectura -> READ pushPoper LPAREN listaId RPAREN
Rule 74    listaId -> idCall popIO
Rule 75    listaId -> idCall COMMA popIO insertOpRead listaId
Rule 76    insertOpRead -> <empty>
Rule 77    popIO -> <empty>
Rule 78    escritura -> WRITE pushPoper LPAREN exp popIO lextra RPAREN
Rule 79    escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
Rule 80    lextra -> COMMA insertOpWrite exp popIO lextra
Rule 81    lextra -> COMMA insertOpWrite LETRERO letreroPush popIO lextra
Rule 82    lextra -> empty
Rule 83    insertOpWrite -> <empty>
Rule 84    letreroPush -> <empty>
Rule 85    condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
Rule 86    condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
Rule 87    cond1 -> <empty>
Rule 88    cond3 -> <empty>
Rule 89    cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
Rule 90    step1While -> <empty>
Rule 91    step2While -> <empty>
Rule 92    step3While -> <empty>
Rule 93    cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
Rule 94    step1For -> <empty>
Rule 95    exp -> texp step7
Rule 96    exp -> texp step7 OR pushPoper exp
Rule 97    texp -> gexp step6
Rule 98    texp -> gexp step6 AND pushPoper texp
Rule 99    gexp -> mexp step5
Rule 100   gexp -> mexp step5 LT pushPoper gexp
Rule 101   gexp -> mexp step5 GT pushPoper gexp
Rule 102   gexp -> mexp step5 LTE pushPoper gexp
Rule 103   gexp -> mexp step5 GTE pushPoper gexp
Rule 104   gexp -> mexp step5 EQUALS pushPoper gexp
Rule 105   gexp -> mexp step5 NEQUALS pushPoper gexp
Rule 106   mexp -> t step4
Rule 107   mexp -> t step4 PLUS pushPoper mexp
Rule 108   mexp -> t step4 MINUS pushPoper mexp
Rule 109   t -> f step3
Rule 110   t -> f step3 MULT pushPoper t
Rule 111   t -> f step3 DIV pushPoper t
Rule 112   f -> LPAREN addFF exp RPAREN rmFF
Rule 113   f -> CTE_I step1
Rule 114   f -> CTE_F step1
Rule 115   f -> CTE_C step1
Rule 116   f -> llamada
Rule 117   f -> idCall
Rule 118   step1 -> <empty>
Rule 119   step3 -> <empty>
Rule 120   step4 -> <empty>
Rule 121   step5 -> <empty>
Rule 122   step6 -> <empty>
Rule 123   step7 -> <empty>
Rule 124   addFF -> <empty>
Rule 125   rmFF -> <empty>
Rule 126   pushPoper -> <empty>
Rule 127   empty -> <empty>

Terminals, with rules where they appear

AND                  : 98
ASIGNA               : 59
ATTRIBUTES           : 6
CHAR                 : 31 37
CLASS                : 6
COLON                : 10 41 42
COMMA                : 13 39 66 75 80 81
CTE_C                : 115
CTE_F                : 114
CTE_I                : 15 16 16 113
DIV                  : 111
DO                   : 89 93
DOT                  : 22 61
ELSE                 : 86
EQUALS               : 104
EXTENDS              : 8
FLOAT                : 30 36
FOR                  : 93
FUNC                 : 32 44
GT                   : 8 101
GTE                  : 103
ID                   : 1 6 8 14 15 16 21 22 22 23 24 28 32 41 44 61 61 62
IF                   : 85 86
INT                  : 29 35
LBRACE               : 1 6 32 44 85 86 86 89 93
LBRACK               : 15 16 16 23 24 24
LETRERO              : 79 81
LPAREN               : 1 32 44 61 62 71 73 78 79 85 86 89 112
LT                   : 8 100
LTE                  : 102
MAIN                 : 1
METHODS              : 6
MINUS                : 108
MULT                 : 110
NEQUALS              : 105
OR                   : 96
PLUS                 : 107
PROGRAM              : 1
QUOTE                : 
RBRACE               : 1 6 32 44 85 86 86 89 93
RBRACK               : 15 16 16 23 24 24
READ                 : 73
RETURN               : 71
RPAREN               : 1 32 44 61 62 71 73 78 79 85 86 89 112
SCOLON               : 1 10 23 42 51 52 53 54 55
THEN                 : 85 86
TO                   : 93
VAR                  : 42
VOID                 : 34
WHILE                : 89
WRITE                : 78 79
error                : 

Nonterminals, with rules where they appear

addFF                : 23 24 24 112
asignStep2           : 59
asignacion           : 52 93
auxCTE               : 15
auxCTE2              : 16
auxDeclare           : 14 15 16
auxDeclare2          : 14
auxFuncion           : 44
auxMain              : 1
coherenceGo          : 62
cond1                : 85 86
cond3                : 86
cond_f               : 58
cond_w               : 57
condicion            : 56
declarAttributes     : 6 10
declarClases         : 1 6
declarMethods        : 6 32
declarVar            : 1 1 42 44
definFunc            : 1 44
empty                : 7 9 11 33 40 43 45 50 64 82
endF                 : 44
endProg              : 1
enviaParam           : 61 62
escritura            : 55
estatutos            : 49
exp                  : 23 24 24 59 65 66 71 78 80 85 86 89 93 96 112
f                    : 109 110 111
gexp                 : 97 98 100 101 102 103 104 105
herencia             : 6
idCall               : 59 74 75 117
idCallaux            : 21 22 23 24
idCallaux2           : 23 24
idCallaux3           : 24
idDeclare            : 12 13
initProg             : 1
insertOpRead         : 75
insertOpWrite        : 80 81
lectura              : 54
letreroPush          : 79 81
lextra               : 78 79 80 81
listaEstatutos       : 1 32 44 49 85 86 86 89 93
listaId              : 73 75
listaIdDeclare       : 10 13 42
listaParam           : 32 39 44
llamada              : 51 116
mexp                 : 99 100 101 102 103 104 105 107 108
param                : 38 39
paramCount           : 66
paramReferencia      : 63 66
paramType            : 65 66
popIO                : 74 75 78 79 80 81
popReturn            : 71
program              : 0
prueba               : 1
pushPoper            : 59 71 73 78 79 96 98 100 101 102 103 104 105 107 108 110 111
returnf              : 53
rmFF                 : 23 24 24 112
setDI                : 44
step1                : 113 114 115
step1For             : 93
step1While           : 89 93
step2While           : 89 93
step3                : 109 110 111
step3While           : 89 93
step4                : 106 107 108
step5                : 99 100 101 102 103 104 105
step6                : 97 98
step7                : 95 96
t                    : 106 107 108 110 111
texp                 : 95 96 98
tipo                 : 10 41 42
tipoMethod           : 32 44
verExist             : 62

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (3) initProg -> .

    SCOLON          reduce using rule 3 (initProg -> .)

    initProg                       shift and go to state 4

state 4

    (1) program -> PROGRAM ID initProg . SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    SCOLON          shift and go to state 5


state 5

    (1) program -> PROGRAM ID initProg SCOLON . declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (6) declarClases -> . CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (7) declarClases -> . empty
    (127) empty -> .

    CLASS           shift and go to state 7
    VAR             reduce using rule 127 (empty -> .)
    VOID            reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)
    MAIN            reduce using rule 127 (empty -> .)

    declarClases                   shift and go to state 6
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM ID initProg SCOLON declarClases . declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (42) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (43) declarVar -> . empty
    (127) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)
    MAIN            reduce using rule 127 (empty -> .)

    declarVar                      shift and go to state 9
    empty                          shift and go to state 11

state 7

    (6) declarClases -> CLASS . ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    ID              shift and go to state 12


state 8

    (7) declarClases -> empty .

    VAR             reduce using rule 7 (declarClases -> empty .)
    VOID            reduce using rule 7 (declarClases -> empty .)
    INT             reduce using rule 7 (declarClases -> empty .)
    FLOAT           reduce using rule 7 (declarClases -> empty .)
    CHAR            reduce using rule 7 (declarClases -> empty .)
    MAIN            reduce using rule 7 (declarClases -> empty .)


state 9

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar . definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (44) definFunc -> . tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (45) definFunc -> . empty
    (34) tipoMethod -> . VOID
    (35) tipoMethod -> . INT
    (36) tipoMethod -> . FLOAT
    (37) tipoMethod -> . CHAR
    (127) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    MAIN            reduce using rule 127 (empty -> .)

    definFunc                      shift and go to state 13
    tipoMethod                     shift and go to state 14
    empty                          shift and go to state 15

state 10

    (42) declarVar -> VAR . tipo COLON listaIdDeclare SCOLON declarVar
    (28) tipo -> . ID
    (29) tipo -> . INT
    (30) tipo -> . FLOAT
    (31) tipo -> . CHAR

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    tipo                           shift and go to state 20

state 11

    (43) declarVar -> empty .

    VOID            reduce using rule 43 (declarVar -> empty .)
    INT             reduce using rule 43 (declarVar -> empty .)
    FLOAT           reduce using rule 43 (declarVar -> empty .)
    CHAR            reduce using rule 43 (declarVar -> empty .)
    MAIN            reduce using rule 43 (declarVar -> empty .)
    LBRACE          reduce using rule 43 (declarVar -> empty .)


state 12

    (6) declarClases -> CLASS ID . herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (8) herencia -> . LT EXTENDS ID GT
    (9) herencia -> . empty
    (127) empty -> .

    LT              shift and go to state 26
    LBRACE          reduce using rule 127 (empty -> .)

    herencia                       shift and go to state 25
    empty                          shift and go to state 27

state 13

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc . MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    MAIN            shift and go to state 28


state 14

    (44) definFunc -> tipoMethod . FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    FUNC            shift and go to state 29


state 15

    (45) definFunc -> empty .

    MAIN            reduce using rule 45 (definFunc -> empty .)


state 16

    (34) tipoMethod -> VOID .

    FUNC            reduce using rule 34 (tipoMethod -> VOID .)


state 17

    (35) tipoMethod -> INT .

    FUNC            reduce using rule 35 (tipoMethod -> INT .)


state 18

    (36) tipoMethod -> FLOAT .

    FUNC            reduce using rule 36 (tipoMethod -> FLOAT .)


state 19

    (37) tipoMethod -> CHAR .

    FUNC            reduce using rule 37 (tipoMethod -> CHAR .)


state 20

    (42) declarVar -> VAR tipo . COLON listaIdDeclare SCOLON declarVar

    COLON           shift and go to state 30


state 21

    (28) tipo -> ID .

    COLON           reduce using rule 28 (tipo -> ID .)


state 22

    (29) tipo -> INT .

    COLON           reduce using rule 29 (tipo -> INT .)


state 23

    (30) tipo -> FLOAT .

    COLON           reduce using rule 30 (tipo -> FLOAT .)


state 24

    (31) tipo -> CHAR .

    COLON           reduce using rule 31 (tipo -> CHAR .)


state 25

    (6) declarClases -> CLASS ID herencia . LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    LBRACE          shift and go to state 31


state 26

    (8) herencia -> LT . EXTENDS ID GT

    EXTENDS         shift and go to state 32


state 27

    (9) herencia -> empty .

    LBRACE          reduce using rule 9 (herencia -> empty .)


state 28

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN . auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (4) auxMain -> .

    LPAREN          reduce using rule 4 (auxMain -> .)

    auxMain                        shift and go to state 33

state 29

    (44) definFunc -> tipoMethod FUNC . ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    ID              shift and go to state 34


state 30

    (42) declarVar -> VAR tipo COLON . listaIdDeclare SCOLON declarVar
    (12) listaIdDeclare -> . idDeclare
    (13) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (14) idDeclare -> . ID auxDeclare auxDeclare2
    (15) idDeclare -> . ID auxDeclare LBRACK CTE_I RBRACK auxCTE
    (16) idDeclare -> . ID auxDeclare LBRACK CTE_I RBRACK LBRACK CTE_I auxCTE2 RBRACK

    ID              shift and go to state 37

    listaIdDeclare                 shift and go to state 35
    idDeclare                      shift and go to state 36

state 31

    (6) declarClases -> CLASS ID herencia LBRACE . ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases

    ATTRIBUTES      shift and go to state 38


state 32

    (8) herencia -> LT EXTENDS . ID GT

    ID              shift and go to state 39


state 33

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain . LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    LPAREN          shift and go to state 40


state 34

    (44) definFunc -> tipoMethod FUNC ID . auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (46) auxFuncion -> .

    LPAREN          reduce using rule 46 (auxFuncion -> .)

    auxFuncion                     shift and go to state 41

state 35

    (42) declarVar -> VAR tipo COLON listaIdDeclare . SCOLON declarVar

    SCOLON          shift and go to state 42


state 36

    (12) listaIdDeclare -> idDeclare .
    (13) listaIdDeclare -> idDeclare . COMMA listaIdDeclare

    SCOLON          reduce using rule 12 (listaIdDeclare -> idDeclare .)
    COMMA           shift and go to state 43


state 37

    (14) idDeclare -> ID . auxDeclare auxDeclare2
    (15) idDeclare -> ID . auxDeclare LBRACK CTE_I RBRACK auxCTE
    (16) idDeclare -> ID . auxDeclare LBRACK CTE_I RBRACK LBRACK CTE_I auxCTE2 RBRACK
    (17) auxDeclare -> .

    LBRACK          reduce using rule 17 (auxDeclare -> .)
    COMMA           reduce using rule 17 (auxDeclare -> .)
    SCOLON          reduce using rule 17 (auxDeclare -> .)

    auxDeclare                     shift and go to state 44

state 38

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES . declarAttributes METHODS declarMethods RBRACE declarClases
    (10) declarAttributes -> . tipo COLON listaIdDeclare SCOLON declarAttributes
    (11) declarAttributes -> . empty
    (28) tipo -> . ID
    (29) tipo -> . INT
    (30) tipo -> . FLOAT
    (31) tipo -> . CHAR
    (127) empty -> .

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    METHODS         reduce using rule 127 (empty -> .)

    declarAttributes               shift and go to state 45
    tipo                           shift and go to state 46
    empty                          shift and go to state 47

state 39

    (8) herencia -> LT EXTENDS ID . GT

    GT              shift and go to state 48


state 40

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN . RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba

    RPAREN          shift and go to state 49


state 41

    (44) definFunc -> tipoMethod FUNC ID auxFuncion . LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    LPAREN          shift and go to state 50


state 42

    (42) declarVar -> VAR tipo COLON listaIdDeclare SCOLON . declarVar
    (42) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (43) declarVar -> . empty
    (127) empty -> .

    VAR             shift and go to state 10
    VOID            reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)
    MAIN            reduce using rule 127 (empty -> .)
    LBRACE          reduce using rule 127 (empty -> .)

    declarVar                      shift and go to state 51
    empty                          shift and go to state 11

state 43

    (13) listaIdDeclare -> idDeclare COMMA . listaIdDeclare
    (12) listaIdDeclare -> . idDeclare
    (13) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (14) idDeclare -> . ID auxDeclare auxDeclare2
    (15) idDeclare -> . ID auxDeclare LBRACK CTE_I RBRACK auxCTE
    (16) idDeclare -> . ID auxDeclare LBRACK CTE_I RBRACK LBRACK CTE_I auxCTE2 RBRACK

    ID              shift and go to state 37

    idDeclare                      shift and go to state 36
    listaIdDeclare                 shift and go to state 52

state 44

    (14) idDeclare -> ID auxDeclare . auxDeclare2
    (15) idDeclare -> ID auxDeclare . LBRACK CTE_I RBRACK auxCTE
    (16) idDeclare -> ID auxDeclare . LBRACK CTE_I RBRACK LBRACK CTE_I auxCTE2 RBRACK
    (18) auxDeclare2 -> .

    LBRACK          shift and go to state 54
    COMMA           reduce using rule 18 (auxDeclare2 -> .)
    SCOLON          reduce using rule 18 (auxDeclare2 -> .)

    auxDeclare2                    shift and go to state 53

state 45

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes . METHODS declarMethods RBRACE declarClases

    METHODS         shift and go to state 55


state 46

    (10) declarAttributes -> tipo . COLON listaIdDeclare SCOLON declarAttributes

    COLON           shift and go to state 56


state 47

    (11) declarAttributes -> empty .

    METHODS         reduce using rule 11 (declarAttributes -> empty .)


state 48

    (8) herencia -> LT EXTENDS ID GT .

    LBRACE          reduce using rule 8 (herencia -> LT EXTENDS ID GT .)


state 49

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN . declarVar LBRACE listaEstatutos RBRACE endProg prueba
    (42) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (43) declarVar -> . empty
    (127) empty -> .

    VAR             shift and go to state 10
    LBRACE          reduce using rule 127 (empty -> .)

    declarVar                      shift and go to state 57
    empty                          shift and go to state 11

state 50

    (44) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN . listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (38) listaParam -> . param
    (39) listaParam -> . param COMMA listaParam
    (40) listaParam -> . empty
    (41) param -> . tipo COLON ID
    (127) empty -> .
    (28) tipo -> . ID
    (29) tipo -> . INT
    (30) tipo -> . FLOAT
    (31) tipo -> . CHAR

    RPAREN          reduce using rule 127 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    listaParam                     shift and go to state 58
    param                          shift and go to state 59
    empty                          shift and go to state 60
    tipo                           shift and go to state 61

state 51

    (42) declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .

    VOID            reduce using rule 42 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    INT             reduce using rule 42 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    FLOAT           reduce using rule 42 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    CHAR            reduce using rule 42 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    MAIN            reduce using rule 42 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)
    LBRACE          reduce using rule 42 (declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar .)


state 52

    (13) listaIdDeclare -> idDeclare COMMA listaIdDeclare .

    SCOLON          reduce using rule 13 (listaIdDeclare -> idDeclare COMMA listaIdDeclare .)


state 53

    (14) idDeclare -> ID auxDeclare auxDeclare2 .

    COMMA           reduce using rule 14 (idDeclare -> ID auxDeclare auxDeclare2 .)
    SCOLON          reduce using rule 14 (idDeclare -> ID auxDeclare auxDeclare2 .)


state 54

    (15) idDeclare -> ID auxDeclare LBRACK . CTE_I RBRACK auxCTE
    (16) idDeclare -> ID auxDeclare LBRACK . CTE_I RBRACK LBRACK CTE_I auxCTE2 RBRACK

    CTE_I           shift and go to state 62


state 55

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS . declarMethods RBRACE declarClases
    (32) declarMethods -> . tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (33) declarMethods -> . empty
    (34) tipoMethod -> . VOID
    (35) tipoMethod -> . INT
    (36) tipoMethod -> . FLOAT
    (37) tipoMethod -> . CHAR
    (127) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    RBRACE          reduce using rule 127 (empty -> .)

    declarMethods                  shift and go to state 63
    tipoMethod                     shift and go to state 64
    empty                          shift and go to state 65

state 56

    (10) declarAttributes -> tipo COLON . listaIdDeclare SCOLON declarAttributes
    (12) listaIdDeclare -> . idDeclare
    (13) listaIdDeclare -> . idDeclare COMMA listaIdDeclare
    (14) idDeclare -> . ID auxDeclare auxDeclare2
    (15) idDeclare -> . ID auxDeclare LBRACK CTE_I RBRACK auxCTE
    (16) idDeclare -> . ID auxDeclare LBRACK CTE_I RBRACK LBRACK CTE_I auxCTE2 RBRACK

    ID              shift and go to state 37

    listaIdDeclare                 shift and go to state 66
    idDeclare                      shift and go to state 36

state 57

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar . LBRACE listaEstatutos RBRACE endProg prueba

    LBRACE          shift and go to state 67


state 58

    (44) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam . RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc

    RPAREN          shift and go to state 68


state 59

    (38) listaParam -> param .
    (39) listaParam -> param . COMMA listaParam

    RPAREN          reduce using rule 38 (listaParam -> param .)
    COMMA           shift and go to state 69


state 60

    (40) listaParam -> empty .

    RPAREN          reduce using rule 40 (listaParam -> empty .)


state 61

    (41) param -> tipo . COLON ID

    COLON           shift and go to state 70


state 62

    (15) idDeclare -> ID auxDeclare LBRACK CTE_I . RBRACK auxCTE
    (16) idDeclare -> ID auxDeclare LBRACK CTE_I . RBRACK LBRACK CTE_I auxCTE2 RBRACK

    RBRACK          shift and go to state 71


state 63

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods . RBRACE declarClases

    RBRACE          shift and go to state 72


state 64

    (32) declarMethods -> tipoMethod . FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    FUNC            shift and go to state 73


state 65

    (33) declarMethods -> empty .

    RBRACE          reduce using rule 33 (declarMethods -> empty .)


state 66

    (10) declarAttributes -> tipo COLON listaIdDeclare . SCOLON declarAttributes

    SCOLON          shift and go to state 74


state 67

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE . listaEstatutos RBRACE endProg prueba
    (49) listaEstatutos -> . estatutos listaEstatutos
    (50) listaEstatutos -> . empty
    (51) estatutos -> . llamada SCOLON
    (52) estatutos -> . asignacion SCOLON
    (53) estatutos -> . returnf SCOLON
    (54) estatutos -> . lectura SCOLON
    (55) estatutos -> . escritura SCOLON
    (56) estatutos -> . condicion
    (57) estatutos -> . cond_w
    (58) estatutos -> . cond_f
    (127) empty -> .
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (59) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (71) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (73) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (78) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (79) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (85) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (89) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (93) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    RBRACE          reduce using rule 127 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 76
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 68

    (44) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN . declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (42) declarVar -> . VAR tipo COLON listaIdDeclare SCOLON declarVar
    (43) declarVar -> . empty
    (127) empty -> .

    VAR             shift and go to state 10
    LBRACE          reduce using rule 127 (empty -> .)

    declarVar                      shift and go to state 94
    empty                          shift and go to state 11

state 69

    (39) listaParam -> param COMMA . listaParam
    (38) listaParam -> . param
    (39) listaParam -> . param COMMA listaParam
    (40) listaParam -> . empty
    (41) param -> . tipo COLON ID
    (127) empty -> .
    (28) tipo -> . ID
    (29) tipo -> . INT
    (30) tipo -> . FLOAT
    (31) tipo -> . CHAR

    RPAREN          reduce using rule 127 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    param                          shift and go to state 59
    listaParam                     shift and go to state 95
    empty                          shift and go to state 60
    tipo                           shift and go to state 61

state 70

    (41) param -> tipo COLON . ID

    ID              shift and go to state 96


state 71

    (15) idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK . auxCTE
    (16) idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK . LBRACK CTE_I auxCTE2 RBRACK
    (19) auxCTE -> .

    LBRACK          shift and go to state 97
    COMMA           reduce using rule 19 (auxCTE -> .)
    SCOLON          reduce using rule 19 (auxCTE -> .)

    auxCTE                         shift and go to state 98

state 72

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE . declarClases
    (6) declarClases -> . CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases
    (7) declarClases -> . empty
    (127) empty -> .

    CLASS           shift and go to state 7
    VAR             reduce using rule 127 (empty -> .)
    VOID            reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)
    MAIN            reduce using rule 127 (empty -> .)

    declarClases                   shift and go to state 99
    empty                          shift and go to state 8

state 73

    (32) declarMethods -> tipoMethod FUNC . ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    ID              shift and go to state 100


state 74

    (10) declarAttributes -> tipo COLON listaIdDeclare SCOLON . declarAttributes
    (10) declarAttributes -> . tipo COLON listaIdDeclare SCOLON declarAttributes
    (11) declarAttributes -> . empty
    (28) tipo -> . ID
    (29) tipo -> . INT
    (30) tipo -> . FLOAT
    (31) tipo -> . CHAR
    (127) empty -> .

    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24
    METHODS         reduce using rule 127 (empty -> .)

    tipo                           shift and go to state 46
    declarAttributes               shift and go to state 101
    empty                          shift and go to state 47

state 75

    (61) llamada -> ID . DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> ID . verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> ID . idCallaux
    (22) idCall -> ID . idCallaux DOT ID
    (23) idCall -> ID . idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> ID . idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF
    (67) verExist -> .
    (25) idCallaux -> .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 102
    LPAREN          reduce using rule 67 (verExist -> .)
    LBRACK          reduce using rule 25 (idCallaux -> .)
    ASIGNA          reduce using rule 25 (idCallaux -> .)
    MULT            reduce using rule 25 (idCallaux -> .)
    DIV             reduce using rule 25 (idCallaux -> .)
    PLUS            reduce using rule 25 (idCallaux -> .)
    MINUS           reduce using rule 25 (idCallaux -> .)
    LT              reduce using rule 25 (idCallaux -> .)
    GT              reduce using rule 25 (idCallaux -> .)
    LTE             reduce using rule 25 (idCallaux -> .)
    GTE             reduce using rule 25 (idCallaux -> .)
    EQUALS          reduce using rule 25 (idCallaux -> .)
    NEQUALS         reduce using rule 25 (idCallaux -> .)
    AND             reduce using rule 25 (idCallaux -> .)
    OR              reduce using rule 25 (idCallaux -> .)
    RPAREN          reduce using rule 25 (idCallaux -> .)
    COMMA           reduce using rule 25 (idCallaux -> .)
    SCOLON          reduce using rule 25 (idCallaux -> .)
    TO              reduce using rule 25 (idCallaux -> .)
    DO              reduce using rule 25 (idCallaux -> .)
    RBRACK          reduce using rule 25 (idCallaux -> .)

  ! DOT             [ reduce using rule 25 (idCallaux -> .) ]

    verExist                       shift and go to state 103
    idCallaux                      shift and go to state 104

state 76

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos . RBRACE endProg prueba

    RBRACE          shift and go to state 105


state 77

    (49) listaEstatutos -> estatutos . listaEstatutos
    (49) listaEstatutos -> . estatutos listaEstatutos
    (50) listaEstatutos -> . empty
    (51) estatutos -> . llamada SCOLON
    (52) estatutos -> . asignacion SCOLON
    (53) estatutos -> . returnf SCOLON
    (54) estatutos -> . lectura SCOLON
    (55) estatutos -> . escritura SCOLON
    (56) estatutos -> . condicion
    (57) estatutos -> . cond_w
    (58) estatutos -> . cond_f
    (127) empty -> .
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (59) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (71) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (73) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (78) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (79) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (85) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (89) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (93) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    RBRACE          reduce using rule 127 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    estatutos                      shift and go to state 77
    listaEstatutos                 shift and go to state 106
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 78

    (50) listaEstatutos -> empty .

    RBRACE          reduce using rule 50 (listaEstatutos -> empty .)


state 79

    (51) estatutos -> llamada . SCOLON

    SCOLON          shift and go to state 107


state 80

    (52) estatutos -> asignacion . SCOLON

    SCOLON          shift and go to state 108


state 81

    (53) estatutos -> returnf . SCOLON

    SCOLON          shift and go to state 109


state 82

    (54) estatutos -> lectura . SCOLON

    SCOLON          shift and go to state 110


state 83

    (55) estatutos -> escritura . SCOLON

    SCOLON          shift and go to state 111


state 84

    (56) estatutos -> condicion .

    ID              reduce using rule 56 (estatutos -> condicion .)
    RETURN          reduce using rule 56 (estatutos -> condicion .)
    READ            reduce using rule 56 (estatutos -> condicion .)
    WRITE           reduce using rule 56 (estatutos -> condicion .)
    IF              reduce using rule 56 (estatutos -> condicion .)
    WHILE           reduce using rule 56 (estatutos -> condicion .)
    FOR             reduce using rule 56 (estatutos -> condicion .)
    RBRACE          reduce using rule 56 (estatutos -> condicion .)


state 85

    (57) estatutos -> cond_w .

    ID              reduce using rule 57 (estatutos -> cond_w .)
    RETURN          reduce using rule 57 (estatutos -> cond_w .)
    READ            reduce using rule 57 (estatutos -> cond_w .)
    WRITE           reduce using rule 57 (estatutos -> cond_w .)
    IF              reduce using rule 57 (estatutos -> cond_w .)
    WHILE           reduce using rule 57 (estatutos -> cond_w .)
    FOR             reduce using rule 57 (estatutos -> cond_w .)
    RBRACE          reduce using rule 57 (estatutos -> cond_w .)


state 86

    (58) estatutos -> cond_f .

    ID              reduce using rule 58 (estatutos -> cond_f .)
    RETURN          reduce using rule 58 (estatutos -> cond_f .)
    READ            reduce using rule 58 (estatutos -> cond_f .)
    WRITE           reduce using rule 58 (estatutos -> cond_f .)
    IF              reduce using rule 58 (estatutos -> cond_f .)
    WHILE           reduce using rule 58 (estatutos -> cond_f .)
    FOR             reduce using rule 58 (estatutos -> cond_f .)
    RBRACE          reduce using rule 58 (estatutos -> cond_f .)


state 87

    (59) asignacion -> idCall . ASIGNA pushPoper exp asignStep2

    ASIGNA          shift and go to state 112


state 88

    (71) returnf -> RETURN . pushPoper LPAREN exp RPAREN popReturn
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 113

state 89

    (73) lectura -> READ . pushPoper LPAREN listaId RPAREN
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 114

state 90

    (78) escritura -> WRITE . pushPoper LPAREN exp popIO lextra RPAREN
    (79) escritura -> WRITE . pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 115

state 91

    (85) condicion -> IF . LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> IF . LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    LPAREN          shift and go to state 116


state 92

    (89) cond_w -> WHILE . step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (90) step1While -> .

    LPAREN          reduce using rule 90 (step1While -> .)

    step1While                     shift and go to state 117

state 93

    (93) cond_f -> FOR . asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (59) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    ID              shift and go to state 119

    asignacion                     shift and go to state 118
    idCall                         shift and go to state 87

state 94

    (44) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar . setDI LBRACE listaEstatutos RBRACE endF definFunc
    (47) setDI -> .

    LBRACE          reduce using rule 47 (setDI -> .)

    setDI                          shift and go to state 120

state 95

    (39) listaParam -> param COMMA listaParam .

    RPAREN          reduce using rule 39 (listaParam -> param COMMA listaParam .)


state 96

    (41) param -> tipo COLON ID .

    COMMA           reduce using rule 41 (param -> tipo COLON ID .)
    RPAREN          reduce using rule 41 (param -> tipo COLON ID .)


state 97

    (16) idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK LBRACK . CTE_I auxCTE2 RBRACK

    CTE_I           shift and go to state 121


state 98

    (15) idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK auxCTE .

    COMMA           reduce using rule 15 (idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK auxCTE .)
    SCOLON          reduce using rule 15 (idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK auxCTE .)


state 99

    (6) declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .

    VAR             reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    VOID            reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    INT             reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    FLOAT           reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    CHAR            reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)
    MAIN            reduce using rule 6 (declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases .)


state 100

    (32) declarMethods -> tipoMethod FUNC ID . LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods

    LPAREN          shift and go to state 122


state 101

    (10) declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes .

    METHODS         reduce using rule 10 (declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes .)


state 102

    (61) llamada -> ID DOT . ID LPAREN enviaParam RPAREN

    ID              shift and go to state 123


state 103

    (62) llamada -> ID verExist . LPAREN enviaParam coherenceGo RPAREN

    LPAREN          shift and go to state 124


state 104

    (21) idCall -> ID idCallaux .
    (22) idCall -> ID idCallaux . DOT ID
    (23) idCall -> ID idCallaux . LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> ID idCallaux . LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    ASIGNA          reduce using rule 21 (idCall -> ID idCallaux .)
    MULT            reduce using rule 21 (idCall -> ID idCallaux .)
    DIV             reduce using rule 21 (idCall -> ID idCallaux .)
    PLUS            reduce using rule 21 (idCall -> ID idCallaux .)
    MINUS           reduce using rule 21 (idCall -> ID idCallaux .)
    LT              reduce using rule 21 (idCall -> ID idCallaux .)
    GT              reduce using rule 21 (idCall -> ID idCallaux .)
    LTE             reduce using rule 21 (idCall -> ID idCallaux .)
    GTE             reduce using rule 21 (idCall -> ID idCallaux .)
    EQUALS          reduce using rule 21 (idCall -> ID idCallaux .)
    NEQUALS         reduce using rule 21 (idCall -> ID idCallaux .)
    AND             reduce using rule 21 (idCall -> ID idCallaux .)
    OR              reduce using rule 21 (idCall -> ID idCallaux .)
    RPAREN          reduce using rule 21 (idCall -> ID idCallaux .)
    COMMA           reduce using rule 21 (idCall -> ID idCallaux .)
    SCOLON          reduce using rule 21 (idCall -> ID idCallaux .)
    TO              reduce using rule 21 (idCall -> ID idCallaux .)
    DO              reduce using rule 21 (idCall -> ID idCallaux .)
    RBRACK          reduce using rule 21 (idCall -> ID idCallaux .)
    DOT             shift and go to state 125
    LBRACK          shift and go to state 126


state 105

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE . endProg prueba
    (5) endProg -> .

    $end            reduce using rule 5 (endProg -> .)

    endProg                        shift and go to state 127

state 106

    (49) listaEstatutos -> estatutos listaEstatutos .

    RBRACE          reduce using rule 49 (listaEstatutos -> estatutos listaEstatutos .)


state 107

    (51) estatutos -> llamada SCOLON .

    ID              reduce using rule 51 (estatutos -> llamada SCOLON .)
    RETURN          reduce using rule 51 (estatutos -> llamada SCOLON .)
    READ            reduce using rule 51 (estatutos -> llamada SCOLON .)
    WRITE           reduce using rule 51 (estatutos -> llamada SCOLON .)
    IF              reduce using rule 51 (estatutos -> llamada SCOLON .)
    WHILE           reduce using rule 51 (estatutos -> llamada SCOLON .)
    FOR             reduce using rule 51 (estatutos -> llamada SCOLON .)
    RBRACE          reduce using rule 51 (estatutos -> llamada SCOLON .)


state 108

    (52) estatutos -> asignacion SCOLON .

    ID              reduce using rule 52 (estatutos -> asignacion SCOLON .)
    RETURN          reduce using rule 52 (estatutos -> asignacion SCOLON .)
    READ            reduce using rule 52 (estatutos -> asignacion SCOLON .)
    WRITE           reduce using rule 52 (estatutos -> asignacion SCOLON .)
    IF              reduce using rule 52 (estatutos -> asignacion SCOLON .)
    WHILE           reduce using rule 52 (estatutos -> asignacion SCOLON .)
    FOR             reduce using rule 52 (estatutos -> asignacion SCOLON .)
    RBRACE          reduce using rule 52 (estatutos -> asignacion SCOLON .)


state 109

    (53) estatutos -> returnf SCOLON .

    ID              reduce using rule 53 (estatutos -> returnf SCOLON .)
    RETURN          reduce using rule 53 (estatutos -> returnf SCOLON .)
    READ            reduce using rule 53 (estatutos -> returnf SCOLON .)
    WRITE           reduce using rule 53 (estatutos -> returnf SCOLON .)
    IF              reduce using rule 53 (estatutos -> returnf SCOLON .)
    WHILE           reduce using rule 53 (estatutos -> returnf SCOLON .)
    FOR             reduce using rule 53 (estatutos -> returnf SCOLON .)
    RBRACE          reduce using rule 53 (estatutos -> returnf SCOLON .)


state 110

    (54) estatutos -> lectura SCOLON .

    ID              reduce using rule 54 (estatutos -> lectura SCOLON .)
    RETURN          reduce using rule 54 (estatutos -> lectura SCOLON .)
    READ            reduce using rule 54 (estatutos -> lectura SCOLON .)
    WRITE           reduce using rule 54 (estatutos -> lectura SCOLON .)
    IF              reduce using rule 54 (estatutos -> lectura SCOLON .)
    WHILE           reduce using rule 54 (estatutos -> lectura SCOLON .)
    FOR             reduce using rule 54 (estatutos -> lectura SCOLON .)
    RBRACE          reduce using rule 54 (estatutos -> lectura SCOLON .)


state 111

    (55) estatutos -> escritura SCOLON .

    ID              reduce using rule 55 (estatutos -> escritura SCOLON .)
    RETURN          reduce using rule 55 (estatutos -> escritura SCOLON .)
    READ            reduce using rule 55 (estatutos -> escritura SCOLON .)
    WRITE           reduce using rule 55 (estatutos -> escritura SCOLON .)
    IF              reduce using rule 55 (estatutos -> escritura SCOLON .)
    WHILE           reduce using rule 55 (estatutos -> escritura SCOLON .)
    FOR             reduce using rule 55 (estatutos -> escritura SCOLON .)
    RBRACE          reduce using rule 55 (estatutos -> escritura SCOLON .)


state 112

    (59) asignacion -> idCall ASIGNA . pushPoper exp asignStep2
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 128

state 113

    (71) returnf -> RETURN pushPoper . LPAREN exp RPAREN popReturn

    LPAREN          shift and go to state 129


state 114

    (73) lectura -> READ pushPoper . LPAREN listaId RPAREN

    LPAREN          shift and go to state 130


state 115

    (78) escritura -> WRITE pushPoper . LPAREN exp popIO lextra RPAREN
    (79) escritura -> WRITE pushPoper . LPAREN LETRERO letreroPush popIO lextra RPAREN

    LPAREN          shift and go to state 131


state 116

    (85) condicion -> IF LPAREN . exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> IF LPAREN . exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    exp                            shift and go to state 133
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 117

    (89) cond_w -> WHILE step1While . LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While

    LPAREN          shift and go to state 144


state 118

    (93) cond_f -> FOR asignacion . TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While

    TO              shift and go to state 145


state 119

    (21) idCall -> ID . idCallaux
    (22) idCall -> ID . idCallaux DOT ID
    (23) idCall -> ID . idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> ID . idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF
    (25) idCallaux -> .

    DOT             reduce using rule 25 (idCallaux -> .)
    LBRACK          reduce using rule 25 (idCallaux -> .)
    ASIGNA          reduce using rule 25 (idCallaux -> .)
    COMMA           reduce using rule 25 (idCallaux -> .)
    RPAREN          reduce using rule 25 (idCallaux -> .)

    idCallaux                      shift and go to state 104

state 120

    (44) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI . LBRACE listaEstatutos RBRACE endF definFunc

    LBRACE          shift and go to state 146


state 121

    (16) idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK LBRACK CTE_I . auxCTE2 RBRACK
    (20) auxCTE2 -> .

    RBRACK          reduce using rule 20 (auxCTE2 -> .)

    auxCTE2                        shift and go to state 147

state 122

    (32) declarMethods -> tipoMethod FUNC ID LPAREN . listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (38) listaParam -> . param
    (39) listaParam -> . param COMMA listaParam
    (40) listaParam -> . empty
    (41) param -> . tipo COLON ID
    (127) empty -> .
    (28) tipo -> . ID
    (29) tipo -> . INT
    (30) tipo -> . FLOAT
    (31) tipo -> . CHAR

    RPAREN          reduce using rule 127 (empty -> .)
    ID              shift and go to state 21
    INT             shift and go to state 22
    FLOAT           shift and go to state 23
    CHAR            shift and go to state 24

    listaParam                     shift and go to state 148
    param                          shift and go to state 59
    empty                          shift and go to state 60
    tipo                           shift and go to state 61

state 123

    (61) llamada -> ID DOT ID . LPAREN enviaParam RPAREN

    LPAREN          shift and go to state 149


state 124

    (62) llamada -> ID verExist LPAREN . enviaParam coherenceGo RPAREN
    (63) enviaParam -> . paramReferencia
    (64) enviaParam -> . empty
    (65) paramReferencia -> . exp paramType
    (66) paramReferencia -> . exp paramType COMMA paramCount paramReferencia
    (127) empty -> .
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    RPAREN          reduce using rule 127 (empty -> .)
    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    enviaParam                     shift and go to state 150
    paramReferencia                shift and go to state 151
    empty                          shift and go to state 152
    exp                            shift and go to state 153
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 125

    (22) idCall -> ID idCallaux DOT . ID

    ID              shift and go to state 154


state 126

    (23) idCall -> ID idCallaux LBRACK . addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> ID idCallaux LBRACK . addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF
    (124) addFF -> .

    LPAREN          reduce using rule 124 (addFF -> .)
    CTE_I           reduce using rule 124 (addFF -> .)
    CTE_F           reduce using rule 124 (addFF -> .)
    CTE_C           reduce using rule 124 (addFF -> .)
    ID              reduce using rule 124 (addFF -> .)

    addFF                          shift and go to state 155

state 127

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg . prueba
    (2) prueba -> .

    $end            reduce using rule 2 (prueba -> .)

    prueba                         shift and go to state 156

state 128

    (59) asignacion -> idCall ASIGNA pushPoper . exp asignStep2
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    idCall                         shift and go to state 143
    exp                            shift and go to state 157
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142

state 129

    (71) returnf -> RETURN pushPoper LPAREN . exp RPAREN popReturn
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    exp                            shift and go to state 158
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 130

    (73) lectura -> READ pushPoper LPAREN . listaId RPAREN
    (74) listaId -> . idCall popIO
    (75) listaId -> . idCall COMMA popIO insertOpRead listaId
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    ID              shift and go to state 119

    listaId                        shift and go to state 159
    idCall                         shift and go to state 160

state 131

    (78) escritura -> WRITE pushPoper LPAREN . exp popIO lextra RPAREN
    (79) escritura -> WRITE pushPoper LPAREN . LETRERO letreroPush popIO lextra RPAREN
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LETRERO         shift and go to state 162
    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    exp                            shift and go to state 161
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 132

    (112) f -> LPAREN . addFF exp RPAREN rmFF
    (124) addFF -> .

    LPAREN          reduce using rule 124 (addFF -> .)
    CTE_I           reduce using rule 124 (addFF -> .)
    CTE_F           reduce using rule 124 (addFF -> .)
    CTE_C           reduce using rule 124 (addFF -> .)
    ID              reduce using rule 124 (addFF -> .)

    addFF                          shift and go to state 163

state 133

    (85) condicion -> IF LPAREN exp . RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> IF LPAREN exp . RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    RPAREN          shift and go to state 164


state 134

    (95) exp -> texp . step7
    (96) exp -> texp . step7 OR pushPoper exp
    (123) step7 -> .

    OR              reduce using rule 123 (step7 -> .)
    RPAREN          reduce using rule 123 (step7 -> .)
    COMMA           reduce using rule 123 (step7 -> .)
    SCOLON          reduce using rule 123 (step7 -> .)
    TO              reduce using rule 123 (step7 -> .)
    DO              reduce using rule 123 (step7 -> .)
    RBRACK          reduce using rule 123 (step7 -> .)

    step7                          shift and go to state 165

state 135

    (97) texp -> gexp . step6
    (98) texp -> gexp . step6 AND pushPoper texp
    (122) step6 -> .

    AND             reduce using rule 122 (step6 -> .)
    OR              reduce using rule 122 (step6 -> .)
    RPAREN          reduce using rule 122 (step6 -> .)
    COMMA           reduce using rule 122 (step6 -> .)
    SCOLON          reduce using rule 122 (step6 -> .)
    TO              reduce using rule 122 (step6 -> .)
    DO              reduce using rule 122 (step6 -> .)
    RBRACK          reduce using rule 122 (step6 -> .)

    step6                          shift and go to state 166

state 136

    (99) gexp -> mexp . step5
    (100) gexp -> mexp . step5 LT pushPoper gexp
    (101) gexp -> mexp . step5 GT pushPoper gexp
    (102) gexp -> mexp . step5 LTE pushPoper gexp
    (103) gexp -> mexp . step5 GTE pushPoper gexp
    (104) gexp -> mexp . step5 EQUALS pushPoper gexp
    (105) gexp -> mexp . step5 NEQUALS pushPoper gexp
    (121) step5 -> .

    LT              reduce using rule 121 (step5 -> .)
    GT              reduce using rule 121 (step5 -> .)
    LTE             reduce using rule 121 (step5 -> .)
    GTE             reduce using rule 121 (step5 -> .)
    EQUALS          reduce using rule 121 (step5 -> .)
    NEQUALS         reduce using rule 121 (step5 -> .)
    AND             reduce using rule 121 (step5 -> .)
    OR              reduce using rule 121 (step5 -> .)
    RPAREN          reduce using rule 121 (step5 -> .)
    COMMA           reduce using rule 121 (step5 -> .)
    SCOLON          reduce using rule 121 (step5 -> .)
    TO              reduce using rule 121 (step5 -> .)
    DO              reduce using rule 121 (step5 -> .)
    RBRACK          reduce using rule 121 (step5 -> .)

    step5                          shift and go to state 167

state 137

    (106) mexp -> t . step4
    (107) mexp -> t . step4 PLUS pushPoper mexp
    (108) mexp -> t . step4 MINUS pushPoper mexp
    (120) step4 -> .

    PLUS            reduce using rule 120 (step4 -> .)
    MINUS           reduce using rule 120 (step4 -> .)
    LT              reduce using rule 120 (step4 -> .)
    GT              reduce using rule 120 (step4 -> .)
    LTE             reduce using rule 120 (step4 -> .)
    GTE             reduce using rule 120 (step4 -> .)
    EQUALS          reduce using rule 120 (step4 -> .)
    NEQUALS         reduce using rule 120 (step4 -> .)
    AND             reduce using rule 120 (step4 -> .)
    OR              reduce using rule 120 (step4 -> .)
    RPAREN          reduce using rule 120 (step4 -> .)
    COMMA           reduce using rule 120 (step4 -> .)
    SCOLON          reduce using rule 120 (step4 -> .)
    TO              reduce using rule 120 (step4 -> .)
    DO              reduce using rule 120 (step4 -> .)
    RBRACK          reduce using rule 120 (step4 -> .)

    step4                          shift and go to state 168

state 138

    (109) t -> f . step3
    (110) t -> f . step3 MULT pushPoper t
    (111) t -> f . step3 DIV pushPoper t
    (119) step3 -> .

    MULT            reduce using rule 119 (step3 -> .)
    DIV             reduce using rule 119 (step3 -> .)
    PLUS            reduce using rule 119 (step3 -> .)
    MINUS           reduce using rule 119 (step3 -> .)
    LT              reduce using rule 119 (step3 -> .)
    GT              reduce using rule 119 (step3 -> .)
    LTE             reduce using rule 119 (step3 -> .)
    GTE             reduce using rule 119 (step3 -> .)
    EQUALS          reduce using rule 119 (step3 -> .)
    NEQUALS         reduce using rule 119 (step3 -> .)
    AND             reduce using rule 119 (step3 -> .)
    OR              reduce using rule 119 (step3 -> .)
    RPAREN          reduce using rule 119 (step3 -> .)
    COMMA           reduce using rule 119 (step3 -> .)
    SCOLON          reduce using rule 119 (step3 -> .)
    TO              reduce using rule 119 (step3 -> .)
    DO              reduce using rule 119 (step3 -> .)
    RBRACK          reduce using rule 119 (step3 -> .)

    step3                          shift and go to state 169

state 139

    (113) f -> CTE_I . step1
    (118) step1 -> .

    MULT            reduce using rule 118 (step1 -> .)
    DIV             reduce using rule 118 (step1 -> .)
    PLUS            reduce using rule 118 (step1 -> .)
    MINUS           reduce using rule 118 (step1 -> .)
    LT              reduce using rule 118 (step1 -> .)
    GT              reduce using rule 118 (step1 -> .)
    LTE             reduce using rule 118 (step1 -> .)
    GTE             reduce using rule 118 (step1 -> .)
    EQUALS          reduce using rule 118 (step1 -> .)
    NEQUALS         reduce using rule 118 (step1 -> .)
    AND             reduce using rule 118 (step1 -> .)
    OR              reduce using rule 118 (step1 -> .)
    RPAREN          reduce using rule 118 (step1 -> .)
    COMMA           reduce using rule 118 (step1 -> .)
    SCOLON          reduce using rule 118 (step1 -> .)
    TO              reduce using rule 118 (step1 -> .)
    DO              reduce using rule 118 (step1 -> .)
    RBRACK          reduce using rule 118 (step1 -> .)

    step1                          shift and go to state 170

state 140

    (114) f -> CTE_F . step1
    (118) step1 -> .

    MULT            reduce using rule 118 (step1 -> .)
    DIV             reduce using rule 118 (step1 -> .)
    PLUS            reduce using rule 118 (step1 -> .)
    MINUS           reduce using rule 118 (step1 -> .)
    LT              reduce using rule 118 (step1 -> .)
    GT              reduce using rule 118 (step1 -> .)
    LTE             reduce using rule 118 (step1 -> .)
    GTE             reduce using rule 118 (step1 -> .)
    EQUALS          reduce using rule 118 (step1 -> .)
    NEQUALS         reduce using rule 118 (step1 -> .)
    AND             reduce using rule 118 (step1 -> .)
    OR              reduce using rule 118 (step1 -> .)
    RPAREN          reduce using rule 118 (step1 -> .)
    COMMA           reduce using rule 118 (step1 -> .)
    SCOLON          reduce using rule 118 (step1 -> .)
    TO              reduce using rule 118 (step1 -> .)
    DO              reduce using rule 118 (step1 -> .)
    RBRACK          reduce using rule 118 (step1 -> .)

    step1                          shift and go to state 171

state 141

    (115) f -> CTE_C . step1
    (118) step1 -> .

    MULT            reduce using rule 118 (step1 -> .)
    DIV             reduce using rule 118 (step1 -> .)
    PLUS            reduce using rule 118 (step1 -> .)
    MINUS           reduce using rule 118 (step1 -> .)
    LT              reduce using rule 118 (step1 -> .)
    GT              reduce using rule 118 (step1 -> .)
    LTE             reduce using rule 118 (step1 -> .)
    GTE             reduce using rule 118 (step1 -> .)
    EQUALS          reduce using rule 118 (step1 -> .)
    NEQUALS         reduce using rule 118 (step1 -> .)
    AND             reduce using rule 118 (step1 -> .)
    OR              reduce using rule 118 (step1 -> .)
    RPAREN          reduce using rule 118 (step1 -> .)
    COMMA           reduce using rule 118 (step1 -> .)
    SCOLON          reduce using rule 118 (step1 -> .)
    TO              reduce using rule 118 (step1 -> .)
    DO              reduce using rule 118 (step1 -> .)
    RBRACK          reduce using rule 118 (step1 -> .)

    step1                          shift and go to state 172

state 142

    (116) f -> llamada .

    MULT            reduce using rule 116 (f -> llamada .)
    DIV             reduce using rule 116 (f -> llamada .)
    PLUS            reduce using rule 116 (f -> llamada .)
    MINUS           reduce using rule 116 (f -> llamada .)
    LT              reduce using rule 116 (f -> llamada .)
    GT              reduce using rule 116 (f -> llamada .)
    LTE             reduce using rule 116 (f -> llamada .)
    GTE             reduce using rule 116 (f -> llamada .)
    EQUALS          reduce using rule 116 (f -> llamada .)
    NEQUALS         reduce using rule 116 (f -> llamada .)
    AND             reduce using rule 116 (f -> llamada .)
    OR              reduce using rule 116 (f -> llamada .)
    RPAREN          reduce using rule 116 (f -> llamada .)
    COMMA           reduce using rule 116 (f -> llamada .)
    SCOLON          reduce using rule 116 (f -> llamada .)
    TO              reduce using rule 116 (f -> llamada .)
    DO              reduce using rule 116 (f -> llamada .)
    RBRACK          reduce using rule 116 (f -> llamada .)


state 143

    (117) f -> idCall .

    MULT            reduce using rule 117 (f -> idCall .)
    DIV             reduce using rule 117 (f -> idCall .)
    PLUS            reduce using rule 117 (f -> idCall .)
    MINUS           reduce using rule 117 (f -> idCall .)
    LT              reduce using rule 117 (f -> idCall .)
    GT              reduce using rule 117 (f -> idCall .)
    LTE             reduce using rule 117 (f -> idCall .)
    GTE             reduce using rule 117 (f -> idCall .)
    EQUALS          reduce using rule 117 (f -> idCall .)
    NEQUALS         reduce using rule 117 (f -> idCall .)
    AND             reduce using rule 117 (f -> idCall .)
    OR              reduce using rule 117 (f -> idCall .)
    RPAREN          reduce using rule 117 (f -> idCall .)
    COMMA           reduce using rule 117 (f -> idCall .)
    SCOLON          reduce using rule 117 (f -> idCall .)
    TO              reduce using rule 117 (f -> idCall .)
    DO              reduce using rule 117 (f -> idCall .)
    RBRACK          reduce using rule 117 (f -> idCall .)


state 144

    (89) cond_w -> WHILE step1While LPAREN . exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    exp                            shift and go to state 173
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 145

    (93) cond_f -> FOR asignacion TO . exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    exp                            shift and go to state 174
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 146

    (44) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE . listaEstatutos RBRACE endF definFunc
    (49) listaEstatutos -> . estatutos listaEstatutos
    (50) listaEstatutos -> . empty
    (51) estatutos -> . llamada SCOLON
    (52) estatutos -> . asignacion SCOLON
    (53) estatutos -> . returnf SCOLON
    (54) estatutos -> . lectura SCOLON
    (55) estatutos -> . escritura SCOLON
    (56) estatutos -> . condicion
    (57) estatutos -> . cond_w
    (58) estatutos -> . cond_f
    (127) empty -> .
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (59) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (71) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (73) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (78) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (79) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (85) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (89) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (93) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    RBRACE          reduce using rule 127 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 175
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 147

    (16) idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK LBRACK CTE_I auxCTE2 . RBRACK

    RBRACK          shift and go to state 176


state 148

    (32) declarMethods -> tipoMethod FUNC ID LPAREN listaParam . RPAREN LBRACE listaEstatutos RBRACE declarMethods

    RPAREN          shift and go to state 177


state 149

    (61) llamada -> ID DOT ID LPAREN . enviaParam RPAREN
    (63) enviaParam -> . paramReferencia
    (64) enviaParam -> . empty
    (65) paramReferencia -> . exp paramType
    (66) paramReferencia -> . exp paramType COMMA paramCount paramReferencia
    (127) empty -> .
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    RPAREN          reduce using rule 127 (empty -> .)
    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    enviaParam                     shift and go to state 178
    paramReferencia                shift and go to state 151
    empty                          shift and go to state 152
    exp                            shift and go to state 153
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 150

    (62) llamada -> ID verExist LPAREN enviaParam . coherenceGo RPAREN
    (70) coherenceGo -> .

    RPAREN          reduce using rule 70 (coherenceGo -> .)

    coherenceGo                    shift and go to state 179

state 151

    (63) enviaParam -> paramReferencia .

    RPAREN          reduce using rule 63 (enviaParam -> paramReferencia .)


state 152

    (64) enviaParam -> empty .

    RPAREN          reduce using rule 64 (enviaParam -> empty .)


state 153

    (65) paramReferencia -> exp . paramType
    (66) paramReferencia -> exp . paramType COMMA paramCount paramReferencia
    (68) paramType -> .

    COMMA           reduce using rule 68 (paramType -> .)
    RPAREN          reduce using rule 68 (paramType -> .)

    paramType                      shift and go to state 180

state 154

    (22) idCall -> ID idCallaux DOT ID .

    ASIGNA          reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    MULT            reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    DIV             reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    PLUS            reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    MINUS           reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    LT              reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    GT              reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    LTE             reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    GTE             reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    EQUALS          reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    NEQUALS         reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    AND             reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    OR              reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    RPAREN          reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    COMMA           reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    SCOLON          reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    TO              reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    DO              reduce using rule 22 (idCall -> ID idCallaux DOT ID .)
    RBRACK          reduce using rule 22 (idCall -> ID idCallaux DOT ID .)


state 155

    (23) idCall -> ID idCallaux LBRACK addFF . exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> ID idCallaux LBRACK addFF . exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    exp                            shift and go to state 181
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 156

    (1) program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba .

    $end            reduce using rule 1 (program -> PROGRAM ID initProg SCOLON declarClases declarVar definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba .)


state 157

    (59) asignacion -> idCall ASIGNA pushPoper exp . asignStep2
    (60) asignStep2 -> .

    SCOLON          reduce using rule 60 (asignStep2 -> .)
    TO              reduce using rule 60 (asignStep2 -> .)

    asignStep2                     shift and go to state 182

state 158

    (71) returnf -> RETURN pushPoper LPAREN exp . RPAREN popReturn

    RPAREN          shift and go to state 183


state 159

    (73) lectura -> READ pushPoper LPAREN listaId . RPAREN

    RPAREN          shift and go to state 184


state 160

    (74) listaId -> idCall . popIO
    (75) listaId -> idCall . COMMA popIO insertOpRead listaId
    (77) popIO -> .

    COMMA           shift and go to state 186
    RPAREN          reduce using rule 77 (popIO -> .)

    popIO                          shift and go to state 185

state 161

    (78) escritura -> WRITE pushPoper LPAREN exp . popIO lextra RPAREN
    (77) popIO -> .

    COMMA           reduce using rule 77 (popIO -> .)
    RPAREN          reduce using rule 77 (popIO -> .)

    popIO                          shift and go to state 187

state 162

    (79) escritura -> WRITE pushPoper LPAREN LETRERO . letreroPush popIO lextra RPAREN
    (84) letreroPush -> .

    COMMA           reduce using rule 84 (letreroPush -> .)
    RPAREN          reduce using rule 84 (letreroPush -> .)

    letreroPush                    shift and go to state 188

state 163

    (112) f -> LPAREN addFF . exp RPAREN rmFF
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    exp                            shift and go to state 189
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 164

    (85) condicion -> IF LPAREN exp RPAREN . cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> IF LPAREN exp RPAREN . cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (87) cond1 -> .

    THEN            reduce using rule 87 (cond1 -> .)

    cond1                          shift and go to state 190

state 165

    (95) exp -> texp step7 .
    (96) exp -> texp step7 . OR pushPoper exp

    RPAREN          reduce using rule 95 (exp -> texp step7 .)
    COMMA           reduce using rule 95 (exp -> texp step7 .)
    SCOLON          reduce using rule 95 (exp -> texp step7 .)
    TO              reduce using rule 95 (exp -> texp step7 .)
    DO              reduce using rule 95 (exp -> texp step7 .)
    RBRACK          reduce using rule 95 (exp -> texp step7 .)
    OR              shift and go to state 191


state 166

    (97) texp -> gexp step6 .
    (98) texp -> gexp step6 . AND pushPoper texp

    OR              reduce using rule 97 (texp -> gexp step6 .)
    RPAREN          reduce using rule 97 (texp -> gexp step6 .)
    COMMA           reduce using rule 97 (texp -> gexp step6 .)
    SCOLON          reduce using rule 97 (texp -> gexp step6 .)
    TO              reduce using rule 97 (texp -> gexp step6 .)
    DO              reduce using rule 97 (texp -> gexp step6 .)
    RBRACK          reduce using rule 97 (texp -> gexp step6 .)
    AND             shift and go to state 192


state 167

    (99) gexp -> mexp step5 .
    (100) gexp -> mexp step5 . LT pushPoper gexp
    (101) gexp -> mexp step5 . GT pushPoper gexp
    (102) gexp -> mexp step5 . LTE pushPoper gexp
    (103) gexp -> mexp step5 . GTE pushPoper gexp
    (104) gexp -> mexp step5 . EQUALS pushPoper gexp
    (105) gexp -> mexp step5 . NEQUALS pushPoper gexp

    AND             reduce using rule 99 (gexp -> mexp step5 .)
    OR              reduce using rule 99 (gexp -> mexp step5 .)
    RPAREN          reduce using rule 99 (gexp -> mexp step5 .)
    COMMA           reduce using rule 99 (gexp -> mexp step5 .)
    SCOLON          reduce using rule 99 (gexp -> mexp step5 .)
    TO              reduce using rule 99 (gexp -> mexp step5 .)
    DO              reduce using rule 99 (gexp -> mexp step5 .)
    RBRACK          reduce using rule 99 (gexp -> mexp step5 .)
    LT              shift and go to state 193
    GT              shift and go to state 194
    LTE             shift and go to state 195
    GTE             shift and go to state 196
    EQUALS          shift and go to state 197
    NEQUALS         shift and go to state 198


state 168

    (106) mexp -> t step4 .
    (107) mexp -> t step4 . PLUS pushPoper mexp
    (108) mexp -> t step4 . MINUS pushPoper mexp

    LT              reduce using rule 106 (mexp -> t step4 .)
    GT              reduce using rule 106 (mexp -> t step4 .)
    LTE             reduce using rule 106 (mexp -> t step4 .)
    GTE             reduce using rule 106 (mexp -> t step4 .)
    EQUALS          reduce using rule 106 (mexp -> t step4 .)
    NEQUALS         reduce using rule 106 (mexp -> t step4 .)
    AND             reduce using rule 106 (mexp -> t step4 .)
    OR              reduce using rule 106 (mexp -> t step4 .)
    RPAREN          reduce using rule 106 (mexp -> t step4 .)
    COMMA           reduce using rule 106 (mexp -> t step4 .)
    SCOLON          reduce using rule 106 (mexp -> t step4 .)
    TO              reduce using rule 106 (mexp -> t step4 .)
    DO              reduce using rule 106 (mexp -> t step4 .)
    RBRACK          reduce using rule 106 (mexp -> t step4 .)
    PLUS            shift and go to state 199
    MINUS           shift and go to state 200


state 169

    (109) t -> f step3 .
    (110) t -> f step3 . MULT pushPoper t
    (111) t -> f step3 . DIV pushPoper t

    PLUS            reduce using rule 109 (t -> f step3 .)
    MINUS           reduce using rule 109 (t -> f step3 .)
    LT              reduce using rule 109 (t -> f step3 .)
    GT              reduce using rule 109 (t -> f step3 .)
    LTE             reduce using rule 109 (t -> f step3 .)
    GTE             reduce using rule 109 (t -> f step3 .)
    EQUALS          reduce using rule 109 (t -> f step3 .)
    NEQUALS         reduce using rule 109 (t -> f step3 .)
    AND             reduce using rule 109 (t -> f step3 .)
    OR              reduce using rule 109 (t -> f step3 .)
    RPAREN          reduce using rule 109 (t -> f step3 .)
    COMMA           reduce using rule 109 (t -> f step3 .)
    SCOLON          reduce using rule 109 (t -> f step3 .)
    TO              reduce using rule 109 (t -> f step3 .)
    DO              reduce using rule 109 (t -> f step3 .)
    RBRACK          reduce using rule 109 (t -> f step3 .)
    MULT            shift and go to state 201
    DIV             shift and go to state 202


state 170

    (113) f -> CTE_I step1 .

    MULT            reduce using rule 113 (f -> CTE_I step1 .)
    DIV             reduce using rule 113 (f -> CTE_I step1 .)
    PLUS            reduce using rule 113 (f -> CTE_I step1 .)
    MINUS           reduce using rule 113 (f -> CTE_I step1 .)
    LT              reduce using rule 113 (f -> CTE_I step1 .)
    GT              reduce using rule 113 (f -> CTE_I step1 .)
    LTE             reduce using rule 113 (f -> CTE_I step1 .)
    GTE             reduce using rule 113 (f -> CTE_I step1 .)
    EQUALS          reduce using rule 113 (f -> CTE_I step1 .)
    NEQUALS         reduce using rule 113 (f -> CTE_I step1 .)
    AND             reduce using rule 113 (f -> CTE_I step1 .)
    OR              reduce using rule 113 (f -> CTE_I step1 .)
    RPAREN          reduce using rule 113 (f -> CTE_I step1 .)
    COMMA           reduce using rule 113 (f -> CTE_I step1 .)
    SCOLON          reduce using rule 113 (f -> CTE_I step1 .)
    TO              reduce using rule 113 (f -> CTE_I step1 .)
    DO              reduce using rule 113 (f -> CTE_I step1 .)
    RBRACK          reduce using rule 113 (f -> CTE_I step1 .)


state 171

    (114) f -> CTE_F step1 .

    MULT            reduce using rule 114 (f -> CTE_F step1 .)
    DIV             reduce using rule 114 (f -> CTE_F step1 .)
    PLUS            reduce using rule 114 (f -> CTE_F step1 .)
    MINUS           reduce using rule 114 (f -> CTE_F step1 .)
    LT              reduce using rule 114 (f -> CTE_F step1 .)
    GT              reduce using rule 114 (f -> CTE_F step1 .)
    LTE             reduce using rule 114 (f -> CTE_F step1 .)
    GTE             reduce using rule 114 (f -> CTE_F step1 .)
    EQUALS          reduce using rule 114 (f -> CTE_F step1 .)
    NEQUALS         reduce using rule 114 (f -> CTE_F step1 .)
    AND             reduce using rule 114 (f -> CTE_F step1 .)
    OR              reduce using rule 114 (f -> CTE_F step1 .)
    RPAREN          reduce using rule 114 (f -> CTE_F step1 .)
    COMMA           reduce using rule 114 (f -> CTE_F step1 .)
    SCOLON          reduce using rule 114 (f -> CTE_F step1 .)
    TO              reduce using rule 114 (f -> CTE_F step1 .)
    DO              reduce using rule 114 (f -> CTE_F step1 .)
    RBRACK          reduce using rule 114 (f -> CTE_F step1 .)


state 172

    (115) f -> CTE_C step1 .

    MULT            reduce using rule 115 (f -> CTE_C step1 .)
    DIV             reduce using rule 115 (f -> CTE_C step1 .)
    PLUS            reduce using rule 115 (f -> CTE_C step1 .)
    MINUS           reduce using rule 115 (f -> CTE_C step1 .)
    LT              reduce using rule 115 (f -> CTE_C step1 .)
    GT              reduce using rule 115 (f -> CTE_C step1 .)
    LTE             reduce using rule 115 (f -> CTE_C step1 .)
    GTE             reduce using rule 115 (f -> CTE_C step1 .)
    EQUALS          reduce using rule 115 (f -> CTE_C step1 .)
    NEQUALS         reduce using rule 115 (f -> CTE_C step1 .)
    AND             reduce using rule 115 (f -> CTE_C step1 .)
    OR              reduce using rule 115 (f -> CTE_C step1 .)
    RPAREN          reduce using rule 115 (f -> CTE_C step1 .)
    COMMA           reduce using rule 115 (f -> CTE_C step1 .)
    SCOLON          reduce using rule 115 (f -> CTE_C step1 .)
    TO              reduce using rule 115 (f -> CTE_C step1 .)
    DO              reduce using rule 115 (f -> CTE_C step1 .)
    RBRACK          reduce using rule 115 (f -> CTE_C step1 .)


state 173

    (89) cond_w -> WHILE step1While LPAREN exp . RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While

    RPAREN          shift and go to state 203


state 174

    (93) cond_f -> FOR asignacion TO exp . step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (90) step1While -> .

    DO              reduce using rule 90 (step1While -> .)

    step1While                     shift and go to state 204

state 175

    (44) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos . RBRACE endF definFunc

    RBRACE          shift and go to state 205


state 176

    (16) idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK LBRACK CTE_I auxCTE2 RBRACK .

    COMMA           reduce using rule 16 (idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK LBRACK CTE_I auxCTE2 RBRACK .)
    SCOLON          reduce using rule 16 (idDeclare -> ID auxDeclare LBRACK CTE_I RBRACK LBRACK CTE_I auxCTE2 RBRACK .)


state 177

    (32) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN . LBRACE listaEstatutos RBRACE declarMethods

    LBRACE          shift and go to state 206


state 178

    (61) llamada -> ID DOT ID LPAREN enviaParam . RPAREN

    RPAREN          shift and go to state 207


state 179

    (62) llamada -> ID verExist LPAREN enviaParam coherenceGo . RPAREN

    RPAREN          shift and go to state 208


state 180

    (65) paramReferencia -> exp paramType .
    (66) paramReferencia -> exp paramType . COMMA paramCount paramReferencia

    RPAREN          reduce using rule 65 (paramReferencia -> exp paramType .)
    COMMA           shift and go to state 209


state 181

    (23) idCall -> ID idCallaux LBRACK addFF exp . idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> ID idCallaux LBRACK addFF exp . idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF
    (26) idCallaux2 -> .

    RBRACK          reduce using rule 26 (idCallaux2 -> .)

    idCallaux2                     shift and go to state 210

state 182

    (59) asignacion -> idCall ASIGNA pushPoper exp asignStep2 .

    SCOLON          reduce using rule 59 (asignacion -> idCall ASIGNA pushPoper exp asignStep2 .)
    TO              reduce using rule 59 (asignacion -> idCall ASIGNA pushPoper exp asignStep2 .)


state 183

    (71) returnf -> RETURN pushPoper LPAREN exp RPAREN . popReturn
    (72) popReturn -> .

    SCOLON          reduce using rule 72 (popReturn -> .)

    popReturn                      shift and go to state 211

state 184

    (73) lectura -> READ pushPoper LPAREN listaId RPAREN .

    SCOLON          reduce using rule 73 (lectura -> READ pushPoper LPAREN listaId RPAREN .)


state 185

    (74) listaId -> idCall popIO .

    RPAREN          reduce using rule 74 (listaId -> idCall popIO .)


state 186

    (75) listaId -> idCall COMMA . popIO insertOpRead listaId
    (77) popIO -> .

    ID              reduce using rule 77 (popIO -> .)

    popIO                          shift and go to state 212

state 187

    (78) escritura -> WRITE pushPoper LPAREN exp popIO . lextra RPAREN
    (80) lextra -> . COMMA insertOpWrite exp popIO lextra
    (81) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (82) lextra -> . empty
    (127) empty -> .

    COMMA           shift and go to state 214
    RPAREN          reduce using rule 127 (empty -> .)

    lextra                         shift and go to state 213
    empty                          shift and go to state 215

state 188

    (79) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush . popIO lextra RPAREN
    (77) popIO -> .

    COMMA           reduce using rule 77 (popIO -> .)
    RPAREN          reduce using rule 77 (popIO -> .)

    popIO                          shift and go to state 216

state 189

    (112) f -> LPAREN addFF exp . RPAREN rmFF

    RPAREN          shift and go to state 217


state 190

    (85) condicion -> IF LPAREN exp RPAREN cond1 . THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> IF LPAREN exp RPAREN cond1 . THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    THEN            shift and go to state 218


state 191

    (96) exp -> texp step7 OR . pushPoper exp
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 219

state 192

    (98) texp -> gexp step6 AND . pushPoper texp
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 220

state 193

    (100) gexp -> mexp step5 LT . pushPoper gexp
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 221

state 194

    (101) gexp -> mexp step5 GT . pushPoper gexp
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 222

state 195

    (102) gexp -> mexp step5 LTE . pushPoper gexp
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 223

state 196

    (103) gexp -> mexp step5 GTE . pushPoper gexp
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 224

state 197

    (104) gexp -> mexp step5 EQUALS . pushPoper gexp
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 225

state 198

    (105) gexp -> mexp step5 NEQUALS . pushPoper gexp
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 226

state 199

    (107) mexp -> t step4 PLUS . pushPoper mexp
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 227

state 200

    (108) mexp -> t step4 MINUS . pushPoper mexp
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 228

state 201

    (110) t -> f step3 MULT . pushPoper t
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 229

state 202

    (111) t -> f step3 DIV . pushPoper t
    (126) pushPoper -> .

    LPAREN          reduce using rule 126 (pushPoper -> .)
    CTE_I           reduce using rule 126 (pushPoper -> .)
    CTE_F           reduce using rule 126 (pushPoper -> .)
    CTE_C           reduce using rule 126 (pushPoper -> .)
    ID              reduce using rule 126 (pushPoper -> .)

    pushPoper                      shift and go to state 230

state 203

    (89) cond_w -> WHILE step1While LPAREN exp RPAREN . step2While DO LBRACE listaEstatutos RBRACE step3While
    (91) step2While -> .

    DO              reduce using rule 91 (step2While -> .)

    step2While                     shift and go to state 231

state 204

    (93) cond_f -> FOR asignacion TO exp step1While . step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (94) step1For -> .

    DO              reduce using rule 94 (step1For -> .)

    step1For                       shift and go to state 232

state 205

    (44) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE . endF definFunc
    (48) endF -> .

    VOID            reduce using rule 48 (endF -> .)
    INT             reduce using rule 48 (endF -> .)
    FLOAT           reduce using rule 48 (endF -> .)
    CHAR            reduce using rule 48 (endF -> .)
    MAIN            reduce using rule 48 (endF -> .)

    endF                           shift and go to state 233

state 206

    (32) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE . listaEstatutos RBRACE declarMethods
    (49) listaEstatutos -> . estatutos listaEstatutos
    (50) listaEstatutos -> . empty
    (51) estatutos -> . llamada SCOLON
    (52) estatutos -> . asignacion SCOLON
    (53) estatutos -> . returnf SCOLON
    (54) estatutos -> . lectura SCOLON
    (55) estatutos -> . escritura SCOLON
    (56) estatutos -> . condicion
    (57) estatutos -> . cond_w
    (58) estatutos -> . cond_f
    (127) empty -> .
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (59) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (71) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (73) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (78) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (79) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (85) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (89) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (93) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    RBRACE          reduce using rule 127 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 234
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 207

    (61) llamada -> ID DOT ID LPAREN enviaParam RPAREN .

    SCOLON          reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    MULT            reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    DIV             reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    PLUS            reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    MINUS           reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    LT              reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    GT              reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    LTE             reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    GTE             reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    EQUALS          reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    NEQUALS         reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    AND             reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    OR              reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    RPAREN          reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    COMMA           reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    TO              reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    DO              reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)
    RBRACK          reduce using rule 61 (llamada -> ID DOT ID LPAREN enviaParam RPAREN .)


state 208

    (62) llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .

    SCOLON          reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    MULT            reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    DIV             reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    PLUS            reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    MINUS           reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    LT              reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    GT              reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    LTE             reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    GTE             reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    EQUALS          reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    NEQUALS         reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    AND             reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    OR              reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    RPAREN          reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    COMMA           reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    TO              reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    DO              reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)
    RBRACK          reduce using rule 62 (llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN .)


state 209

    (66) paramReferencia -> exp paramType COMMA . paramCount paramReferencia
    (69) paramCount -> .

    LPAREN          reduce using rule 69 (paramCount -> .)
    CTE_I           reduce using rule 69 (paramCount -> .)
    CTE_F           reduce using rule 69 (paramCount -> .)
    CTE_C           reduce using rule 69 (paramCount -> .)
    ID              reduce using rule 69 (paramCount -> .)

    paramCount                     shift and go to state 235

state 210

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 . RBRACK rmFF SCOLON
    (24) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 . RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    RBRACK          shift and go to state 236


state 211

    (71) returnf -> RETURN pushPoper LPAREN exp RPAREN popReturn .

    SCOLON          reduce using rule 71 (returnf -> RETURN pushPoper LPAREN exp RPAREN popReturn .)


state 212

    (75) listaId -> idCall COMMA popIO . insertOpRead listaId
    (76) insertOpRead -> .

    ID              reduce using rule 76 (insertOpRead -> .)

    insertOpRead                   shift and go to state 237

state 213

    (78) escritura -> WRITE pushPoper LPAREN exp popIO lextra . RPAREN

    RPAREN          shift and go to state 238


state 214

    (80) lextra -> COMMA . insertOpWrite exp popIO lextra
    (81) lextra -> COMMA . insertOpWrite LETRERO letreroPush popIO lextra
    (83) insertOpWrite -> .

    LETRERO         reduce using rule 83 (insertOpWrite -> .)
    LPAREN          reduce using rule 83 (insertOpWrite -> .)
    CTE_I           reduce using rule 83 (insertOpWrite -> .)
    CTE_F           reduce using rule 83 (insertOpWrite -> .)
    CTE_C           reduce using rule 83 (insertOpWrite -> .)
    ID              reduce using rule 83 (insertOpWrite -> .)

    insertOpWrite                  shift and go to state 239

state 215

    (82) lextra -> empty .

    RPAREN          reduce using rule 82 (lextra -> empty .)


state 216

    (79) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO . lextra RPAREN
    (80) lextra -> . COMMA insertOpWrite exp popIO lextra
    (81) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (82) lextra -> . empty
    (127) empty -> .

    COMMA           shift and go to state 214
    RPAREN          reduce using rule 127 (empty -> .)

    lextra                         shift and go to state 240
    empty                          shift and go to state 215

state 217

    (112) f -> LPAREN addFF exp RPAREN . rmFF
    (125) rmFF -> .

    MULT            reduce using rule 125 (rmFF -> .)
    DIV             reduce using rule 125 (rmFF -> .)
    PLUS            reduce using rule 125 (rmFF -> .)
    MINUS           reduce using rule 125 (rmFF -> .)
    LT              reduce using rule 125 (rmFF -> .)
    GT              reduce using rule 125 (rmFF -> .)
    LTE             reduce using rule 125 (rmFF -> .)
    GTE             reduce using rule 125 (rmFF -> .)
    EQUALS          reduce using rule 125 (rmFF -> .)
    NEQUALS         reduce using rule 125 (rmFF -> .)
    AND             reduce using rule 125 (rmFF -> .)
    OR              reduce using rule 125 (rmFF -> .)
    RPAREN          reduce using rule 125 (rmFF -> .)
    COMMA           reduce using rule 125 (rmFF -> .)
    SCOLON          reduce using rule 125 (rmFF -> .)
    TO              reduce using rule 125 (rmFF -> .)
    DO              reduce using rule 125 (rmFF -> .)
    RBRACK          reduce using rule 125 (rmFF -> .)

    rmFF                           shift and go to state 241

state 218

    (85) condicion -> IF LPAREN exp RPAREN cond1 THEN . LBRACE listaEstatutos RBRACE
    (86) condicion -> IF LPAREN exp RPAREN cond1 THEN . LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 242


state 219

    (96) exp -> texp step7 OR pushPoper . exp
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    texp                           shift and go to state 134
    exp                            shift and go to state 243
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 220

    (98) texp -> gexp step6 AND pushPoper . texp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    gexp                           shift and go to state 135
    texp                           shift and go to state 244
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 221

    (100) gexp -> mexp step5 LT pushPoper . gexp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    mexp                           shift and go to state 136
    gexp                           shift and go to state 245
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 222

    (101) gexp -> mexp step5 GT pushPoper . gexp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    mexp                           shift and go to state 136
    gexp                           shift and go to state 246
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 223

    (102) gexp -> mexp step5 LTE pushPoper . gexp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    mexp                           shift and go to state 136
    gexp                           shift and go to state 247
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 224

    (103) gexp -> mexp step5 GTE pushPoper . gexp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    mexp                           shift and go to state 136
    gexp                           shift and go to state 248
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 225

    (104) gexp -> mexp step5 EQUALS pushPoper . gexp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    mexp                           shift and go to state 136
    gexp                           shift and go to state 249
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 226

    (105) gexp -> mexp step5 NEQUALS pushPoper . gexp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    mexp                           shift and go to state 136
    gexp                           shift and go to state 250
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 227

    (107) mexp -> t step4 PLUS pushPoper . mexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    t                              shift and go to state 137
    mexp                           shift and go to state 251
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 228

    (108) mexp -> t step4 MINUS pushPoper . mexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    t                              shift and go to state 137
    mexp                           shift and go to state 252
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 229

    (110) t -> f step3 MULT pushPoper . t
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    f                              shift and go to state 138
    t                              shift and go to state 253
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 230

    (111) t -> f step3 DIV pushPoper . t
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    f                              shift and go to state 138
    t                              shift and go to state 254
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 231

    (89) cond_w -> WHILE step1While LPAREN exp RPAREN step2While . DO LBRACE listaEstatutos RBRACE step3While

    DO              shift and go to state 255


state 232

    (93) cond_f -> FOR asignacion TO exp step1While step1For . step2While DO LBRACE listaEstatutos RBRACE step3While
    (91) step2While -> .

    DO              reduce using rule 91 (step2While -> .)

    step2While                     shift and go to state 256

state 233

    (44) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF . definFunc
    (44) definFunc -> . tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc
    (45) definFunc -> . empty
    (34) tipoMethod -> . VOID
    (35) tipoMethod -> . INT
    (36) tipoMethod -> . FLOAT
    (37) tipoMethod -> . CHAR
    (127) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    MAIN            reduce using rule 127 (empty -> .)

    tipoMethod                     shift and go to state 14
    definFunc                      shift and go to state 257
    empty                          shift and go to state 15

state 234

    (32) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos . RBRACE declarMethods

    RBRACE          shift and go to state 258


state 235

    (66) paramReferencia -> exp paramType COMMA paramCount . paramReferencia
    (65) paramReferencia -> . exp paramType
    (66) paramReferencia -> . exp paramType COMMA paramCount paramReferencia
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    exp                            shift and go to state 153
    paramReferencia                shift and go to state 259
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 236

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK . rmFF SCOLON
    (24) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK . rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF
    (125) rmFF -> .

    SCOLON          reduce using rule 125 (rmFF -> .)
    LBRACK          reduce using rule 125 (rmFF -> .)

    rmFF                           shift and go to state 260

state 237

    (75) listaId -> idCall COMMA popIO insertOpRead . listaId
    (74) listaId -> . idCall popIO
    (75) listaId -> . idCall COMMA popIO insertOpRead listaId
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    ID              shift and go to state 119

    idCall                         shift and go to state 160
    listaId                        shift and go to state 261

state 238

    (78) escritura -> WRITE pushPoper LPAREN exp popIO lextra RPAREN .

    SCOLON          reduce using rule 78 (escritura -> WRITE pushPoper LPAREN exp popIO lextra RPAREN .)


state 239

    (80) lextra -> COMMA insertOpWrite . exp popIO lextra
    (81) lextra -> COMMA insertOpWrite . LETRERO letreroPush popIO lextra
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LETRERO         shift and go to state 263
    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    exp                            shift and go to state 262
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 240

    (79) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra . RPAREN

    RPAREN          shift and go to state 264


state 241

    (112) f -> LPAREN addFF exp RPAREN rmFF .

    MULT            reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    DIV             reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    PLUS            reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    MINUS           reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    LT              reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    GT              reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    LTE             reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    GTE             reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    EQUALS          reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    NEQUALS         reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    AND             reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    OR              reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    RPAREN          reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    COMMA           reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    SCOLON          reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    TO              reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    DO              reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)
    RBRACK          reduce using rule 112 (f -> LPAREN addFF exp RPAREN rmFF .)


state 242

    (85) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE . listaEstatutos RBRACE
    (86) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE . listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (49) listaEstatutos -> . estatutos listaEstatutos
    (50) listaEstatutos -> . empty
    (51) estatutos -> . llamada SCOLON
    (52) estatutos -> . asignacion SCOLON
    (53) estatutos -> . returnf SCOLON
    (54) estatutos -> . lectura SCOLON
    (55) estatutos -> . escritura SCOLON
    (56) estatutos -> . condicion
    (57) estatutos -> . cond_w
    (58) estatutos -> . cond_f
    (127) empty -> .
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (59) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (71) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (73) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (78) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (79) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (85) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (89) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (93) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    RBRACE          reduce using rule 127 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 265
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 243

    (96) exp -> texp step7 OR pushPoper exp .

    RPAREN          reduce using rule 96 (exp -> texp step7 OR pushPoper exp .)
    COMMA           reduce using rule 96 (exp -> texp step7 OR pushPoper exp .)
    SCOLON          reduce using rule 96 (exp -> texp step7 OR pushPoper exp .)
    TO              reduce using rule 96 (exp -> texp step7 OR pushPoper exp .)
    DO              reduce using rule 96 (exp -> texp step7 OR pushPoper exp .)
    RBRACK          reduce using rule 96 (exp -> texp step7 OR pushPoper exp .)


state 244

    (98) texp -> gexp step6 AND pushPoper texp .

    OR              reduce using rule 98 (texp -> gexp step6 AND pushPoper texp .)
    RPAREN          reduce using rule 98 (texp -> gexp step6 AND pushPoper texp .)
    COMMA           reduce using rule 98 (texp -> gexp step6 AND pushPoper texp .)
    SCOLON          reduce using rule 98 (texp -> gexp step6 AND pushPoper texp .)
    TO              reduce using rule 98 (texp -> gexp step6 AND pushPoper texp .)
    DO              reduce using rule 98 (texp -> gexp step6 AND pushPoper texp .)
    RBRACK          reduce using rule 98 (texp -> gexp step6 AND pushPoper texp .)


state 245

    (100) gexp -> mexp step5 LT pushPoper gexp .

    AND             reduce using rule 100 (gexp -> mexp step5 LT pushPoper gexp .)
    OR              reduce using rule 100 (gexp -> mexp step5 LT pushPoper gexp .)
    RPAREN          reduce using rule 100 (gexp -> mexp step5 LT pushPoper gexp .)
    COMMA           reduce using rule 100 (gexp -> mexp step5 LT pushPoper gexp .)
    SCOLON          reduce using rule 100 (gexp -> mexp step5 LT pushPoper gexp .)
    TO              reduce using rule 100 (gexp -> mexp step5 LT pushPoper gexp .)
    DO              reduce using rule 100 (gexp -> mexp step5 LT pushPoper gexp .)
    RBRACK          reduce using rule 100 (gexp -> mexp step5 LT pushPoper gexp .)


state 246

    (101) gexp -> mexp step5 GT pushPoper gexp .

    AND             reduce using rule 101 (gexp -> mexp step5 GT pushPoper gexp .)
    OR              reduce using rule 101 (gexp -> mexp step5 GT pushPoper gexp .)
    RPAREN          reduce using rule 101 (gexp -> mexp step5 GT pushPoper gexp .)
    COMMA           reduce using rule 101 (gexp -> mexp step5 GT pushPoper gexp .)
    SCOLON          reduce using rule 101 (gexp -> mexp step5 GT pushPoper gexp .)
    TO              reduce using rule 101 (gexp -> mexp step5 GT pushPoper gexp .)
    DO              reduce using rule 101 (gexp -> mexp step5 GT pushPoper gexp .)
    RBRACK          reduce using rule 101 (gexp -> mexp step5 GT pushPoper gexp .)


state 247

    (102) gexp -> mexp step5 LTE pushPoper gexp .

    AND             reduce using rule 102 (gexp -> mexp step5 LTE pushPoper gexp .)
    OR              reduce using rule 102 (gexp -> mexp step5 LTE pushPoper gexp .)
    RPAREN          reduce using rule 102 (gexp -> mexp step5 LTE pushPoper gexp .)
    COMMA           reduce using rule 102 (gexp -> mexp step5 LTE pushPoper gexp .)
    SCOLON          reduce using rule 102 (gexp -> mexp step5 LTE pushPoper gexp .)
    TO              reduce using rule 102 (gexp -> mexp step5 LTE pushPoper gexp .)
    DO              reduce using rule 102 (gexp -> mexp step5 LTE pushPoper gexp .)
    RBRACK          reduce using rule 102 (gexp -> mexp step5 LTE pushPoper gexp .)


state 248

    (103) gexp -> mexp step5 GTE pushPoper gexp .

    AND             reduce using rule 103 (gexp -> mexp step5 GTE pushPoper gexp .)
    OR              reduce using rule 103 (gexp -> mexp step5 GTE pushPoper gexp .)
    RPAREN          reduce using rule 103 (gexp -> mexp step5 GTE pushPoper gexp .)
    COMMA           reduce using rule 103 (gexp -> mexp step5 GTE pushPoper gexp .)
    SCOLON          reduce using rule 103 (gexp -> mexp step5 GTE pushPoper gexp .)
    TO              reduce using rule 103 (gexp -> mexp step5 GTE pushPoper gexp .)
    DO              reduce using rule 103 (gexp -> mexp step5 GTE pushPoper gexp .)
    RBRACK          reduce using rule 103 (gexp -> mexp step5 GTE pushPoper gexp .)


state 249

    (104) gexp -> mexp step5 EQUALS pushPoper gexp .

    AND             reduce using rule 104 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    OR              reduce using rule 104 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    RPAREN          reduce using rule 104 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    COMMA           reduce using rule 104 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    SCOLON          reduce using rule 104 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    TO              reduce using rule 104 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    DO              reduce using rule 104 (gexp -> mexp step5 EQUALS pushPoper gexp .)
    RBRACK          reduce using rule 104 (gexp -> mexp step5 EQUALS pushPoper gexp .)


state 250

    (105) gexp -> mexp step5 NEQUALS pushPoper gexp .

    AND             reduce using rule 105 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    OR              reduce using rule 105 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    RPAREN          reduce using rule 105 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    COMMA           reduce using rule 105 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    SCOLON          reduce using rule 105 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    TO              reduce using rule 105 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    DO              reduce using rule 105 (gexp -> mexp step5 NEQUALS pushPoper gexp .)
    RBRACK          reduce using rule 105 (gexp -> mexp step5 NEQUALS pushPoper gexp .)


state 251

    (107) mexp -> t step4 PLUS pushPoper mexp .

    LT              reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    GT              reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    LTE             reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    GTE             reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    EQUALS          reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    NEQUALS         reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    AND             reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    OR              reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    RPAREN          reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    COMMA           reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    SCOLON          reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    TO              reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    DO              reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)
    RBRACK          reduce using rule 107 (mexp -> t step4 PLUS pushPoper mexp .)


state 252

    (108) mexp -> t step4 MINUS pushPoper mexp .

    LT              reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    GT              reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    LTE             reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    GTE             reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    EQUALS          reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    NEQUALS         reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    AND             reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    OR              reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    RPAREN          reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    COMMA           reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    SCOLON          reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    TO              reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    DO              reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)
    RBRACK          reduce using rule 108 (mexp -> t step4 MINUS pushPoper mexp .)


state 253

    (110) t -> f step3 MULT pushPoper t .

    PLUS            reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    MINUS           reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    LT              reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    GT              reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    LTE             reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    GTE             reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    EQUALS          reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    NEQUALS         reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    AND             reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    OR              reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    RPAREN          reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    COMMA           reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    SCOLON          reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    TO              reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    DO              reduce using rule 110 (t -> f step3 MULT pushPoper t .)
    RBRACK          reduce using rule 110 (t -> f step3 MULT pushPoper t .)


state 254

    (111) t -> f step3 DIV pushPoper t .

    PLUS            reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    MINUS           reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    LT              reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    GT              reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    LTE             reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    GTE             reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    EQUALS          reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    NEQUALS         reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    AND             reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    OR              reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    RPAREN          reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    COMMA           reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    SCOLON          reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    TO              reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    DO              reduce using rule 111 (t -> f step3 DIV pushPoper t .)
    RBRACK          reduce using rule 111 (t -> f step3 DIV pushPoper t .)


state 255

    (89) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO . LBRACE listaEstatutos RBRACE step3While

    LBRACE          shift and go to state 266


state 256

    (93) cond_f -> FOR asignacion TO exp step1While step1For step2While . DO LBRACE listaEstatutos RBRACE step3While

    DO              shift and go to state 267


state 257

    (44) definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc .

    MAIN            reduce using rule 44 (definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc .)


state 258

    (32) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE . declarMethods
    (32) declarMethods -> . tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods
    (33) declarMethods -> . empty
    (34) tipoMethod -> . VOID
    (35) tipoMethod -> . INT
    (36) tipoMethod -> . FLOAT
    (37) tipoMethod -> . CHAR
    (127) empty -> .

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    CHAR            shift and go to state 19
    RBRACE          reduce using rule 127 (empty -> .)

    tipoMethod                     shift and go to state 64
    declarMethods                  shift and go to state 268
    empty                          shift and go to state 65

state 259

    (66) paramReferencia -> exp paramType COMMA paramCount paramReferencia .

    RPAREN          reduce using rule 66 (paramReferencia -> exp paramType COMMA paramCount paramReferencia .)


state 260

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF . SCOLON
    (24) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF . LBRACK addFF exp idCallaux3 RBRACK rmFF

    SCOLON          shift and go to state 270
    LBRACK          shift and go to state 269


state 261

    (75) listaId -> idCall COMMA popIO insertOpRead listaId .

    RPAREN          reduce using rule 75 (listaId -> idCall COMMA popIO insertOpRead listaId .)


state 262

    (80) lextra -> COMMA insertOpWrite exp . popIO lextra
    (77) popIO -> .

    COMMA           reduce using rule 77 (popIO -> .)
    RPAREN          reduce using rule 77 (popIO -> .)

    popIO                          shift and go to state 271

state 263

    (81) lextra -> COMMA insertOpWrite LETRERO . letreroPush popIO lextra
    (84) letreroPush -> .

    COMMA           reduce using rule 84 (letreroPush -> .)
    RPAREN          reduce using rule 84 (letreroPush -> .)

    letreroPush                    shift and go to state 272

state 264

    (79) escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN .

    SCOLON          reduce using rule 79 (escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN .)


state 265

    (85) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos . RBRACE
    (86) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos . RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE

    RBRACE          shift and go to state 273


state 266

    (89) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE . listaEstatutos RBRACE step3While
    (49) listaEstatutos -> . estatutos listaEstatutos
    (50) listaEstatutos -> . empty
    (51) estatutos -> . llamada SCOLON
    (52) estatutos -> . asignacion SCOLON
    (53) estatutos -> . returnf SCOLON
    (54) estatutos -> . lectura SCOLON
    (55) estatutos -> . escritura SCOLON
    (56) estatutos -> . condicion
    (57) estatutos -> . cond_w
    (58) estatutos -> . cond_f
    (127) empty -> .
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (59) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (71) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (73) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (78) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (79) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (85) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (89) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (93) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    RBRACE          reduce using rule 127 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 274
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 267

    (93) cond_f -> FOR asignacion TO exp step1While step1For step2While DO . LBRACE listaEstatutos RBRACE step3While

    LBRACE          shift and go to state 275


state 268

    (32) declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods .

    RBRACE          reduce using rule 32 (declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods .)


state 269

    (24) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK . addFF exp idCallaux3 RBRACK rmFF
    (124) addFF -> .

    LPAREN          reduce using rule 124 (addFF -> .)
    CTE_I           reduce using rule 124 (addFF -> .)
    CTE_F           reduce using rule 124 (addFF -> .)
    CTE_C           reduce using rule 124 (addFF -> .)
    ID              reduce using rule 124 (addFF -> .)

    addFF                          shift and go to state 276

state 270

    (23) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .

    ASIGNA          reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    MULT            reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    DIV             reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    PLUS            reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    MINUS           reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    LT              reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    GT              reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    LTE             reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    GTE             reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    EQUALS          reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    NEQUALS         reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    AND             reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    OR              reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    RPAREN          reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    COMMA           reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    SCOLON          reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    TO              reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    DO              reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)
    RBRACK          reduce using rule 23 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON .)


state 271

    (80) lextra -> COMMA insertOpWrite exp popIO . lextra
    (80) lextra -> . COMMA insertOpWrite exp popIO lextra
    (81) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (82) lextra -> . empty
    (127) empty -> .

    COMMA           shift and go to state 214
    RPAREN          reduce using rule 127 (empty -> .)

    lextra                         shift and go to state 277
    empty                          shift and go to state 215

state 272

    (81) lextra -> COMMA insertOpWrite LETRERO letreroPush . popIO lextra
    (77) popIO -> .

    COMMA           reduce using rule 77 (popIO -> .)
    RPAREN          reduce using rule 77 (popIO -> .)

    popIO                          shift and go to state 278

state 273

    (85) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .
    (86) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE . ELSE cond3 LBRACE listaEstatutos RBRACE

    ID              reduce using rule 85 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 85 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 85 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 85 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 85 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 85 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 85 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 85 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE .)
    ELSE            shift and go to state 279


state 274

    (89) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos . RBRACE step3While

    RBRACE          shift and go to state 280


state 275

    (93) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE . listaEstatutos RBRACE step3While
    (49) listaEstatutos -> . estatutos listaEstatutos
    (50) listaEstatutos -> . empty
    (51) estatutos -> . llamada SCOLON
    (52) estatutos -> . asignacion SCOLON
    (53) estatutos -> . returnf SCOLON
    (54) estatutos -> . lectura SCOLON
    (55) estatutos -> . escritura SCOLON
    (56) estatutos -> . condicion
    (57) estatutos -> . cond_w
    (58) estatutos -> . cond_f
    (127) empty -> .
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (59) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (71) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (73) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (78) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (79) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (85) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (89) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (93) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    RBRACE          reduce using rule 127 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    asignacion                     shift and go to state 80
    listaEstatutos                 shift and go to state 281
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 276

    (24) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF . exp idCallaux3 RBRACK rmFF
    (95) exp -> . texp step7
    (96) exp -> . texp step7 OR pushPoper exp
    (97) texp -> . gexp step6
    (98) texp -> . gexp step6 AND pushPoper texp
    (99) gexp -> . mexp step5
    (100) gexp -> . mexp step5 LT pushPoper gexp
    (101) gexp -> . mexp step5 GT pushPoper gexp
    (102) gexp -> . mexp step5 LTE pushPoper gexp
    (103) gexp -> . mexp step5 GTE pushPoper gexp
    (104) gexp -> . mexp step5 EQUALS pushPoper gexp
    (105) gexp -> . mexp step5 NEQUALS pushPoper gexp
    (106) mexp -> . t step4
    (107) mexp -> . t step4 PLUS pushPoper mexp
    (108) mexp -> . t step4 MINUS pushPoper mexp
    (109) t -> . f step3
    (110) t -> . f step3 MULT pushPoper t
    (111) t -> . f step3 DIV pushPoper t
    (112) f -> . LPAREN addFF exp RPAREN rmFF
    (113) f -> . CTE_I step1
    (114) f -> . CTE_F step1
    (115) f -> . CTE_C step1
    (116) f -> . llamada
    (117) f -> . idCall
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    LPAREN          shift and go to state 132
    CTE_I           shift and go to state 139
    CTE_F           shift and go to state 140
    CTE_C           shift and go to state 141
    ID              shift and go to state 75

    exp                            shift and go to state 282
    texp                           shift and go to state 134
    gexp                           shift and go to state 135
    mexp                           shift and go to state 136
    t                              shift and go to state 137
    f                              shift and go to state 138
    llamada                        shift and go to state 142
    idCall                         shift and go to state 143

state 277

    (80) lextra -> COMMA insertOpWrite exp popIO lextra .

    RPAREN          reduce using rule 80 (lextra -> COMMA insertOpWrite exp popIO lextra .)


state 278

    (81) lextra -> COMMA insertOpWrite LETRERO letreroPush popIO . lextra
    (80) lextra -> . COMMA insertOpWrite exp popIO lextra
    (81) lextra -> . COMMA insertOpWrite LETRERO letreroPush popIO lextra
    (82) lextra -> . empty
    (127) empty -> .

    COMMA           shift and go to state 214
    RPAREN          reduce using rule 127 (empty -> .)

    lextra                         shift and go to state 283
    empty                          shift and go to state 215

state 279

    (86) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE . cond3 LBRACE listaEstatutos RBRACE
    (88) cond3 -> .

    LBRACE          reduce using rule 88 (cond3 -> .)

    cond3                          shift and go to state 284

state 280

    (89) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE . step3While
    (92) step3While -> .

    ID              reduce using rule 92 (step3While -> .)
    RETURN          reduce using rule 92 (step3While -> .)
    READ            reduce using rule 92 (step3While -> .)
    WRITE           reduce using rule 92 (step3While -> .)
    IF              reduce using rule 92 (step3While -> .)
    WHILE           reduce using rule 92 (step3While -> .)
    FOR             reduce using rule 92 (step3While -> .)
    RBRACE          reduce using rule 92 (step3While -> .)

    step3While                     shift and go to state 285

state 281

    (93) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos . RBRACE step3While

    RBRACE          shift and go to state 286


state 282

    (24) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp . idCallaux3 RBRACK rmFF
    (27) idCallaux3 -> .

    RBRACK          reduce using rule 27 (idCallaux3 -> .)

    idCallaux3                     shift and go to state 287

state 283

    (81) lextra -> COMMA insertOpWrite LETRERO letreroPush popIO lextra .

    RPAREN          reduce using rule 81 (lextra -> COMMA insertOpWrite LETRERO letreroPush popIO lextra .)


state 284

    (86) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 . LBRACE listaEstatutos RBRACE

    LBRACE          shift and go to state 288


state 285

    (89) cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .

    ID              reduce using rule 89 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RETURN          reduce using rule 89 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    READ            reduce using rule 89 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WRITE           reduce using rule 89 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    IF              reduce using rule 89 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WHILE           reduce using rule 89 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    FOR             reduce using rule 89 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RBRACE          reduce using rule 89 (cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While .)


state 286

    (93) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE . step3While
    (92) step3While -> .

    ID              reduce using rule 92 (step3While -> .)
    RETURN          reduce using rule 92 (step3While -> .)
    READ            reduce using rule 92 (step3While -> .)
    WRITE           reduce using rule 92 (step3While -> .)
    IF              reduce using rule 92 (step3While -> .)
    WHILE           reduce using rule 92 (step3While -> .)
    FOR             reduce using rule 92 (step3While -> .)
    RBRACE          reduce using rule 92 (step3While -> .)

    step3While                     shift and go to state 289

state 287

    (24) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 . RBRACK rmFF

    RBRACK          shift and go to state 290


state 288

    (86) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE . listaEstatutos RBRACE
    (49) listaEstatutos -> . estatutos listaEstatutos
    (50) listaEstatutos -> . empty
    (51) estatutos -> . llamada SCOLON
    (52) estatutos -> . asignacion SCOLON
    (53) estatutos -> . returnf SCOLON
    (54) estatutos -> . lectura SCOLON
    (55) estatutos -> . escritura SCOLON
    (56) estatutos -> . condicion
    (57) estatutos -> . cond_w
    (58) estatutos -> . cond_f
    (127) empty -> .
    (61) llamada -> . ID DOT ID LPAREN enviaParam RPAREN
    (62) llamada -> . ID verExist LPAREN enviaParam coherenceGo RPAREN
    (59) asignacion -> . idCall ASIGNA pushPoper exp asignStep2
    (71) returnf -> . RETURN pushPoper LPAREN exp RPAREN popReturn
    (73) lectura -> . READ pushPoper LPAREN listaId RPAREN
    (78) escritura -> . WRITE pushPoper LPAREN exp popIO lextra RPAREN
    (79) escritura -> . WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN
    (85) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE
    (86) condicion -> . IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE
    (89) cond_w -> . WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While
    (93) cond_f -> . FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While
    (21) idCall -> . ID idCallaux
    (22) idCall -> . ID idCallaux DOT ID
    (23) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF SCOLON
    (24) idCall -> . ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF

    RBRACE          reduce using rule 127 (empty -> .)
    ID              shift and go to state 75
    RETURN          shift and go to state 88
    READ            shift and go to state 89
    WRITE           shift and go to state 90
    IF              shift and go to state 91
    WHILE           shift and go to state 92
    FOR             shift and go to state 93

    listaEstatutos                 shift and go to state 291
    estatutos                      shift and go to state 77
    empty                          shift and go to state 78
    llamada                        shift and go to state 79
    asignacion                     shift and go to state 80
    returnf                        shift and go to state 81
    lectura                        shift and go to state 82
    escritura                      shift and go to state 83
    condicion                      shift and go to state 84
    cond_w                         shift and go to state 85
    cond_f                         shift and go to state 86
    idCall                         shift and go to state 87

state 289

    (93) cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .

    ID              reduce using rule 93 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RETURN          reduce using rule 93 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    READ            reduce using rule 93 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WRITE           reduce using rule 93 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    IF              reduce using rule 93 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    WHILE           reduce using rule 93 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    FOR             reduce using rule 93 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)
    RBRACE          reduce using rule 93 (cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While .)


state 290

    (24) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK . rmFF
    (125) rmFF -> .

    ASIGNA          reduce using rule 125 (rmFF -> .)
    MULT            reduce using rule 125 (rmFF -> .)
    DIV             reduce using rule 125 (rmFF -> .)
    PLUS            reduce using rule 125 (rmFF -> .)
    MINUS           reduce using rule 125 (rmFF -> .)
    LT              reduce using rule 125 (rmFF -> .)
    GT              reduce using rule 125 (rmFF -> .)
    LTE             reduce using rule 125 (rmFF -> .)
    GTE             reduce using rule 125 (rmFF -> .)
    EQUALS          reduce using rule 125 (rmFF -> .)
    NEQUALS         reduce using rule 125 (rmFF -> .)
    AND             reduce using rule 125 (rmFF -> .)
    OR              reduce using rule 125 (rmFF -> .)
    RPAREN          reduce using rule 125 (rmFF -> .)
    COMMA           reduce using rule 125 (rmFF -> .)
    SCOLON          reduce using rule 125 (rmFF -> .)
    TO              reduce using rule 125 (rmFF -> .)
    DO              reduce using rule 125 (rmFF -> .)
    RBRACK          reduce using rule 125 (rmFF -> .)

    rmFF                           shift and go to state 292

state 291

    (86) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos . RBRACE

    RBRACE          shift and go to state 293


state 292

    (24) idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .

    ASIGNA          reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    MULT            reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    DIV             reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    PLUS            reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    MINUS           reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    LT              reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    GT              reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    LTE             reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    GTE             reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    EQUALS          reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    NEQUALS         reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    AND             reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    OR              reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    RPAREN          reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    COMMA           reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    SCOLON          reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    TO              reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    DO              reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)
    RBRACK          reduce using rule 24 (idCall -> ID idCallaux LBRACK addFF exp idCallaux2 RBRACK rmFF LBRACK addFF exp idCallaux3 RBRACK rmFF .)


state 293

    (86) condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .

    ID              reduce using rule 86 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    RETURN          reduce using rule 86 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    READ            reduce using rule 86 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    WRITE           reduce using rule 86 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    IF              reduce using rule 86 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    WHILE           reduce using rule 86 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    FOR             reduce using rule 86 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)
    RBRACE          reduce using rule 86 (condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 75 resolved as shift
