
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIGNA ATTRIBUTES CHAR CLASS COLON COMMA CTE_C CTE_F CTE_I DIV DO DOT ELSE EQUALS EXTENDS FLOAT FOR FUNC GT GTE ID IF INT LBRACE LBRACK LETRERO LPAREN LT LTE MAIN METHODS MINUS MULT NEQUALS OR PLUS PROGRAM QUOTE RBRACE RBRACK READ RETURN RPAREN SCOLON THEN TO VAR VOID WHILE WRITE\n    program : PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba\n    \n    prueba : \n    \n    a1InitProg : \n    \n    globalTrue : \n    \n    globalFalse : \n    \n    auxMain :\n    \n    declarClases : CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases\n                 | empty\n    \n    herencia : LT EXTENDS ID GT\n             | empty\n    \n    declarAttributes : tipo COLON listaIdDeclare SCOLON declarAttributes\n                     | empty\n    \n    listaIdDeclare : idDeclare  \n                   | idDeclare COMMA listaIdDeclare\n    \n    idDeclare : ID \n              | ID LBRACK CTE_I RBRACK \n              | ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK\n    \n    idCall : ID\n           | ID DOT ID\n           | ID LBRACK exp RBRACK\n           | ID LBRACK exp RBRACK LBRACK exp RBRACK\n    \n    tipo : ID\n         | INT\n         | FLOAT\n         | CHAR\n    \n    declarMethods : tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods\n                  | empty\n    \n    tipoMethod : VOID\n               | INT\n               | FLOAT\n               | CHAR\n    \n    listaParam : param\n               | param COMMA listaParam\n               | empty\n    \n    param : tipo COLON ID\n    \n    declarVar : VAR tipo COLON listaIdDeclare SCOLON declarVar\n              | empty\n    \n    definFunc : tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc\n              | empty\n    \n    auxFuncion :\n    \n    listaEstatutos : estatutos listaEstatutos\n                   | empty\n    \n    estatutos   : llamada SCOLON\n                | asignacion SCOLON\n                | returnf SCOLON\n                | lectura SCOLON\n                | escritura SCOLON\n                | condicion\n                | cond_w\n                | cond_f\n    \n    asignacion  : idCall ASIGNA exp \n    \n    llamada   : ID DOT ID LPAREN enviaParam RPAREN\n              | ID LPAREN enviaParam RPAREN \n    \n    enviaParam  : paramReferencia\n                | empty\n    \n    paramReferencia : exp\n                    | exp COMMA paramReferencia\n    \n    returnf   : RETURN LPAREN exp RPAREN \n    \n    lectura   : READ LPAREN listaId RPAREN\n    \n    listaId : idCall \n            | idCall COMMA listaId\n    \n    escritura   : WRITE LPAREN exp lextra RPAREN\n                | WRITE LPAREN LETRERO lextra RPAREN\n    \n    lextra  : COMMA exp lextra\n            | COMMA LETRERO lextra\n            | empty\n    \n    condicion   : IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE\n                | IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE\n    \n    cond_w : WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE\n    \n    cond_f : FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE\n    \n    exp     : texp\n            | texp OR exp\n    \n    texp    : gexp\n            | gexp AND texp\n    \n    gexp    : mexp\n            | mexp LT mexp\n            | mexp GT mexp\n            | mexp EQUALS mexp\n            | mexp NEQUALS mexp\n    \n    mexp    : t\n            | t PLUS mexp\n            | t MINUS mexp\n    \n    t   : f\n        | f MULT t\n        | f DIV t\n    \n    f   : LPAREN exp RPAREN\n        | CTE_I\n        | CTE_F\n        | CTE_C\n        | llamada\n        | idCall\n    \n    empty :\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,108,142,],[0,-2,-1,]),'ID':([2,7,12,13,24,32,33,36,46,47,50,53,61,64,65,66,75,77,78,80,83,90,91,92,99,105,106,107,110,111,112,113,114,115,116,117,118,119,120,123,126,151,152,154,155,158,159,160,161,162,163,164,165,166,167,168,172,174,196,204,211,212,219,220,221,224,225,227,],[3,10,19,-37,34,39,19,45,-92,39,39,-36,19,73,19,-92,81,19,102,19,81,-48,-49,-50,122,125,81,81,-43,-44,-45,-46,-47,81,81,122,81,81,81,81,81,81,180,81,81,81,81,81,81,81,81,81,81,81,81,81,122,81,81,81,81,81,-67,-69,81,81,-70,-68,]),'SCOLON':([3,4,37,38,39,54,59,62,81,85,86,87,88,89,103,125,131,132,133,134,135,136,137,138,139,140,143,157,169,170,171,184,186,187,188,189,190,191,192,193,194,195,198,201,207,215,],[-3,5,46,-13,-15,-14,65,-16,-18,110,111,112,113,114,-17,-19,-71,-73,-75,-80,-83,-87,-88,-89,-90,-91,-51,-53,-20,-58,-59,-86,-72,-74,-76,-77,-78,-79,-81,-82,-84,-85,-62,-63,-52,-21,]),'CLASS':([5,63,],[7,7,]),'VAR':([5,6,8,9,46,63,66,72,76,],[-92,-4,-8,12,12,-92,12,-7,12,]),'VOID':([5,6,8,9,11,13,17,46,49,53,63,72,181,206,],[-92,-4,-8,-92,-5,-37,28,-92,28,-36,-92,-7,28,28,]),'INT':([5,6,8,9,11,12,13,17,33,46,49,53,61,63,65,72,77,80,181,206,],[-92,-4,-8,-92,-5,20,-37,29,20,-92,29,-36,20,-92,20,-7,20,20,29,29,]),'FLOAT':([5,6,8,9,11,12,13,17,33,46,49,53,61,63,65,72,77,80,181,206,],[-92,-4,-8,-92,-5,21,-37,30,21,-92,30,-36,21,-92,21,-7,21,21,30,30,]),'CHAR':([5,6,8,9,11,12,13,17,33,46,49,53,61,63,65,72,77,80,181,206,],[-92,-4,-8,-92,-5,22,-37,31,22,-92,31,-36,22,-92,22,-7,22,22,31,31,]),'MAIN':([5,6,8,9,11,13,17,25,27,46,53,63,72,181,205,],[-92,-4,-8,-92,-5,-37,-92,35,-39,-92,-36,-92,-7,-92,-38,]),'LT':([10,81,125,133,134,135,136,137,138,139,140,157,169,184,192,193,194,195,207,215,],[15,-18,-19,161,-80,-83,-87,-88,-89,-90,-91,-53,-20,-86,-81,-82,-84,-85,-52,-21,]),'LBRACE':([10,13,14,16,43,46,53,60,76,100,124,202,203,218,222,],[-92,-37,23,-10,-9,-92,-36,66,-92,123,154,211,212,221,224,]),'RETURN':([13,46,53,66,75,83,90,91,92,110,111,112,113,114,123,154,211,212,219,220,221,224,225,227,],[-37,-92,-36,-92,94,94,-48,-49,-50,-43,-44,-45,-46,-47,94,94,94,94,-67,-69,94,94,-70,-68,]),'READ':([13,46,53,66,75,83,90,91,92,110,111,112,113,114,123,154,211,212,219,220,221,224,225,227,],[-37,-92,-36,-92,95,95,-48,-49,-50,-43,-44,-45,-46,-47,95,95,95,95,-67,-69,95,95,-70,-68,]),'WRITE':([13,46,53,66,75,83,90,91,92,110,111,112,113,114,123,154,211,212,219,220,221,224,225,227,],[-37,-92,-36,-92,96,96,-48,-49,-50,-43,-44,-45,-46,-47,96,96,96,96,-67,-69,96,96,-70,-68,]),'IF':([13,46,53,66,75,83,90,91,92,110,111,112,113,114,123,154,211,212,219,220,221,224,225,227,],[-37,-92,-36,-92,97,97,-48,-49,-50,-43,-44,-45,-46,-47,97,97,97,97,-67,-69,97,97,-70,-68,]),'WHILE':([13,46,53,66,75,83,90,91,92,110,111,112,113,114,123,154,211,212,219,220,221,224,225,227,],[-37,-92,-36,-92,98,98,-48,-49,-50,-43,-44,-45,-46,-47,98,98,98,98,-67,-69,98,98,-70,-68,]),'FOR':([13,46,53,66,75,83,90,91,92,110,111,112,113,114,123,154,211,212,219,220,221,224,225,227,],[-37,-92,-36,-92,99,99,-48,-49,-50,-43,-44,-45,-46,-47,99,99,99,99,-67,-69,99,99,-70,-68,]),'RBRACE':([13,46,49,53,56,58,66,75,82,83,84,90,91,92,109,110,111,112,113,114,123,153,154,182,206,211,212,214,216,217,219,220,221,223,224,225,226,227,],[-37,-92,-92,-36,63,-27,-92,-92,108,-92,-42,-48,-49,-50,-41,-43,-44,-45,-46,-47,-92,181,-92,206,-92,-92,-92,-26,219,220,-67,-69,-92,225,-92,-70,227,-68,]),'EXTENDS':([15,],[24,]),'COLON':([18,19,20,21,22,41,70,],[32,-22,-23,-24,-25,50,78,]),'ATTRIBUTES':([23,],[33,]),'FUNC':([26,28,29,30,31,57,],[36,-28,-29,-30,-31,64,]),'METHODS':([33,40,42,65,74,],[-92,49,-12,-92,-11,]),'GT':([34,81,125,133,134,135,136,137,138,139,140,157,169,184,192,193,194,195,207,215,],[43,-18,-19,162,-80,-83,-87,-88,-89,-90,-91,-53,-20,-86,-81,-82,-84,-85,-52,-21,]),'LPAREN':([35,44,45,52,73,81,94,95,96,97,98,106,107,115,116,118,119,120,125,126,151,155,158,159,160,161,162,163,164,165,166,167,168,174,196,204,],[-6,51,-40,61,80,106,116,117,118,119,120,126,126,126,126,126,126,126,155,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'COMMA':([38,39,62,68,81,102,103,122,125,130,131,132,133,134,135,136,137,138,139,140,146,147,148,157,169,180,184,186,187,188,189,190,191,192,193,194,195,199,200,207,215,],[47,-15,-16,77,-18,-35,-17,-18,-19,158,-71,-73,-75,-80,-83,-87,-88,-89,-90,-91,172,174,174,-53,-20,-19,-86,-72,-74,-76,-77,-78,-79,-81,-82,-84,-85,174,174,-52,-21,]),'LBRACK':([39,62,81,122,169,],[48,71,107,107,196,]),'CTE_I':([48,71,106,107,115,116,118,119,120,126,151,155,158,159,160,161,162,163,164,165,166,167,168,174,196,204,],[55,79,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,]),'RPAREN':([51,61,67,68,69,77,80,81,101,102,104,106,122,125,127,128,129,130,131,132,133,134,135,136,137,138,139,140,144,145,146,147,148,149,150,155,156,157,169,173,175,176,180,183,184,185,186,187,188,189,190,191,192,193,194,195,197,199,200,207,209,210,215,],[60,-92,76,-32,-34,-92,-92,-18,-33,-35,124,-92,-18,-19,157,-54,-55,-56,-71,-73,-75,-80,-83,-87,-88,-89,-90,-91,170,171,-60,-92,-92,177,178,-92,184,-53,-20,198,-66,201,-19,207,-86,-57,-72,-74,-76,-77,-78,-79,-81,-82,-84,-85,-61,-92,-92,-52,-64,-65,-21,]),'RBRACK':([55,79,81,125,131,132,133,134,135,136,137,138,139,140,141,157,169,184,186,187,188,189,190,191,192,193,194,195,207,208,215,],[62,103,-18,-19,-71,-73,-75,-80,-83,-87,-88,-89,-90,-91,169,-53,-20,-86,-72,-74,-76,-77,-78,-79,-81,-82,-84,-85,-52,215,-21,]),'DOT':([81,122,],[105,152,]),'ASIGNA':([81,93,121,122,125,169,180,215,],[-18,115,151,-18,-19,-20,-19,-21,]),'MULT':([81,125,135,136,137,138,139,140,157,169,184,207,215,],[-18,-19,167,-87,-88,-89,-90,-91,-53,-20,-86,-52,-21,]),'DIV':([81,125,135,136,137,138,139,140,157,169,184,207,215,],[-18,-19,168,-87,-88,-89,-90,-91,-53,-20,-86,-52,-21,]),'PLUS':([81,125,134,135,136,137,138,139,140,157,169,184,194,195,207,215,],[-18,-19,165,-83,-87,-88,-89,-90,-91,-53,-20,-86,-84,-85,-52,-21,]),'MINUS':([81,125,134,135,136,137,138,139,140,157,169,184,194,195,207,215,],[-18,-19,166,-83,-87,-88,-89,-90,-91,-53,-20,-86,-84,-85,-52,-21,]),'EQUALS':([81,125,133,134,135,136,137,138,139,140,157,169,184,192,193,194,195,207,215,],[-18,-19,163,-80,-83,-87,-88,-89,-90,-91,-53,-20,-86,-81,-82,-84,-85,-52,-21,]),'NEQUALS':([81,125,133,134,135,136,137,138,139,140,157,169,184,192,193,194,195,207,215,],[-18,-19,164,-80,-83,-87,-88,-89,-90,-91,-53,-20,-86,-81,-82,-84,-85,-52,-21,]),'AND':([81,125,132,133,134,135,136,137,138,139,140,157,169,184,188,189,190,191,192,193,194,195,207,215,],[-18,-19,160,-75,-80,-83,-87,-88,-89,-90,-91,-53,-20,-86,-76,-77,-78,-79,-81,-82,-84,-85,-52,-21,]),'OR':([81,125,131,132,133,134,135,136,137,138,139,140,157,169,184,187,188,189,190,191,192,193,194,195,207,215,],[-18,-19,159,-73,-75,-80,-83,-87,-88,-89,-90,-91,-53,-20,-86,-74,-76,-77,-78,-79,-81,-82,-84,-85,-52,-21,]),'TO':([81,125,131,132,133,134,135,136,137,138,139,140,157,169,179,184,186,187,188,189,190,191,192,193,194,195,207,215,],[-18,-19,-71,-73,-75,-80,-83,-87,-88,-89,-90,-91,-53,-20,204,-86,-72,-74,-76,-77,-78,-79,-81,-82,-84,-85,-52,-21,]),'DO':([81,125,131,132,133,134,135,136,137,138,139,140,157,169,178,184,186,187,188,189,190,191,192,193,194,195,207,213,215,],[-18,-19,-71,-73,-75,-80,-83,-87,-88,-89,-90,-91,-53,-20,203,-86,-72,-74,-76,-77,-78,-79,-81,-82,-84,-85,-52,218,-21,]),'CTE_F':([106,107,115,116,118,119,120,126,151,155,158,159,160,161,162,163,164,165,166,167,168,174,196,204,],[137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'CTE_C':([106,107,115,116,118,119,120,126,151,155,158,159,160,161,162,163,164,165,166,167,168,174,196,204,],[138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'LETRERO':([118,174,],[148,200,]),'THEN':([177,],[202,]),'ELSE':([219,],[222,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'a1InitProg':([3,],[4,]),'declarClases':([5,63,],[6,72,]),'empty':([5,9,10,17,33,46,49,61,63,65,66,75,76,77,80,83,106,123,147,148,154,155,181,199,200,206,211,212,221,224,],[8,13,16,27,42,13,58,69,8,42,13,84,13,69,69,84,129,84,175,175,84,129,27,175,175,58,84,84,84,84,]),'globalTrue':([6,],[9,]),'declarVar':([9,46,66,76,],[11,53,75,100,]),'herencia':([10,],[14,]),'globalFalse':([11,],[17,]),'tipo':([12,33,61,65,77,80,],[18,41,70,41,70,70,]),'definFunc':([17,181,],[25,205,]),'tipoMethod':([17,49,181,206,],[26,57,26,57,]),'listaIdDeclare':([32,47,50,],[37,54,59,]),'idDeclare':([32,47,50,],[38,38,38,]),'declarAttributes':([33,65,],[40,74,]),'auxMain':([35,],[44,]),'auxFuncion':([45,],[52,]),'declarMethods':([49,206,],[56,214,]),'listaParam':([61,77,80,],[67,101,104,]),'param':([61,77,80,],[68,68,68,]),'listaEstatutos':([75,83,123,154,211,212,221,224,],[82,109,153,182,216,217,223,226,]),'estatutos':([75,83,123,154,211,212,221,224,],[83,83,83,83,83,83,83,83,]),'llamada':([75,83,106,107,115,116,118,119,120,123,126,151,154,155,158,159,160,161,162,163,164,165,166,167,168,174,196,204,211,212,221,224,],[85,85,139,139,139,139,139,139,139,85,139,139,85,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,85,85,85,85,]),'asignacion':([75,83,123,154,211,212,221,224,],[86,86,86,86,86,86,86,86,]),'returnf':([75,83,123,154,211,212,221,224,],[87,87,87,87,87,87,87,87,]),'lectura':([75,83,123,154,211,212,221,224,],[88,88,88,88,88,88,88,88,]),'escritura':([75,83,123,154,211,212,221,224,],[89,89,89,89,89,89,89,89,]),'condicion':([75,83,123,154,211,212,221,224,],[90,90,90,90,90,90,90,90,]),'cond_w':([75,83,123,154,211,212,221,224,],[91,91,91,91,91,91,91,91,]),'cond_f':([75,83,123,154,211,212,221,224,],[92,92,92,92,92,92,92,92,]),'idCall':([75,83,99,106,107,115,116,117,118,119,120,123,126,151,154,155,158,159,160,161,162,163,164,165,166,167,168,172,174,196,204,211,212,221,224,],[93,93,121,140,140,140,140,146,140,140,140,93,140,140,93,140,140,140,140,140,140,140,140,140,140,140,140,146,140,140,140,93,93,93,93,]),'enviaParam':([106,155,],[127,183,]),'paramReferencia':([106,155,158,],[128,128,185,]),'exp':([106,107,115,116,118,119,120,126,151,155,158,159,174,196,204,],[130,141,143,144,147,149,150,156,179,130,130,186,199,208,213,]),'texp':([106,107,115,116,118,119,120,126,151,155,158,159,160,174,196,204,],[131,131,131,131,131,131,131,131,131,131,131,131,187,131,131,131,]),'gexp':([106,107,115,116,118,119,120,126,151,155,158,159,160,174,196,204,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'mexp':([106,107,115,116,118,119,120,126,151,155,158,159,160,161,162,163,164,165,166,174,196,204,],[133,133,133,133,133,133,133,133,133,133,133,133,133,188,189,190,191,192,193,133,133,133,]),'t':([106,107,115,116,118,119,120,126,151,155,158,159,160,161,162,163,164,165,166,167,168,174,196,204,],[134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,194,195,134,134,134,]),'f':([106,107,115,116,118,119,120,126,151,155,158,159,160,161,162,163,164,165,166,167,168,174,196,204,],[135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,]),'prueba':([108,],[142,]),'listaId':([117,172,],[145,197,]),'lextra':([147,148,199,200,],[173,176,209,210,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID a1InitProg SCOLON declarClases globalTrue declarVar globalFalse definFunc MAIN auxMain LPAREN RPAREN LBRACE declarVar listaEstatutos RBRACE prueba','program',18,'p_program','parser.py',23),
  ('prueba -> <empty>','prueba',0,'p_prueba','parser.py',27),
  ('a1InitProg -> <empty>','a1InitProg',0,'p_a1InitProg','parser.py',33),
  ('globalTrue -> <empty>','globalTrue',0,'p_globalTrue','parser.py',40),
  ('globalFalse -> <empty>','globalFalse',0,'p_globalFalse','parser.py',46),
  ('auxMain -> <empty>','auxMain',0,'p_auxMain','parser.py',52),
  ('declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases','declarClases',10,'p_declarClases','parser.py',61),
  ('declarClases -> empty','declarClases',1,'p_declarClases','parser.py',62),
  ('herencia -> LT EXTENDS ID GT','herencia',4,'p_herencia','parser.py',67),
  ('herencia -> empty','herencia',1,'p_herencia','parser.py',68),
  ('declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes','declarAttributes',5,'p_declarAttributes','parser.py',73),
  ('declarAttributes -> empty','declarAttributes',1,'p_declarAttributes','parser.py',74),
  ('listaIdDeclare -> idDeclare','listaIdDeclare',1,'p_listaIdDeclare','parser.py',78),
  ('listaIdDeclare -> idDeclare COMMA listaIdDeclare','listaIdDeclare',3,'p_listaIdDeclare','parser.py',79),
  ('idDeclare -> ID','idDeclare',1,'p_idDeclare','parser.py',84),
  ('idDeclare -> ID LBRACK CTE_I RBRACK','idDeclare',4,'p_idDeclare','parser.py',85),
  ('idDeclare -> ID LBRACK CTE_I RBRACK LBRACK CTE_I RBRACK','idDeclare',7,'p_idDeclare','parser.py',86),
  ('idCall -> ID','idCall',1,'p_idCall','parser.py',92),
  ('idCall -> ID DOT ID','idCall',3,'p_idCall','parser.py',93),
  ('idCall -> ID LBRACK exp RBRACK','idCall',4,'p_idCall','parser.py',94),
  ('idCall -> ID LBRACK exp RBRACK LBRACK exp RBRACK','idCall',7,'p_idCall','parser.py',95),
  ('tipo -> ID','tipo',1,'p_tipo','parser.py',99),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',100),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',101),
  ('tipo -> CHAR','tipo',1,'p_tipo','parser.py',102),
  ('declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods','declarMethods',10,'p_declarMethods','parser.py',109),
  ('declarMethods -> empty','declarMethods',1,'p_declarMethods','parser.py',110),
  ('tipoMethod -> VOID','tipoMethod',1,'p_tipoMethod','parser.py',114),
  ('tipoMethod -> INT','tipoMethod',1,'p_tipoMethod','parser.py',115),
  ('tipoMethod -> FLOAT','tipoMethod',1,'p_tipoMethod','parser.py',116),
  ('tipoMethod -> CHAR','tipoMethod',1,'p_tipoMethod','parser.py',117),
  ('listaParam -> param','listaParam',1,'p_listaParam','parser.py',122),
  ('listaParam -> param COMMA listaParam','listaParam',3,'p_listaParam','parser.py',123),
  ('listaParam -> empty','listaParam',1,'p_listaParam','parser.py',124),
  ('param -> tipo COLON ID','param',3,'p_param','parser.py',128),
  ('declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar','declarVar',6,'p_declarVar','parser.py',135),
  ('declarVar -> empty','declarVar',1,'p_declarVar','parser.py',136),
  ('definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar LBRACE listaEstatutos RBRACE definFunc','definFunc',12,'p_definFunc','parser.py',149),
  ('definFunc -> empty','definFunc',1,'p_definFunc','parser.py',150),
  ('auxFuncion -> <empty>','auxFuncion',0,'p_auxFuncion','parser.py',154),
  ('listaEstatutos -> estatutos listaEstatutos','listaEstatutos',2,'p_listaEstatutos','parser.py',162),
  ('listaEstatutos -> empty','listaEstatutos',1,'p_listaEstatutos','parser.py',163),
  ('estatutos -> llamada SCOLON','estatutos',2,'p_estatutos','parser.py',167),
  ('estatutos -> asignacion SCOLON','estatutos',2,'p_estatutos','parser.py',168),
  ('estatutos -> returnf SCOLON','estatutos',2,'p_estatutos','parser.py',169),
  ('estatutos -> lectura SCOLON','estatutos',2,'p_estatutos','parser.py',170),
  ('estatutos -> escritura SCOLON','estatutos',2,'p_estatutos','parser.py',171),
  ('estatutos -> condicion','estatutos',1,'p_estatutos','parser.py',172),
  ('estatutos -> cond_w','estatutos',1,'p_estatutos','parser.py',173),
  ('estatutos -> cond_f','estatutos',1,'p_estatutos','parser.py',174),
  ('asignacion -> idCall ASIGNA exp','asignacion',3,'p_asignacion','parser.py',181),
  ('llamada -> ID DOT ID LPAREN enviaParam RPAREN','llamada',6,'p_llamada','parser.py',188),
  ('llamada -> ID LPAREN enviaParam RPAREN','llamada',4,'p_llamada','parser.py',189),
  ('enviaParam -> paramReferencia','enviaParam',1,'p_enviaParam','parser.py',193),
  ('enviaParam -> empty','enviaParam',1,'p_enviaParam','parser.py',194),
  ('paramReferencia -> exp','paramReferencia',1,'p_paramReferencia','parser.py',198),
  ('paramReferencia -> exp COMMA paramReferencia','paramReferencia',3,'p_paramReferencia','parser.py',199),
  ('returnf -> RETURN LPAREN exp RPAREN','returnf',4,'p_returnf','parser.py',206),
  ('lectura -> READ LPAREN listaId RPAREN','lectura',4,'p_lectura','parser.py',213),
  ('listaId -> idCall','listaId',1,'p_listaId','parser.py',217),
  ('listaId -> idCall COMMA listaId','listaId',3,'p_listaId','parser.py',218),
  ('escritura -> WRITE LPAREN exp lextra RPAREN','escritura',5,'p_escritura','parser.py',225),
  ('escritura -> WRITE LPAREN LETRERO lextra RPAREN','escritura',5,'p_escritura','parser.py',226),
  ('lextra -> COMMA exp lextra','lextra',3,'p_lextra','parser.py',230),
  ('lextra -> COMMA LETRERO lextra','lextra',3,'p_lextra','parser.py',231),
  ('lextra -> empty','lextra',1,'p_lextra','parser.py',232),
  ('condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE','condicion',8,'p_condicion','parser.py',239),
  ('condicion -> IF LPAREN exp RPAREN THEN LBRACE listaEstatutos RBRACE ELSE LBRACE listaEstatutos RBRACE','condicion',12,'p_condicion','parser.py',240),
  ('cond_w -> WHILE LPAREN exp RPAREN DO LBRACE listaEstatutos RBRACE','cond_w',8,'p_cond_w','parser.py',247),
  ('cond_f -> FOR idCall ASIGNA exp TO exp DO LBRACE listaEstatutos RBRACE','cond_f',10,'p_cond_f','parser.py',255),
  ('exp -> texp','exp',1,'p_exp','parser.py',262),
  ('exp -> texp OR exp','exp',3,'p_exp','parser.py',263),
  ('texp -> gexp','texp',1,'p_texp','parser.py',267),
  ('texp -> gexp AND texp','texp',3,'p_texp','parser.py',268),
  ('gexp -> mexp','gexp',1,'p_gexp','parser.py',272),
  ('gexp -> mexp LT mexp','gexp',3,'p_gexp','parser.py',273),
  ('gexp -> mexp GT mexp','gexp',3,'p_gexp','parser.py',274),
  ('gexp -> mexp EQUALS mexp','gexp',3,'p_gexp','parser.py',275),
  ('gexp -> mexp NEQUALS mexp','gexp',3,'p_gexp','parser.py',276),
  ('mexp -> t','mexp',1,'p_mexp','parser.py',280),
  ('mexp -> t PLUS mexp','mexp',3,'p_mexp','parser.py',281),
  ('mexp -> t MINUS mexp','mexp',3,'p_mexp','parser.py',282),
  ('t -> f','t',1,'p_t','parser.py',286),
  ('t -> f MULT t','t',3,'p_t','parser.py',287),
  ('t -> f DIV t','t',3,'p_t','parser.py',288),
  ('f -> LPAREN exp RPAREN','f',3,'p_f','parser.py',292),
  ('f -> CTE_I','f',1,'p_f','parser.py',293),
  ('f -> CTE_F','f',1,'p_f','parser.py',294),
  ('f -> CTE_C','f',1,'p_f','parser.py',295),
  ('f -> llamada','f',1,'p_f','parser.py',296),
  ('f -> idCall','f',1,'p_f','parser.py',297),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',304),
]
