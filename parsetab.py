
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASIGNA ATTRIBUTES CHAR CLASS COLON COMMA CTE_C CTE_F CTE_I DIV DO DOT ELSE EQUALS EXTENDS FLOAT FOR FUNC GT GTE ID IF INT LBRACE LBRACK LETRERO LPAREN LT LTE MAIN METHODS MINUS MULT NEQUALS OR PLUS PROGRAM QUOTE RBRACE RBRACK READ RETURN RPAREN SCOLON THEN TO VAR VOID WHILE WRITE\n    program : PROGRAM ID initProg SCOLON declarClases declarVar addGlobSize definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba\n    \n    addGlobSize : \n    \n    initProg : \n    \n    auxMain :\n    \n    endProg : \n    \n    declarClases : CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases\n                 | empty\n    \n    herencia : LT EXTENDS ID GT\n             | empty\n    \n    declarAttributes : tipo COLON listaIdDeclare SCOLON declarAttributes\n                     | empty\n    \n    listaIdDeclare : idDeclare  \n                   | idDeclare COMMA listaIdDeclare\n    \n    idDeclare : ID auxDeclare auxDeclare2\n              | ID auxDeclare LBRACK CTE_I addCteTable RBRACK auxCTE \n              | ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK\n    \n    auxDeclare :\n    \n    auxDeclare2 :\n    \n    auxCTE :\n    \n    auxCTE2 :\n    \n    idCall : ID idCallaux checkDim\n           | ID idCallaux DOT ID\n           | ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1\n           | ID idCallaux LBRACK addFF exp idCallaux2  rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2\n    \n    idCallaux : \n    \n    idCallaux2 : \n    \n    idCallaux3 : \n    \n    idCallaux4 : \n    \n    checkDim : \n    \n    checkDim1 : \n    \n    checkDim2 : \n    \n    tipo : ID\n         | INT\n         | FLOAT\n         | CHAR\n    \n    tipoMethod : VOID\n               | INT\n               | FLOAT\n               | CHAR\n    \n    declarMethods : tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods\n                  | empty\n    \n    listaParam : param\n               | param COMMA listaParam\n               | empty\n    \n    param : tipo COLON ID\n    \n    declarVar : VAR tipo COLON listaIdDeclare SCOLON declarVar\n              | empty\n    \n    definFunc : tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc\n              | empty\n    \n    auxFuncion :\n    \n    setDI :\n    \n    endF :\n    \n    listaEstatutos : estatutos listaEstatutos\n                   | empty\n    \n    estatutos   : llamada SCOLON\n                | asignacion SCOLON\n                | returnf SCOLON\n                | lectura SCOLON\n                | escritura SCOLON\n                | condicion \n                | cond_w\n                | cond_f\n    \n    asignacion  : idCall ASIGNA pushPoper exp asignStep2 \n    \n    asignStep2  :\n    \n    llamada   : ID DOT ID LPAREN enviaParam RPAREN\n              | ID verExist LPAREN enviaParam coherenceGo RPAREN \n    \n    enviaParam  : paramReferencia\n                | empty\n    \n    paramReferencia : exp paramType\n                    | exp paramType COMMA paramCount paramReferencia\n    \n    verExist :\n    \n    paramType :\n    \n    paramCount :\n    \n    coherenceGo :\n    \n    returnf   : RETURN pushPoper LPAREN exp RPAREN popReturn\n    \n    popReturn   : \n    \n    lectura   : READ pushPoper LPAREN listaId RPAREN\n    \n    listaId : idCall popIO\n            | idCall COMMA popIO insertOpRead listaId\n    \n    insertOpRead : \n    \n    popIO : \n    \n    escritura   : WRITE pushPoper LPAREN exp popIO lextra RPAREN\n                | WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN\n    \n    lextra  : COMMA insertOpWrite exp popIO lextra\n            | COMMA insertOpWrite LETRERO letreroPush popIO lextra\n            | empty\n    \n    insertOpWrite  :\n    \n    letreroPush  :\n    \n    condicion   : IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE\n                | IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE\n    \n    cond1  :\n    \n    cond3  :\n    \n    cond_w : WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While\n    \n    step1While :\n    \n    step2While :\n    \n    step3While :\n    \n    cond_f : FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While\n    \n    step1For : \n    \n    exp     : texp step7\n            | texp step7 OR pushPoper exp\n    \n    texp    : gexp step6\n            | gexp step6 AND pushPoper texp\n    \n    gexp    : mexp step5\n            | mexp step5 LT pushPoper gexp\n            | mexp step5 GT pushPoper gexp\n            | mexp step5 LTE pushPoper gexp\n            | mexp step5 GTE pushPoper gexp\n            | mexp step5 EQUALS pushPoper gexp\n            | mexp step5 NEQUALS pushPoper gexp\n    \n    mexp    : t step4\n            | t step4 PLUS pushPoper mexp\n            | t step4 MINUS pushPoper mexp\n    \n    t   : f step3\n        | f step3 MULT pushPoper t\n        | f step3 DIV pushPoper t\n    \n    f   : LPAREN addFF exp RPAREN rmFF\n        | CTE_I addCteTable step1\n        | CTE_F addCteTable step1\n        | CTE_C addCteTable step1\n        | llamada\n        | idCall\n    \n    addCteTable   : \n    \n    step1   : \n    \n    step3   : \n    \n    step4   : \n    \n    step5   : \n    \n    step6   : \n    \n    step7   : \n    \n    addFF :\n    \n    rmFF :\n    \n    pushPoper :\n    \n    empty :\n    \n    prueba : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,109,132,161,],[0,-5,-133,-1,]),'ID':([2,7,10,29,31,33,37,42,55,57,70,71,72,74,75,83,90,91,92,99,105,106,111,112,113,114,115,116,120,128,130,131,133,134,135,136,137,149,150,151,154,160,168,182,191,196,197,198,199,200,201,202,203,204,205,206,207,217,221,223,228,229,230,231,232,233,234,235,236,237,238,239,244,247,249,252,271,277,280,283,285,290,295,296,298,299,303,],[3,12,15,36,38,40,15,36,36,15,79,15,81,15,102,81,-60,-61,-62,123,15,127,-55,-56,-57,-58,-59,-131,81,81,159,-129,81,81,123,81,-129,81,81,81,81,81,81,81,-81,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-73,-80,-87,81,81,81,81,81,81,81,81,81,81,81,81,81,123,81,81,-129,81,81,-89,81,-96,-93,-96,81,-97,-90,]),'SCOLON':([3,4,34,35,36,43,51,52,62,76,81,85,86,87,88,89,103,108,129,139,140,141,142,143,144,145,146,147,148,159,162,170,171,172,173,174,175,176,177,181,187,188,189,208,209,210,215,216,218,220,226,245,248,251,253,254,255,256,257,258,259,260,261,262,263,264,270,275,279,297,300,302,],[-3,5,41,-12,-17,-18,-13,-14,71,-19,-25,111,112,113,114,115,-15,-29,-21,-128,-127,-126,-125,-124,-122,-122,-122,-120,-121,-22,-64,-99,-101,-103,-110,-113,-123,-123,-123,-16,-63,-76,-77,-117,-118,-119,-65,-66,-130,-75,-130,-28,-82,-116,-100,-102,-104,-105,-106,-107,-108,-109,-111,-112,-114,-115,-30,-83,-23,-130,-31,-24,]),'CLASS':([5,69,],[7,7,]),'VAR':([5,6,8,41,56,69,73,78,],[-132,10,-7,10,10,-132,10,-6,]),'VOID':([5,6,8,9,11,13,41,50,54,69,78,213,242,243,],[-132,-132,-7,-2,-47,25,-132,-46,25,-132,-6,-52,25,25,]),'INT':([5,6,8,9,10,11,13,37,41,50,54,57,69,71,74,78,105,213,242,243,],[-132,-132,-7,-2,16,-47,26,16,-132,-46,26,16,-132,16,16,-6,16,-52,26,26,]),'FLOAT':([5,6,8,9,10,11,13,37,41,50,54,57,69,71,74,78,105,213,242,243,],[-132,-132,-7,-2,17,-47,27,17,-132,-46,27,17,-132,17,17,-6,17,-52,27,27,]),'CHAR':([5,6,8,9,10,11,13,37,41,50,54,57,69,71,74,78,105,213,242,243,],[-132,-132,-7,-2,18,-47,28,18,-132,-46,28,18,-132,18,18,-6,18,-52,28,28,]),'MAIN':([5,6,8,9,11,13,22,24,41,50,69,78,213,242,267,],[-132,-132,-7,-2,-47,-132,32,-49,-132,-46,-132,-6,-52,-132,-48,]),'LBRACE':([11,12,19,21,41,47,50,56,63,73,100,124,153,227,265,278,289,294,],[-47,-132,30,-9,-132,-8,-46,-132,72,-132,-51,151,182,252,277,285,-92,298,]),'LT':([12,81,108,129,141,142,143,144,145,146,147,148,159,172,173,174,175,176,177,208,209,210,215,216,218,226,245,251,261,262,263,264,270,279,297,300,302,],[20,-25,-29,-21,-126,-125,-124,-122,-122,-122,-120,-121,-22,198,-110,-113,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-111,-112,-114,-115,-30,-23,-130,-31,-24,]),'COLON':([14,15,16,17,18,45,67,],[29,-32,-33,-34,-35,55,75,]),'EXTENDS':([20,],[31,]),'FUNC':([23,25,26,27,28,60,],[33,-36,-37,-38,-39,70,]),'ATTRIBUTES':([30,],[37,]),'LPAREN':([32,39,40,49,79,81,94,95,96,97,98,107,116,117,118,119,120,121,127,128,131,133,134,136,137,149,150,154,160,168,196,197,198,199,200,201,202,203,204,205,206,207,217,223,228,229,230,231,232,233,234,235,236,237,238,239,244,249,271,280,],[-4,48,-50,57,105,-71,-131,-131,-131,120,-94,128,-131,134,135,136,137,149,154,137,-129,137,137,137,-129,137,137,137,137,137,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-73,-87,137,137,137,137,137,137,137,137,137,137,137,137,137,137,-129,137,]),'COMMA':([35,36,43,52,58,65,68,76,81,102,103,108,123,129,139,140,141,142,143,144,145,146,147,148,158,159,165,166,167,170,171,172,173,174,175,176,177,181,185,186,192,193,208,209,210,215,216,218,219,225,226,245,246,251,253,254,255,256,257,258,259,260,261,262,263,264,270,273,274,279,281,282,288,297,300,302,],[42,-17,-18,-14,-122,74,77,-19,-25,-45,-15,-29,-25,-21,-128,-127,-126,-125,-124,-122,-122,-122,-120,-121,-72,-22,191,-81,-88,-99,-101,-103,-110,-113,-123,-123,-123,-16,217,-26,223,-81,-117,-118,-119,-65,-66,-130,-130,223,-130,-28,271,-116,-100,-102,-104,-105,-106,-107,-108,-109,-111,-112,-114,-115,-30,-81,-88,-23,223,-81,223,-130,-31,-24,]),'LBRACK':([36,43,81,108,123,],[-17,53,-25,131,-25,]),'METHODS':([37,44,46,71,80,],[-132,54,-11,-132,-10,]),'GT':([38,81,108,129,141,142,143,144,145,146,147,148,159,172,173,174,175,176,177,208,209,210,215,216,218,226,245,251,261,262,263,264,270,279,297,300,302,],[47,-25,-29,-21,-126,-125,-124,-122,-122,-122,-120,-121,-22,199,-110,-113,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-111,-112,-114,-115,-30,-23,-130,-31,-24,]),'RPAREN':([48,57,64,65,66,74,81,101,102,105,108,123,126,128,129,138,139,140,141,142,143,144,145,146,147,148,154,155,156,157,158,159,163,164,165,166,167,170,171,172,173,174,175,176,177,178,183,184,185,190,192,193,194,208,209,210,215,216,218,222,224,225,226,245,250,251,253,254,255,256,257,258,259,260,261,262,263,264,269,270,272,273,274,279,281,282,287,288,293,297,300,302,],[56,-132,73,-42,-44,-132,-25,-43,-45,-132,-29,-25,153,-132,-21,169,-128,-127,-126,-125,-124,-122,-122,-122,-120,-121,-132,-74,-67,-68,-72,-22,188,189,-81,-81,-88,-99,-101,-103,-110,-113,-123,-123,-123,211,215,216,-69,-78,-132,-81,226,-117,-118,-119,-65,-66,-130,248,-86,-132,-130,-28,275,-116,-100,-102,-104,-105,-106,-107,-108,-109,-111,-112,-114,-115,-70,-30,-79,-81,-88,-23,-132,-81,-84,-132,-85,-130,-31,-24,]),'CTE_I':([53,77,116,120,128,131,133,134,136,137,149,150,154,160,168,196,197,198,199,200,201,202,203,204,205,206,207,217,223,228,229,230,231,232,233,234,235,236,237,238,239,244,249,271,280,],[58,104,-131,144,144,-129,144,144,144,-129,144,144,144,144,144,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-73,-87,144,144,144,144,144,144,144,144,144,144,144,144,144,144,-129,144,]),'RBRACE':([54,59,61,72,82,83,84,90,91,92,110,111,112,113,114,115,151,180,182,214,243,252,268,276,277,283,284,285,290,291,295,296,298,299,301,303,],[-132,69,-41,-132,109,-132,-54,-60,-61,-62,-53,-55,-56,-57,-58,-59,-132,213,-132,243,-132,-132,-40,283,-132,-89,290,-132,-96,296,-93,-96,-132,-97,303,-90,]),'RBRACK':([58,68,81,104,108,125,129,139,140,141,142,143,144,145,146,147,148,152,159,170,171,172,173,174,175,176,177,186,208,209,210,215,216,218,226,245,251,253,254,255,256,257,258,259,260,261,262,263,264,270,279,286,292,297,300,302,],[-122,76,-25,-122,-29,-20,-21,-128,-127,-126,-125,-124,-122,-122,-122,-120,-121,181,-22,-99,-101,-103,-110,-113,-123,-123,-123,218,-117,-118,-119,-65,-66,-130,-130,-28,-116,-100,-102,-104,-105,-106,-107,-108,-109,-111,-112,-114,-115,-30,-23,-27,297,-130,-31,-24,]),'RETURN':([72,83,90,91,92,111,112,113,114,115,151,182,252,277,283,285,290,295,296,298,299,303,],[94,94,-60,-61,-62,-55,-56,-57,-58,-59,94,94,94,94,-89,94,-96,-93,-96,94,-97,-90,]),'READ':([72,83,90,91,92,111,112,113,114,115,151,182,252,277,283,285,290,295,296,298,299,303,],[95,95,-60,-61,-62,-55,-56,-57,-58,-59,95,95,95,95,-89,95,-96,-93,-96,95,-97,-90,]),'WRITE':([72,83,90,91,92,111,112,113,114,115,151,182,252,277,283,285,290,295,296,298,299,303,],[96,96,-60,-61,-62,-55,-56,-57,-58,-59,96,96,96,96,-89,96,-96,-93,-96,96,-97,-90,]),'IF':([72,83,90,91,92,111,112,113,114,115,151,182,252,277,283,285,290,295,296,298,299,303,],[97,97,-60,-61,-62,-55,-56,-57,-58,-59,97,97,97,97,-89,97,-96,-93,-96,97,-97,-90,]),'WHILE':([72,83,90,91,92,111,112,113,114,115,151,182,252,277,283,285,290,295,296,298,299,303,],[98,98,-60,-61,-62,-55,-56,-57,-58,-59,98,98,98,98,-89,98,-96,-93,-96,98,-97,-90,]),'FOR':([72,83,90,91,92,111,112,113,114,115,151,182,252,277,283,285,290,295,296,298,299,303,],[99,99,-60,-61,-62,-55,-56,-57,-58,-59,99,99,99,99,-89,99,-96,-93,-96,99,-97,-90,]),'DOT':([81,108,123,],[106,130,-25,]),'ASIGNA':([81,93,108,123,129,159,218,245,270,279,297,300,302,],[-25,116,-29,-25,-21,-22,-130,-28,-30,-23,-130,-31,-24,]),'MULT':([81,108,129,143,144,145,146,147,148,159,174,175,176,177,208,209,210,215,216,218,226,245,251,270,279,297,300,302,],[-25,-29,-21,-124,-122,-122,-122,-120,-121,-22,206,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-30,-23,-130,-31,-24,]),'DIV':([81,108,129,143,144,145,146,147,148,159,174,175,176,177,208,209,210,215,216,218,226,245,251,270,279,297,300,302,],[-25,-29,-21,-124,-122,-122,-122,-120,-121,-22,207,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-30,-23,-130,-31,-24,]),'PLUS':([81,108,129,142,143,144,145,146,147,148,159,173,174,175,176,177,208,209,210,215,216,218,226,245,251,263,264,270,279,297,300,302,],[-25,-29,-21,-125,-124,-122,-122,-122,-120,-121,-22,204,-113,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-114,-115,-30,-23,-130,-31,-24,]),'MINUS':([81,108,129,142,143,144,145,146,147,148,159,173,174,175,176,177,208,209,210,215,216,218,226,245,251,263,264,270,279,297,300,302,],[-25,-29,-21,-125,-124,-122,-122,-122,-120,-121,-22,205,-113,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-114,-115,-30,-23,-130,-31,-24,]),'LTE':([81,108,129,141,142,143,144,145,146,147,148,159,172,173,174,175,176,177,208,209,210,215,216,218,226,245,251,261,262,263,264,270,279,297,300,302,],[-25,-29,-21,-126,-125,-124,-122,-122,-122,-120,-121,-22,200,-110,-113,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-111,-112,-114,-115,-30,-23,-130,-31,-24,]),'GTE':([81,108,129,141,142,143,144,145,146,147,148,159,172,173,174,175,176,177,208,209,210,215,216,218,226,245,251,261,262,263,264,270,279,297,300,302,],[-25,-29,-21,-126,-125,-124,-122,-122,-122,-120,-121,-22,201,-110,-113,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-111,-112,-114,-115,-30,-23,-130,-31,-24,]),'EQUALS':([81,108,129,141,142,143,144,145,146,147,148,159,172,173,174,175,176,177,208,209,210,215,216,218,226,245,251,261,262,263,264,270,279,297,300,302,],[-25,-29,-21,-126,-125,-124,-122,-122,-122,-120,-121,-22,202,-110,-113,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-111,-112,-114,-115,-30,-23,-130,-31,-24,]),'NEQUALS':([81,108,129,141,142,143,144,145,146,147,148,159,172,173,174,175,176,177,208,209,210,215,216,218,226,245,251,261,262,263,264,270,279,297,300,302,],[-25,-29,-21,-126,-125,-124,-122,-122,-122,-120,-121,-22,203,-110,-113,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-111,-112,-114,-115,-30,-23,-130,-31,-24,]),'AND':([81,108,129,140,141,142,143,144,145,146,147,148,159,171,172,173,174,175,176,177,208,209,210,215,216,218,226,245,251,255,256,257,258,259,260,261,262,263,264,270,279,297,300,302,],[-25,-29,-21,-127,-126,-125,-124,-122,-122,-122,-120,-121,-22,197,-103,-110,-113,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-104,-105,-106,-107,-108,-109,-111,-112,-114,-115,-30,-23,-130,-31,-24,]),'OR':([81,108,129,139,140,141,142,143,144,145,146,147,148,159,170,171,172,173,174,175,176,177,208,209,210,215,216,218,226,245,251,254,255,256,257,258,259,260,261,262,263,264,270,279,297,300,302,],[-25,-29,-21,-128,-127,-126,-125,-124,-122,-122,-122,-120,-121,-22,196,-101,-103,-110,-113,-123,-123,-123,-117,-118,-119,-65,-66,-130,-130,-28,-116,-102,-104,-105,-106,-107,-108,-109,-111,-112,-114,-115,-30,-23,-130,-31,-24,]),'TO':([81,108,122,129,139,140,141,142,143,144,145,146,147,148,159,162,170,171,172,173,174,175,176,177,187,208,209,210,215,216,218,226,245,251,253,254,255,256,257,258,259,260,261,262,263,264,270,279,297,300,302,],[-25,-29,150,-21,-128,-127,-126,-125,-124,-122,-122,-122,-120,-121,-22,-64,-99,-101,-103,-110,-113,-123,-123,-123,-63,-117,-118,-119,-65,-66,-130,-130,-28,-116,-100,-102,-104,-105,-106,-107,-108,-109,-111,-112,-114,-115,-30,-23,-130,-31,-24,]),'DO':([81,108,129,139,140,141,142,143,144,145,146,147,148,159,170,171,172,173,174,175,176,177,179,208,209,210,211,212,215,216,218,226,240,241,245,251,253,254,255,256,257,258,259,260,261,262,263,264,266,270,279,297,300,302,],[-25,-29,-21,-128,-127,-126,-125,-124,-122,-122,-122,-120,-121,-22,-99,-101,-103,-110,-113,-123,-123,-123,-94,-117,-118,-119,-95,-98,-65,-66,-130,-130,265,-95,-28,-116,-100,-102,-104,-105,-106,-107,-108,-109,-111,-112,-114,-115,278,-30,-23,-130,-31,-24,]),'CTE_F':([116,120,128,131,133,134,136,137,149,150,154,160,168,196,197,198,199,200,201,202,203,204,205,206,207,217,223,228,229,230,231,232,233,234,235,236,237,238,239,244,249,271,280,],[-131,145,145,-129,145,145,145,-129,145,145,145,145,145,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-73,-87,145,145,145,145,145,145,145,145,145,145,145,145,145,145,-129,145,]),'CTE_C':([116,120,128,131,133,134,136,137,149,150,154,160,168,196,197,198,199,200,201,202,203,204,205,206,207,217,223,228,229,230,231,232,233,234,235,236,237,238,239,244,249,271,280,],[-131,146,146,-129,146,146,146,-129,146,146,146,146,146,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-131,-73,-87,146,146,146,146,146,146,146,146,146,146,146,146,146,146,-129,146,]),'LETRERO':([136,223,249,],[167,-87,274,]),'THEN':([169,195,],[-91,227,]),'ELSE':([283,],[289,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'initProg':([3,],[4,]),'declarClases':([5,69,],[6,78,]),'empty':([5,6,12,13,37,41,54,56,57,69,71,72,73,74,83,105,128,151,154,182,192,225,242,243,252,277,281,285,288,298,],[8,11,21,24,46,11,61,11,66,8,46,84,11,66,84,66,157,84,157,84,224,224,24,61,84,84,224,84,224,84,]),'declarVar':([6,41,56,73,],[9,50,63,100,]),'addGlobSize':([9,],[13,]),'tipo':([10,37,57,71,74,105,],[14,45,67,45,67,67,]),'herencia':([12,],[19,]),'definFunc':([13,242,],[22,267,]),'tipoMethod':([13,54,242,243,],[23,60,23,60,]),'listaIdDeclare':([29,42,55,],[34,51,62,]),'idDeclare':([29,42,55,],[35,35,35,]),'auxMain':([32,],[39,]),'auxDeclare':([36,],[43,]),'declarAttributes':([37,71,],[44,80,]),'auxFuncion':([40,],[49,]),'auxDeclare2':([43,],[52,]),'declarMethods':([54,243,],[59,268,]),'listaParam':([57,74,105,],[64,101,126,]),'param':([57,74,105,],[65,65,65,]),'addCteTable':([58,104,144,145,146,],[68,125,175,176,177,]),'listaEstatutos':([72,83,151,182,252,277,285,298,],[82,110,180,214,276,284,291,301,]),'estatutos':([72,83,151,182,252,277,285,298,],[83,83,83,83,83,83,83,83,]),'llamada':([72,83,120,128,133,134,136,149,150,151,154,160,168,182,228,229,230,231,232,233,234,235,236,237,238,239,244,249,252,277,280,285,298,],[85,85,147,147,147,147,147,147,147,85,147,147,147,85,147,147,147,147,147,147,147,147,147,147,147,147,147,147,85,85,147,85,85,]),'asignacion':([72,83,99,151,182,252,277,285,298,],[86,86,122,86,86,86,86,86,86,]),'returnf':([72,83,151,182,252,277,285,298,],[87,87,87,87,87,87,87,87,]),'lectura':([72,83,151,182,252,277,285,298,],[88,88,88,88,88,88,88,88,]),'escritura':([72,83,151,182,252,277,285,298,],[89,89,89,89,89,89,89,89,]),'condicion':([72,83,151,182,252,277,285,298,],[90,90,90,90,90,90,90,90,]),'cond_w':([72,83,151,182,252,277,285,298,],[91,91,91,91,91,91,91,91,]),'cond_f':([72,83,151,182,252,277,285,298,],[92,92,92,92,92,92,92,92,]),'idCall':([72,83,99,120,128,133,134,135,136,149,150,151,154,160,168,182,228,229,230,231,232,233,234,235,236,237,238,239,244,247,249,252,277,280,285,298,],[93,93,93,148,148,148,148,165,148,148,148,93,148,148,148,93,148,148,148,148,148,148,148,148,148,148,148,148,148,165,148,93,93,148,93,93,]),'auxCTE':([76,],[103,]),'verExist':([81,],[107,]),'idCallaux':([81,123,],[108,108,]),'pushPoper':([94,95,96,116,196,197,198,199,200,201,202,203,204,205,206,207,],[117,118,119,133,228,229,230,231,232,233,234,235,236,237,238,239,]),'step1While':([98,179,],[121,212,]),'setDI':([100,],[124,]),'checkDim':([108,],[129,]),'endProg':([109,],[132,]),'exp':([120,128,133,134,136,149,150,154,160,168,228,244,249,280,],[138,158,162,163,166,178,179,158,186,194,253,158,273,286,]),'texp':([120,128,133,134,136,149,150,154,160,168,228,229,244,249,280,],[139,139,139,139,139,139,139,139,139,139,139,254,139,139,139,]),'gexp':([120,128,133,134,136,149,150,154,160,168,228,229,230,231,232,233,234,235,244,249,280,],[140,140,140,140,140,140,140,140,140,140,140,140,255,256,257,258,259,260,140,140,140,]),'mexp':([120,128,133,134,136,149,150,154,160,168,228,229,230,231,232,233,234,235,236,237,244,249,280,],[141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,261,262,141,141,141,]),'t':([120,128,133,134,136,149,150,154,160,168,228,229,230,231,232,233,234,235,236,237,238,239,244,249,280,],[142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,263,264,142,142,142,]),'f':([120,128,133,134,136,149,150,154,160,168,228,229,230,231,232,233,234,235,236,237,238,239,244,249,280,],[143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,]),'auxCTE2':([125,],[152,]),'enviaParam':([128,154,],[155,183,]),'paramReferencia':([128,154,244,],[156,156,269,]),'addFF':([131,137,271,],[160,168,280,]),'prueba':([132,],[161,]),'listaId':([135,247,],[164,272,]),'step7':([139,],[170,]),'step6':([140,],[171,]),'step5':([141,],[172,]),'step4':([142,],[173,]),'step3':([143,],[174,]),'coherenceGo':([155,],[184,]),'paramType':([158,],[185,]),'asignStep2':([162,],[187,]),'popIO':([165,166,191,193,273,282,],[190,192,221,225,281,288,]),'letreroPush':([167,274,],[193,282,]),'cond1':([169,],[195,]),'step1':([175,176,177,],[208,209,210,]),'idCallaux2':([186,],[219,]),'popReturn':([188,],[220,]),'lextra':([192,225,281,288,],[222,250,287,293,]),'step2While':([211,241,],[240,266,]),'step1For':([212,],[241,]),'endF':([213,],[242,]),'paramCount':([217,],[244,]),'rmFF':([218,219,226,297,],[245,246,251,300,]),'insertOpRead':([221,],[247,]),'insertOpWrite':([223,],[249,]),'idCallaux4':([245,],[270,]),'checkDim1':([270,],[279,]),'idCallaux3':([286,],[292,]),'cond3':([289,],[294,]),'step3While':([290,296,],[295,299,]),'checkDim2':([300,],[302,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID initProg SCOLON declarClases declarVar addGlobSize definFunc MAIN auxMain LPAREN RPAREN declarVar LBRACE listaEstatutos RBRACE endProg prueba','program',18,'p_program','parser.py',25),
  ('addGlobSize -> <empty>','addGlobSize',0,'p_addGlobSize','parser.py',30),
  ('initProg -> <empty>','initProg',0,'p_initProg','parser.py',37),
  ('auxMain -> <empty>','auxMain',0,'p_auxMain','parser.py',51),
  ('endProg -> <empty>','endProg',0,'p_endProg','parser.py',64),
  ('declarClases -> CLASS ID herencia LBRACE ATTRIBUTES declarAttributes METHODS declarMethods RBRACE declarClases','declarClases',10,'p_declarClases','parser.py',91),
  ('declarClases -> empty','declarClases',1,'p_declarClases','parser.py',92),
  ('herencia -> LT EXTENDS ID GT','herencia',4,'p_herencia','parser.py',98),
  ('herencia -> empty','herencia',1,'p_herencia','parser.py',99),
  ('declarAttributes -> tipo COLON listaIdDeclare SCOLON declarAttributes','declarAttributes',5,'p_declarAttributes','parser.py',105),
  ('declarAttributes -> empty','declarAttributes',1,'p_declarAttributes','parser.py',106),
  ('listaIdDeclare -> idDeclare','listaIdDeclare',1,'p_listaIdDeclare','parser.py',115),
  ('listaIdDeclare -> idDeclare COMMA listaIdDeclare','listaIdDeclare',3,'p_listaIdDeclare','parser.py',116),
  ('idDeclare -> ID auxDeclare auxDeclare2','idDeclare',3,'p_idDeclare','parser.py',122),
  ('idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable RBRACK auxCTE','idDeclare',7,'p_idDeclare','parser.py',123),
  ('idDeclare -> ID auxDeclare LBRACK CTE_I addCteTable COMMA CTE_I addCteTable auxCTE2 RBRACK','idDeclare',10,'p_idDeclare','parser.py',124),
  ('auxDeclare -> <empty>','auxDeclare',0,'p_auxDeclare','parser.py',130),
  ('auxDeclare2 -> <empty>','auxDeclare2',0,'p_auxDeclare2','parser.py',136),
  ('auxCTE -> <empty>','auxCTE',0,'p_auxCTE','parser.py',149),
  ('auxCTE2 -> <empty>','auxCTE2',0,'p_auxCTE2','parser.py',170),
  ('idCall -> ID idCallaux checkDim','idCall',3,'p_idCall','parser.py',197),
  ('idCall -> ID idCallaux DOT ID','idCall',4,'p_idCall','parser.py',198),
  ('idCall -> ID idCallaux LBRACK addFF exp RBRACK rmFF idCallaux4 checkDim1','idCall',9,'p_idCall','parser.py',199),
  ('idCall -> ID idCallaux LBRACK addFF exp idCallaux2 rmFF COMMA addFF exp idCallaux3 RBRACK rmFF checkDim2','idCall',14,'p_idCall','parser.py',200),
  ('idCallaux -> <empty>','idCallaux',0,'p_idCallaux','parser.py',205),
  ('idCallaux2 -> <empty>','idCallaux2',0,'p_idCallaux2','parser.py',220),
  ('idCallaux3 -> <empty>','idCallaux3',0,'p_idCallaux3','parser.py',235),
  ('idCallaux4 -> <empty>','idCallaux4',0,'p_idCallaux4','parser.py',281),
  ('checkDim -> <empty>','checkDim',0,'p_checkDim','parser.py',316),
  ('checkDim1 -> <empty>','checkDim1',0,'p_checkDim1','parser.py',330),
  ('checkDim2 -> <empty>','checkDim2',0,'p_checkDim2','parser.py',347),
  ('tipo -> ID','tipo',1,'p_tipo','parser.py',367),
  ('tipo -> INT','tipo',1,'p_tipo','parser.py',368),
  ('tipo -> FLOAT','tipo',1,'p_tipo','parser.py',369),
  ('tipo -> CHAR','tipo',1,'p_tipo','parser.py',370),
  ('tipoMethod -> VOID','tipoMethod',1,'p_tipoMethod','parser.py',377),
  ('tipoMethod -> INT','tipoMethod',1,'p_tipoMethod','parser.py',378),
  ('tipoMethod -> FLOAT','tipoMethod',1,'p_tipoMethod','parser.py',379),
  ('tipoMethod -> CHAR','tipoMethod',1,'p_tipoMethod','parser.py',380),
  ('declarMethods -> tipoMethod FUNC ID LPAREN listaParam RPAREN LBRACE listaEstatutos RBRACE declarMethods','declarMethods',10,'p_declarMethods','parser.py',390),
  ('declarMethods -> empty','declarMethods',1,'p_declarMethods','parser.py',391),
  ('listaParam -> param','listaParam',1,'p_listaParam','parser.py',400),
  ('listaParam -> param COMMA listaParam','listaParam',3,'p_listaParam','parser.py',401),
  ('listaParam -> empty','listaParam',1,'p_listaParam','parser.py',402),
  ('param -> tipo COLON ID','param',3,'p_param','parser.py',408),
  ('declarVar -> VAR tipo COLON listaIdDeclare SCOLON declarVar','declarVar',6,'p_declarVar','parser.py',420),
  ('declarVar -> empty','declarVar',1,'p_declarVar','parser.py',421),
  ('definFunc -> tipoMethod FUNC ID auxFuncion LPAREN listaParam RPAREN declarVar setDI LBRACE listaEstatutos RBRACE endF definFunc','definFunc',14,'p_definFunc','parser.py',429),
  ('definFunc -> empty','definFunc',1,'p_definFunc','parser.py',430),
  ('auxFuncion -> <empty>','auxFuncion',0,'p_auxFuncion','parser.py',436),
  ('setDI -> <empty>','setDI',0,'p_setDI','parser.py',448),
  ('endF -> <empty>','endF',0,'p_endF','parser.py',464),
  ('listaEstatutos -> estatutos listaEstatutos','listaEstatutos',2,'p_listaEstatutos','parser.py',484),
  ('listaEstatutos -> empty','listaEstatutos',1,'p_listaEstatutos','parser.py',485),
  ('estatutos -> llamada SCOLON','estatutos',2,'p_estatutos','parser.py',490),
  ('estatutos -> asignacion SCOLON','estatutos',2,'p_estatutos','parser.py',491),
  ('estatutos -> returnf SCOLON','estatutos',2,'p_estatutos','parser.py',492),
  ('estatutos -> lectura SCOLON','estatutos',2,'p_estatutos','parser.py',493),
  ('estatutos -> escritura SCOLON','estatutos',2,'p_estatutos','parser.py',494),
  ('estatutos -> condicion','estatutos',1,'p_estatutos','parser.py',495),
  ('estatutos -> cond_w','estatutos',1,'p_estatutos','parser.py',496),
  ('estatutos -> cond_f','estatutos',1,'p_estatutos','parser.py',497),
  ('asignacion -> idCall ASIGNA pushPoper exp asignStep2','asignacion',5,'p_asignacion','parser.py',505),
  ('asignStep2 -> <empty>','asignStep2',0,'p_asignStep2','parser.py',512),
  ('llamada -> ID DOT ID LPAREN enviaParam RPAREN','llamada',6,'p_llamada','parser.py',522),
  ('llamada -> ID verExist LPAREN enviaParam coherenceGo RPAREN','llamada',6,'p_llamada','parser.py',523),
  ('enviaParam -> paramReferencia','enviaParam',1,'p_enviaParam','parser.py',528),
  ('enviaParam -> empty','enviaParam',1,'p_enviaParam','parser.py',529),
  ('paramReferencia -> exp paramType','paramReferencia',2,'p_paramReferencia','parser.py',534),
  ('paramReferencia -> exp paramType COMMA paramCount paramReferencia','paramReferencia',5,'p_paramReferencia','parser.py',535),
  ('verExist -> <empty>','verExist',0,'p_verExist','parser.py',542),
  ('paramType -> <empty>','paramType',0,'p_paramType','parser.py',558),
  ('paramCount -> <empty>','paramCount',0,'p_paramCount','parser.py',578),
  ('coherenceGo -> <empty>','coherenceGo',0,'p_coherenceGo','parser.py',585),
  ('returnf -> RETURN pushPoper LPAREN exp RPAREN popReturn','returnf',6,'p_returnf','parser.py',607),
  ('popReturn -> <empty>','popReturn',0,'p_popReturn','parser.py',612),
  ('lectura -> READ pushPoper LPAREN listaId RPAREN','lectura',5,'p_lectura','parser.py',623),
  ('listaId -> idCall popIO','listaId',2,'p_listaId','parser.py',628),
  ('listaId -> idCall COMMA popIO insertOpRead listaId','listaId',5,'p_listaId','parser.py',629),
  ('insertOpRead -> <empty>','insertOpRead',0,'p_insertOpRead','parser.py',634),
  ('popIO -> <empty>','popIO',0,'p_popIO','parser.py',641),
  ('escritura -> WRITE pushPoper LPAREN exp popIO lextra RPAREN','escritura',7,'p_escritura','parser.py',652),
  ('escritura -> WRITE pushPoper LPAREN LETRERO letreroPush popIO lextra RPAREN','escritura',8,'p_escritura','parser.py',653),
  ('lextra -> COMMA insertOpWrite exp popIO lextra','lextra',5,'p_lextra','parser.py',658),
  ('lextra -> COMMA insertOpWrite LETRERO letreroPush popIO lextra','lextra',6,'p_lextra','parser.py',659),
  ('lextra -> empty','lextra',1,'p_lextra','parser.py',660),
  ('insertOpWrite -> <empty>','insertOpWrite',0,'p_insertOpWrite','parser.py',665),
  ('letreroPush -> <empty>','letreroPush',0,'p_letreroPush','parser.py',672),
  ('condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE','condicion',9,'p_condicion','parser.py',681),
  ('condicion -> IF LPAREN exp RPAREN cond1 THEN LBRACE listaEstatutos RBRACE ELSE cond3 LBRACE listaEstatutos RBRACE','condicion',14,'p_condicion','parser.py',682),
  ('cond1 -> <empty>','cond1',0,'p_cond1','parser.py',688),
  ('cond3 -> <empty>','cond3',0,'p_cond3','parser.py',698),
  ('cond_w -> WHILE step1While LPAREN exp RPAREN step2While DO LBRACE listaEstatutos RBRACE step3While','cond_w',11,'p_cond_w','parser.py',709),
  ('step1While -> <empty>','step1While',0,'p_step1While','parser.py',714),
  ('step2While -> <empty>','step2While',0,'p_step2While','parser.py',720),
  ('step3While -> <empty>','step3While',0,'p_step3While','parser.py',728),
  ('cond_f -> FOR asignacion TO exp step1While step1For step2While DO LBRACE listaEstatutos RBRACE step3While','cond_f',12,'p_cond_f','parser.py',739),
  ('step1For -> <empty>','step1For',0,'p_step1For','parser.py',744),
  ('exp -> texp step7','exp',2,'p_exp','parser.py',754),
  ('exp -> texp step7 OR pushPoper exp','exp',5,'p_exp','parser.py',755),
  ('texp -> gexp step6','texp',2,'p_texp','parser.py',760),
  ('texp -> gexp step6 AND pushPoper texp','texp',5,'p_texp','parser.py',761),
  ('gexp -> mexp step5','gexp',2,'p_gexp','parser.py',766),
  ('gexp -> mexp step5 LT pushPoper gexp','gexp',5,'p_gexp','parser.py',767),
  ('gexp -> mexp step5 GT pushPoper gexp','gexp',5,'p_gexp','parser.py',768),
  ('gexp -> mexp step5 LTE pushPoper gexp','gexp',5,'p_gexp','parser.py',769),
  ('gexp -> mexp step5 GTE pushPoper gexp','gexp',5,'p_gexp','parser.py',770),
  ('gexp -> mexp step5 EQUALS pushPoper gexp','gexp',5,'p_gexp','parser.py',771),
  ('gexp -> mexp step5 NEQUALS pushPoper gexp','gexp',5,'p_gexp','parser.py',772),
  ('mexp -> t step4','mexp',2,'p_mexp','parser.py',777),
  ('mexp -> t step4 PLUS pushPoper mexp','mexp',5,'p_mexp','parser.py',778),
  ('mexp -> t step4 MINUS pushPoper mexp','mexp',5,'p_mexp','parser.py',779),
  ('t -> f step3','t',2,'p_t','parser.py',784),
  ('t -> f step3 MULT pushPoper t','t',5,'p_t','parser.py',785),
  ('t -> f step3 DIV pushPoper t','t',5,'p_t','parser.py',786),
  ('f -> LPAREN addFF exp RPAREN rmFF','f',5,'p_f','parser.py',791),
  ('f -> CTE_I addCteTable step1','f',3,'p_f','parser.py',792),
  ('f -> CTE_F addCteTable step1','f',3,'p_f','parser.py',793),
  ('f -> CTE_C addCteTable step1','f',3,'p_f','parser.py',794),
  ('f -> llamada','f',1,'p_f','parser.py',795),
  ('f -> idCall','f',1,'p_f','parser.py',796),
  ('addCteTable -> <empty>','addCteTable',0,'p_addCteTable','parser.py',802),
  ('step1 -> <empty>','step1',0,'p_step1','parser.py',808),
  ('step3 -> <empty>','step3',0,'p_step3','parser.py',818),
  ('step4 -> <empty>','step4',0,'p_step4','parser.py',826),
  ('step5 -> <empty>','step5',0,'p_step5','parser.py',834),
  ('step6 -> <empty>','step6',0,'p_step6','parser.py',842),
  ('step7 -> <empty>','step7',0,'p_step7','parser.py',850),
  ('addFF -> <empty>','addFF',0,'p_addFF','parser.py',859),
  ('rmFF -> <empty>','rmFF',0,'p_rmFF','parser.py',866),
  ('pushPoper -> <empty>','pushPoper',0,'p_pushPoper','parser.py',872),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',881),
  ('prueba -> <empty>','prueba',0,'p_prueba','parser.py',896),
]
